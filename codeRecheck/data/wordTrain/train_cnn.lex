#define var nums 
 enum enum_name { var , var } 
 struct { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 float var ; 
 float var ; 
 int var ; 
 } ; 
 struct { 
 struct struct_name struct_var ; 
 int var ; 
 struct struct_name * struct_var ; 
 } ; 
 struct struct_name struct_var [ var ] ; 
 struct struct_name * struct_var ; 
 void * func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( nums ) 
 { 
 switch ( func ( ) ) 
 { 
 case nums : 
 call_func ( ) ; break ; 
 case nums : 
 call_func ( ) ; break ; 
 case nums : 
 call_func ( ) ; break ; 
 case nums : 
 call_func ( ) ; break ; 
 case nums : 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 } 
 } 
 int func ( ) 
 { 
 char var [ nums ] ; 
 int var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( nums ) 
 { 
 fflush ( stdin ) ; 
 gets ( var ) ; 
 var = call_func ( var ) ; 
 if ( var < nums | | var > nums ) 
 printf ( words ) ; 
 else 
 break ; 
 } 
 return var ; 
 } 
 void func ( ) 
 { 
 int var ; 
 FILE * var ; 
 var = fopen ( words , words ) ; 
 for ( var = nums ; ( fread ( + var , sizeof ( struct ) , nums , var ) ) ! = nums ; var + + ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words , [ var ] . var , [ var ] . var , [ var ] . var , [ var ] . var ) ; 
 } 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 while ( nums ) 
 { 
 switch ( func ( ) ) 
 { 
 case nums : 
 call_func ( ) ; break ; 
 case nums : 
 ( ) ; break ; 
 case nums : 
 return ; 
 } 
 } 
 } 
 int func ( ) 
 { 
 char var [ nums ] ; 
 int var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( nums ) 
 { 
 fflush ( stdin ) ; 
 gets ( var ) ; 
 var = call_func ( var ) ; 
 if ( var < nums | | var > nums ) 
 printf ( words ) ; 
 else 
 break ; 
 } 
 return var ; 
 } 
 void func ( ) 
 { 
 struct struct_name * struct_var = var ; 
 if ( var = = NULL ) { 
 printf ( words ) ; 
 return ; 
 } 
 while ( var ! = NULL ) { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words , var - > var . var , var - > var . var , var - > var . var , var - > var ) ; 
 var = var - > var ; 
 } 
 } 
 void ( ) 
 { 
 FILE * var ; 
 int var , var ; 
 char var [ nums ] ; 
 char var , var ; 
 struct struct_name * struct_var , * var ; 
 do 
 { 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 gets ( var ) ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) { 
 printf ( words ) ; 
 continue ; 
 } 
 for ( var = nums ; fread ( + var , sizeof ( struct ) , nums , var ) ! = nums ; var + + ) { 
 if ( ( strcmp ( [ var ] . var , var ) = = nums | | strcmp ( [ var ] . var , var ) = = nums ) & & [ var ] . var ! = nums ) { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words , [ var ] . var , [ var ] . var , [ var ] . var , [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var > [ var ] . var ) { 
 printf ( words ) ; 
 break ; 
 } 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 var = call_func ( ) ; 
 if ( var = = words | | var = = words ) { 
 var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 if ( var = = NULL ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 var - > var = var ; 
 var - > var = [ var ] ; 
 var - > var = NULL ; 
 var = var ; 
 if ( var = = NULL ) 
 var = var ; 
 else { 
 while ( var - > var ! = NULL ) 
 var = var - > var ; 
 var - > var = var - > var ; 
 var - > var = var ; 
 } 
 } 
 break ; 
 } 
 } 
 if ( var = = var ) 
 printf ( words ) ; 
 fclose ( var ) ; 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 var = call_func ( ) ; 
 } while ( var = = words | | var = = words ) ; 
 } 
 void func ( ) { 
 FILE * var ; 
 int var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 gets ( [ var ] . var ) ; 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 gets ( [ var ] . var ) ; 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 } 
 if ( ( var = fopen ( words , words ) ) = = NULL ) { 
 printf ( words ) ; 
 return ; 
 } 
 fwrite ( , sizeof ( struct ) , var , var ) ; 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 float var = nums , var ; 
 struct struct_name * struct_var ; 
 int var ; 
 FILE * var ; 
 printf ( words ) ; 
 call_func ( ) ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) { 
 printf ( words ) ; 
 return ; 
 } 
 for ( var = nums ; ( fread ( + var , sizeof ( struct ) , nums , var ) ) ! = nums ; var + + ) ; 
 fclose ( var ) ; 
 var = var ; 
 while ( var ! = NULL ) { 
 var + = var - > var . var * var - > var ; 
 for ( var = nums ; strcmp ( [ var ] . var , var - > var . var ) ! = nums ; var + + ) ; 
 [ var ] . var - = var - > var ; 
 var = var - > var ; 
 } 
 printf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var , var - var ) ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) { 
 printf ( words ) ; 
 return ; 
 } 
 fwrite ( , sizeof ( struct ) , var , var ) ; 
 fclose ( var ) ; 
 } 
 #define var sizeof ( struct ) 
 #define var words 
 #define var var [ var ] . var , var [ var ] . var , var [ var ] . var , var [ var ] . var , var [ var ] . var , var [ var ] . var 
 struct 
 { int var ; 
 char var [ nums ] ; 
 double var ; 
 double var ; 
 double var ; 
 double var ; 
 } ; 
 struct struct_name struct_var [ nums ] ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void func ( ) 
 { int var ; 
 call_func ( ) ; 
 scanf ( words , & var ) ; 
 while ( var ) 
 { switch ( var ) 
 { case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 default : break ; 
 } 
 getch ( ) ; 
 call_func ( ) ; 
 scanf ( words , & var ) ; 
 } 
 } 
 void func ( ) 
 { int var , var = nums ; 
 char var [ nums ] ; 
 FILE * var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 while ( ! feof ( var ) ) { 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) 
 var + + ; 
 } 
 fclose ( var ) ; 
 if ( var = = nums ) 
 printf ( words ) ; 
 else 
 { 
 system ( words ) ; 
 call_func ( ) ; 
 } 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 for ( var = nums ; var < var ; var + + ) fwrite ( & var [ var ] , var , nums , var ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 while ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 printf ( words ) ; scanf ( words , & var [ var ] . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] . var = = var [ var ] . var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 fclose ( var ) ; 
 return ; 
 } 
 printf ( words ) ; scanf ( words , var [ var ] . var ) ; 
 printf ( words ) ; scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; scanf ( words , & var [ var ] . var ) ; 
 var [ var ] . var = var [ var ] . var + var [ var ] . var + var [ var ] . var ; 
 if ( fwrite ( & var [ var ] , var , nums , var ) ! = nums ) 
 { printf ( words ) ; getch ( ) ; } 
 else { printf ( words , var [ var ] . var ) ; var + + ; } 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 } 
 fclose ( var ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 int var , var = nums ; 
 var = fopen ( words , words ) ; 
 while ( ! feof ( var ) ) 
 { 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) 
 var + + ; 
 } 
 fclose ( var ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( var , var ) ; 
 } 
 } 
 
 void func ( ) 
 { 
 system ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 struct struct_name struct_var ; 
 int var = nums , var = nums , var = nums ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 while ( ! feof ( var ) ) 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) 
 var + + ; 
 fclose ( var ) ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 return ; } 
 for ( var = nums ; var < var - nums ; var + + ) 
 for ( var = var + nums ; var < var ; var + + ) 
 if ( var [ var ] . var < var [ var ] . var ) 
 { var = var [ var ] ; var [ var ] = var [ var ] ; var [ var ] = var ; } 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 for ( var = nums ; var < var ; var + + ) 
 if ( fwrite ( & var [ var ] , var , nums , var ) ! = nums ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 } 
 fclose ( var ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 int var , var , var , var = nums ; 
 char var [ nums ] ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 while ( ! feof ( var ) ) if ( fread ( & var [ var ] , var , nums , var ) = = nums ) var + + ; 
 fclose ( var ) ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var = = var [ var ] . var ) 
 break ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 for ( var = var ; var < var ; var + + ) 
 var [ var ] = var [ var + nums ] ; 
 var - - ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 for ( var = nums ; var < var ; var + + ) 
 if ( fwrite ( & var [ var ] , var , nums , var ) ! = nums ) 
 { printf ( words ) ; 
 getch ( ) ; } 
 fclose ( var ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 int var , var , var = nums ; 
 char var [ nums ] ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 while ( ! feof ( var ) ) if ( fread ( & var [ var ] , var , nums , var ) = = nums ) var + + ; 
 fclose ( var ) ; 
 if ( var = = nums ) { printf ( words ) ; return ; } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var = = var [ var ] . var ) 
 { printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 printf ( words ) ; 
 printf ( var , var ) ; 
 break ; 
 } 
 } 
 if ( var = = var ) printf ( words ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 int var , var , var = nums , var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 while ( ! feof ( var ) ) 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) var + + ; 
 if ( var = = nums ) { printf ( words ) ; 
 fclose ( var ) ; 
 return ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var = = var [ var ] . var ) 
 break ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 var [ var ] . var = var [ var ] . var + var [ var ] . var + var [ var ] . var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 for ( var = nums ; var < var ; var + + ) 
 if ( fwrite ( & var [ var ] , var , nums , var ) ! = nums ) 
 { printf ( words ) ; getch ( ) ; } 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 int var , var , var , var = nums , var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 while ( ! feof ( var ) ) 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) var + + ; 
 if ( var = = nums ) { printf ( words ) ; 
 fclose ( var ) ; 
 return ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var = = var [ var ] . var ) 
 break ; 
 for ( var = var - nums ; var > var ; var - - ) 
 var [ var + nums ] = var [ var ] ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var + nums ] . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] . var = = var [ var + nums ] . var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 fclose ( var ) ; 
 return ; 
 } 
 printf ( words ) ; 
 scanf ( words , var [ var + nums ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var + nums ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var + nums ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var + nums ] . var ) ; 
 var [ var + nums ] . var = var [ var + nums ] . var + var [ var + nums ] . var + var [ var + nums ] . var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 for ( var = nums ; var <= var ; var + + ) 
 if ( fwrite ( & var [ var ] , var , nums , var ) ! = nums ) 
 { printf ( words ) ; getch ( ) ; } 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 int var = nums ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 while ( ! feof ( var ) ) 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) 
 var + + ; 
 if ( var = = nums ) { printf ( words ) ; fclose ( var ) ; return ; } 
 printf ( words , var ) ; 
 fclose ( var ) ; 
 } 
 #define var var 
 #define var var 
 #define var nums 
 #define var nums 
 #define var var 
 #define var var 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 int var , var , var ; 
 typedef struct 
 { 
 char var ; 
 int var , var ; 
 } ; 
 struct_name struct_var [ nums ] ; 
 typedef struct 
 { 
 char var ; 
 struct struct_name * struct_var ; 
 } ; 
 typedef struct 
 { 
 struct_name * struct_var ; 
 struct struct_name * struct_var ; 
 } ; 
 void func ( ) 
 { 
 int var , var ; 
 call_func ( nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( ) ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 call_func ( nums , nums + var ) ; 
 call_func ( words , nums ) ; 
 call_func ( nums , nums + var ) ; 
 call_func ( words , nums ) ; 
 } 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 call_func ( nums + var , nums ) ; 
 call_func ( words , nums ) ; 
 call_func ( nums + var , nums ) ; 
 call_func ( words , nums ) ; 
 } 
 call_func ( nums , nums ) ; call_func ( words , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 } 
 void func ( struct_name * var ) 
 { 
 void call_func ( struct_name * var ) ; 
 struct_name * struct_var ; 
 int var ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 
 do { 
 var = var - > var ; 
 call_func ( words ) ; 
 while ( var ! = NULL ) 
 { 
 if ( var - > var = = nums ) call_func ( words ) ; 
 else 
 call_func ( var - > var ) ; 
 var = var - > var ; 
 } 
 var = var - > var ; 
 printf ( words ) ; 
 } while ( var ! = NULL ) ; 
 getch ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 call_func ( ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 } 
 void func ( struct_name * var ) 
 { 
 struct_name * struct_var ; 
 call_func ( ) ; 
 
 do { 
 var = var - > var ; 
 while ( var ! = NULL & & var - > var >= nums & & var - > var < nums & & var - > var ! = nums & & var - > var ! = - nums ) 
 { 
 call_func ( var - > var ) ; 
 var = var - > var ; 
 } 
 var = var - > var ; 
 if ( ( var - > var = = nums | | var - > var = = - nums ) & & var ! = NULL ) call_func ( nums , call_func ( ) + nums ) ; 
 } while ( var ! = NULL ) ; 
 } 
 
 int func ( struct_name * var , data_type var , data_type var ) 
 { 
 int var ; 
 struct_name * struct_var ; 
 struct_name * struct_var ; 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) 
 var = var - > var ; 
 var = var - > var ; 
 for ( var = nums ; var < var ; var + + ) 
 var = var - > var ; 
 if ( var - > var = = nums ) return - nums ; 
 if ( var - > var >= nums & & var - > var < nums ) return var - > var ; 
 else return nums ; 
 } 
 int func ( struct_name * var , data_type var ) 
 { 
 struct_name * struct_var ; 
 struct_name * struct_var ; 
 int var , var = nums ; 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) 
 var = var - > var ; 
 if ( var = = NULL ) return - nums ; 
 var = var - > var ; 
 while ( var - > var ! = NULL ) 
 { 
 var = var - > var ; 
 var + + ; 
 } 
 
 if ( var - > var = = nums & & var = = nums ) return nums ; 
 if ( var - > var >= nums & & var - > var < nums ) return var + nums ; 
 if ( var - > var = = nums & & var ! = nums ) return var ; 
 else return nums ; 
 } 
 int func ( struct_name * var , data_type var , data_type var ) 
 { 
 struct_name * struct_var , * var ; 
 struct_name * struct_var , * var , * var ; 
 int var , var = nums , var , var = nums ; 
 var = var ; 
 if ( var = = nums & & var = = nums ) return ; 
 if ( var = = nums & & var > nums ) 
 { 
 var = nums ; 
 var = var - nums ; 
 call_func ( var , var ) ; 
 var = nums ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 var = var - > var ; 
 var = var - > var ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 var = var - > var ; 
 var = var - > var ; 
 if ( var = = nums ) 
 { 
 var - > var = var - > var ; 
 free ( var ) ; 
 } 
 else 
 { 
 var - > var = var - > var ; 
 free ( var ) ; 
 } 
 
 while ( ( var = func ( var , var + + ) ) > nums ) 
 { 
 var = var - > var ; var = var ; 
 if ( var ! = NULL ) 
 { 
 while ( var - > var ! = NULL ) 
 var = var - > var ; 
 var = var ; 
 var = var - > var ; 
 var = var = var - > var ; 
 var - > var = var ; 
 } 
 else 
 { 
 var = var - > var ; var = var = var - > var ; 
 var - > var = var ; 
 } 
 for ( var = nums ; var < nums - var ; var + + ) 
 
 { 
 var = var ; 
 var = var - > var ; 
 if ( var - > var = = nums ) break ; 
 } 
 var - > var = var ; 
 var - > var = NULL ; 
 } 
 return var ; 
 } 
 
 int func ( struct_name * var , data_type var ) 
 { 
 int var = nums , var = nums ; 
 struct_name * struct_var , * var , * var , * var , * var ; 
 struct_name * struct_var ; 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) 
 var = var - > var ; 
 var = var = var - > var ; 
 if ( var = = NULL ) return ; 
 while ( var - > var ! = NULL ) 
 var = var - > var ; 
 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var - > var = = nums | | var - > var = = NULL ) break ; 
 var = var - > var ; 
 } 
 var = var - > var ; 
 var - > var = NULL ; 
 if ( var - > var ! = nums ) 
 { 
 if ( var - > var = = nums & & var - > var = = NULL ) 
 { 
 var - > var = ( ) malloc ( sizeof ( ) ) ; 
 var - > var - > var = NULL ; 
 var - > var = ( ) malloc ( sizeof ( ) ) ; 
 var - > var - > var = nums ; var - > var - > var = NULL ; 
 var - > var - > var = var ; 
 } 
 else 
 { 
 var = var - > var ; 
 var - > var = var - > var ; 
 var - > var = var ; 
 if ( var ! = NULL ) call_func ( var , + + var ) ; 
 } 
 } 
 else 
 { 
 var = var ; 
 while ( var ! = NULL & & var ! = NULL ) 
 { 
 if ( ( var - > var = = NULL ) & & ( var ! = var | | var ! = NULL ) & & ( var = = nums ) ) 
 { 
 var + + ; 
 var - > var = ( ) malloc ( sizeof ( ) ) ; 
 var - > var - > var = NULL ; var - > var - > var = NULL ; 
 } 
 
 var = var - > var ; 
 var = var - > var ; 
 var - > var = var ; 
 var = var ; 
 } 
 } 
 } 
 void func ( struct_name * var , data_type var , data_type var , data_type var ) 
 { 
 int var ; 
 struct_name * struct_var ; 
 struct_name * struct_var , * var , * var ; 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) 
 var = var - > var ; 
 var = var - > var ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 var = var - > var ; 
 var = ( ) malloc ( sizeof ( ) ) ; 
 var - > var = var ; 
 if ( var = = nums ) 
 { 
 var - > var = var - > var ; 
 var - > var = var ; 
 } 
 else 
 { 
 var - > var = var - > var ; 
 var - > var = var ; 
 } 
 call_func ( var , var ) ; 
 } 
 void func ( data_type var , struct_name * var ) 
 { 
 void call_func ( struct_name * , data_type , data_type ) ; 
 int var , var , var = nums ; 
 var = call_func ( ) ; var = call_func ( ) ; 
 if ( ( var = = var ) & & ( var ! = nums ) ) 
 call_func ( call_func ( ) - nums , call_func ( ) ) ; 
 if ( ( var = = var ) & & ( var = = nums ) ) 
 call_func ( call_func ( call_func ( var , call_func ( ) - nums ) ) , call_func ( ) - nums ) ; 
 if ( ( var = = var ) & & func ( var , call_func ( ) , call_func ( ) ) > nums ) 
 { var = nums ; call_func ( call_func ( ) + nums , call_func ( ) ) ; } 
 if ( ( var = = var ) & & func ( var , call_func ( ) + nums , nums ) > nums & & call_func ( var , var , var ) = = nums ) 
 { var = nums ; call_func ( nums , call_func ( ) + nums ) ; } 
 if ( ( var = = var ) & & var = = nums ) 
 { var = nums ; call_func ( nums , call_func ( ) + nums ) ; } 
 if ( var = = var & & var = = nums ) 
 { 
 var [ call_func ( var ) ] . var = call_func ( ) ; 
 var [ call_func ( var ) ] . var = call_func ( ) ; 
 var [ call_func ( var ) ] . var = call_func ( var , var [ call_func ( var ) ] . var , var [ call_func ( var ) ] . var ) ; 
 if ( var [ call_func ( var ) ] . var = = - nums ) var [ call_func ( var ) ] . var = nums ; 
 var - - ; 
 } 
 if ( var = = var & & ( var ! = nums | | var ! = nums ) ) 
 { 
 var [ call_func ( var ) ] . var = call_func ( ) ; 
 var [ call_func ( var ) ] . var = call_func ( ) ; 
 var [ call_func ( var ) ] . var = call_func ( var , var [ call_func ( var ) ] . var , var [ call_func ( var ) ] . var ) ; 
 var + + ; 
 } 
 call_func ( var , call_func ( ) , call_func ( ) ) ; 
 } 
 void func ( struct_name * var , data_type var , data_type var ) 
 { 
 int var ; 
 call_func ( var ) ; 
 for ( var = nums ; var < call_func ( var ) ; var + + ) 
 { 
 call_func ( var [ var ] . var , var [ var ] . var ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 if ( var [ var ] . var ! = nums & & var [ var ] . var ! = - nums ) 
 call_func ( words , var [ var ] . var ) ; 
 if ( var [ var ] . var = = nums | | var [ var ] . var = = - nums ) 
 call_func ( words ) ; 
 } 
 call_func ( var , var ) ; 
 } 
 void func ( data_type var , data_type var ) 
 { 
 int var ; 
 if ( var % nums = = nums ) 
 { 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 call_func ( nums , nums + var ) ; 
 call_func ( ) ; 
 } 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 call_func ( nums , nums + var ) ; 
 call_func ( words , nums ) ; 
 call_func ( nums , nums + var ) ; 
 call_func ( words , nums ) ; 
 } 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 call_func ( nums + var , nums ) ; 
 call_func ( words , nums ) ; 
 call_func ( nums + var , nums ) ; 
 call_func ( words , nums ) ; 
 } 
 call_func ( nums ) ; 
 call_func ( nums , nums ) ; call_func ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 call_func ( nums , nums + var ) ; 
 call_func ( words ) ; 
 } 
 
 call_func ( nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words ) ; 
 call_func ( nums , nums ) ; call_func ( words ) ; 
 call_func ( nums , nums ) ; call_func ( words ) ; 
 call_func ( nums , nums ) ; call_func ( words ) ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 call_func ( nums + var , nums ) ; 
 call_func ( words , nums ) ; 
 } 
 call_func ( nums , nums ) ; call_func ( words ) ; 
 call_func ( nums ) ; call_func ( nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 switch ( var % nums ) 
 { 
 case nums : call_func ( nums , nums ) ; call_func ( words ) ; break ; 
 case nums : call_func ( nums , nums ) ; call_func ( words ) ; break ; 
 case nums : call_func ( nums , nums ) ; call_func ( words ) ; break ; 
 case nums : call_func ( nums , nums ) ; call_func ( words ) ; break ; 
 case nums : call_func ( nums , nums ) ; call_func ( words ) ; break ; 
 } 
 } 
 
 if ( var % nums = = nums ) 
 { 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 call_func ( nums , nums + var ) ; 
 call_func ( ) ; 
 } 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 call_func ( nums , nums + var ) ; 
 call_func ( words , nums ) ; 
 call_func ( nums , nums + var ) ; 
 call_func ( words , nums ) ; 
 } 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 call_func ( nums + var , nums ) ; 
 call_func ( words , nums ) ; 
 call_func ( nums + var , nums ) ; 
 call_func ( words , nums ) ; 
 } 
 call_func ( nums ) ; 
 call_func ( nums , nums ) ; call_func ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 call_func ( nums , nums + var ) ; 
 call_func ( words ) ; 
 } 
 call_func ( nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words ) ; 
 call_func ( nums , nums ) ; call_func ( words ) ; 
 call_func ( nums , nums ) ; call_func ( words ) ; 
 call_func ( nums , nums ) ; call_func ( words ) ; 
 call_func ( nums ) ; call_func ( nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 switch ( var % nums ) 
 { 
 case nums : call_func ( nums , nums ) ; call_func ( words ) ; break ; 
 case nums : call_func ( nums , nums ) ; call_func ( words ) ; break ; 
 case nums : call_func ( nums , nums ) ; call_func ( words ) ; break ; 
 case nums : call_func ( nums , nums ) ; call_func ( words ) ; break ; 
 } 
 } 
 
 if ( var % nums = = nums ) 
 { 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 call_func ( nums , nums + var ) ; 
 call_func ( ) ; 
 } 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 call_func ( nums , nums + var ) ; 
 call_func ( words , nums ) ; 
 call_func ( nums , nums + var ) ; 
 call_func ( words , nums ) ; 
 } 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 call_func ( nums + var , nums ) ; 
 call_func ( words , nums ) ; 
 call_func ( nums + var , nums ) ; 
 call_func ( words , nums ) ; 
 } 
 call_func ( nums ) ; 
 call_func ( nums , nums ) ; call_func ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 call_func ( nums , nums + var ) ; 
 call_func ( words ) ; 
 } 
 call_func ( nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words , nums ) ; 
 call_func ( nums , nums ) ; call_func ( words ) ; 
 call_func ( nums , nums ) ; call_func ( words ) ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 call_func ( nums + var , nums ) ; 
 call_func ( words , nums ) ; 
 } 
 call_func ( nums ) ; call_func ( nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 switch ( var % nums ) 
 { 
 case nums : call_func ( nums , nums ) ; call_func ( words ) ; break ; 
 case nums : call_func ( nums , nums ) ; call_func ( words ) ; break ; 
 } 
 } 
 } 
 int func ( struct_name * var , data_type var ) 
 { 
 int var , var , var , var , var , var = nums , var , var ; 
 var = call_func ( ) ; var = call_func ( ) ; 
 if ( var = = var ) { call_func ( nums , var ) ; var = nums ; } 
 if ( var = = var ) { call_func ( nums , var ) ; var = nums ; } 
 if ( var = = var ) { call_func ( nums , var ) ; var = nums ; } 
 if ( var = = var | | var = = var | | var = = var ) 
 { 
 while ( ( var = func ( nums ) ) ! = var ) 
 { 
 if ( var = = nums ) var = nums ; 
 if ( var = = nums ) var = nums ; 
 if ( var = = var ) call_func ( var , - - var ) ; 
 if ( var = = var ) call_func ( var , + + var ) ; 
 if ( var = = var ) 
 { 
 var = nums ; 
 call_func ( ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 call_func ( ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( var ) ; 
 call_func ( - - var , var ) ; 
 } 
 if ( var = = var ) 
 { 
 var = nums ; 
 call_func ( ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 call_func ( ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( var ) ; 
 call_func ( + + var , var ) ; 
 } 
 if ( var = = var ) 
 { 
 if ( var % nums = = nums ) var = nums ; 
 if ( var % nums = = nums ) var = nums ; 
 if ( var % nums = = nums ) var = nums ; 
 var = ( var % nums ) * nums + var % var ; 
 call_func ( ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 call_func ( ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( var ) ; 
 call_func ( var , var ) ; 
 if ( var = = nums ) return nums ; 
 if ( var = = nums ) return nums ; 
 if ( var = = nums ) return nums ; 
 if ( var = = nums ) return nums ; 
 if ( var = = nums ) call_func ( nums ) ; 
 if ( var = = nums ) return var ; 
 if ( var = = nums ) return var ; 
 if ( var = = nums ) return var ; 
 if ( var = = nums ) return var ; 
 if ( var = = nums ) return nums ; 
 if ( var = = nums ) return nums ; 
 } 
 call_func ( var + nums , var + nums ) ; 
 } 
 
 call_func ( ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 call_func ( ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( var ) ; 
 call_func ( var , var ) ; 
 } 
 return var ; 
 } 
 void func ( struct_name * var ) 
 { 
 FILE * var ; 
 struct_name * struct_var ; 
 struct_name * struct_var ; 
 int var = nums , var , var ; 
 char var [ nums ] ; 
 var = var ; 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( ) ; 
 return ; 
 } 
 do { 
 var = var - > var ; 
 while ( var ! = NULL ) 
 { if ( ( int ) var - > var = = nums ) 
 { 
 call_func ( words , var ) ; var = var - > var ; var + + ; 
 } 
 else 
 { call_func ( var - > var , var ) ; 
 var = var - > var ; 
 var + + ; } 
 } 
 var = var - > var ; 
 } while ( var ! = NULL ) ; 
 fclose ( var ) ; 
 return ; 
 } 
 void func ( struct_name * var ) 
 { 
 FILE * var ; 
 struct_name * struct_var ; 
 struct_name * struct_var ; 
 int var = nums , var , var ; 
 char var [ nums ] ; 
 var = var ; 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( ) ; 
 return ; 
 } 
 do { 
 var = var - > var ; 
 while ( var ! = NULL ) 
 { if ( ( int ) var - > var = = nums ) 
 { 
 call_func ( words , var ) ; var = var - > var ; var + + ; 
 } 
 else 
 { call_func ( var - > var , var ) ; 
 var = var - > var ; 
 var + + ; } 
 } 
 var = var - > var ; 
 } while ( var ! = NULL ) ; 
 fclose ( var ) ; 
 return ; 
 } 
 void func ( struct_name * var ) 
 { 
 FILE * var ; 
 struct_name * struct_var , * var ; 
 struct_name * struct_var , * var , * var ; 
 char var ; 
 int var = nums , var = nums ; 
 char var [ nums ] ; 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 } 
 var = var ; 
 while ( ! feof ( var ) ) 
 { var = nums ; var = nums ; 
 var = ( ) malloc ( sizeof ( ) ) ; 
 var = ( ) malloc ( sizeof ( ) ) ; 
 while ( ( var = func ( var ) ) ! = nums & & var <= nums & & ! feof ( var ) ) 
 { var = ( ) malloc ( sizeof ( ) ) ; 
 if ( var = = nums ) { var = var ; var = nums ; } 
 var - > var = var ; var - > var = NULL ; 
 var - > var = var ; var = var ; 
 var + + ; 
 } 
 if ( var = = nums ) { 
 var = ( ) malloc ( sizeof ( ) ) ; var - > var = nums ; var - > var = NULL ; 
 var - > var = var ; var = var ; 
 } 
 if ( ! feof ( var ) ) 
 { var - > var = var ; var - > var = NULL ; 
 var - > var = var ; var = var ; } 
 } 
 fclose ( var ) ; 
 var = var - > var ; 
 return ; 
 } 
 void func ( ) 
 { 
 char var ; 
 int var , var , var , var , var = nums , var ; 
 struct_name * struct_var , * var ; 
 struct_name * struct_var , * var ; 
 var = ( ) malloc ( sizeof ( ) ) ; 
 var = var ; var - > var = NULL ; 
 var = var = var - > var = ( ) malloc ( sizeof ( ) ) ; 
 var - > var = nums ; var - > var = NULL ; 
 call_func ( ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 call_func ( ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 while ( nums ) 
 { 
 while ( call_func ( nums ) = = nums ) continue ; 
 var = var = call_func ( nums ) ; 
 if ( var >= nums & & var < nums ) 
 { 
 if ( func ( var , call_func ( ) , call_func ( ) ) <= nums ) 
 { 
 var + + ; 
 var - > var = var ; 
 call_func ( var ) ; 
 if ( var = = nums ) 
 { 
 var - > var = NULL ; 
 var - > var = ( ) malloc ( sizeof ( ) ) ; 
 var = var - > var ; var - > var = NULL ; var - > var = NULL ; 
 var = var = var - > var = ( ) malloc ( sizeof ( ) ) ; 
 var - > var = nums ; var - > var = NULL ; 
 var = nums ; 
 } 
 else 
 { 
 var - > var = ( ) malloc ( sizeof ( ) ) ; 
 var = var - > var ; 
 var - > var = nums ; 
 var - > var = NULL ; 
 } 
 } 
 else 
 { 
 var = call_func ( ) ; var = call_func ( ) ; 
 call_func ( var , call_func ( ) , call_func ( ) , var ) ; 
 var + + ; 
 call_func ( var ) ; 
 call_func ( var , var ) ; 
 } 
 } 
 
 if ( var = = nums ) 
 { 
 call_func ( nums , call_func ( ) + nums ) ; 
 var - > var = ( ) malloc ( sizeof ( ) ) ; 
 var = var - > var ; var - > var = NULL ; var - > var = NULL ; 
 var = var = var - > var = ( ) malloc ( sizeof ( ) ) ; 
 var - > var = nums ; var - > var = NULL ; 
 var = nums ; 
 } 
 var = call_func ( ) ; var = call_func ( ) ; 
 
 if ( ( var = = var ) & & ( var ! = nums ) ) call_func ( call_func ( ) - nums , call_func ( ) ) ; 
 
 if ( ( var = = var ) & & ( var = = nums ) ) call_func ( call_func ( call_func ( var , call_func ( ) - nums ) ) , call_func ( ) - nums ) ; 
 
 if ( ( var = = var ) & & call_func ( var , call_func ( ) , call_func ( ) ) > nums ) call_func ( call_func ( ) + nums , call_func ( ) ) ; 
 
 if ( ( var = = var ) & & call_func ( var , call_func ( ) + nums , nums ) ! = nums & & call_func ( var , var , var ) <= nums ) call_func ( nums , call_func ( ) + nums ) ; 
 
 if ( ( var = = var ) & & var = = nums ) call_func ( nums , call_func ( ) + nums ) ; 
 
 if ( ( var = = var ) & & call_func ( var , call_func ( ) - nums , call_func ( ) ) ! = nums ) call_func ( call_func ( ) , call_func ( ) - nums ) ; 
 
 if ( ( var = = var ) & & func ( var , call_func ( ) - nums , call_func ( ) ) <= nums ) 
 { 
 if ( call_func ( var , call_func ( ) - nums ) = = nums ) 
 call_func ( - call_func ( var , call_func ( ) - nums ) + nums , call_func ( ) - nums ) ; 
 else 
 call_func ( - call_func ( var , call_func ( ) - nums ) , call_func ( ) - nums ) ; 
 } 
 
 if ( ( var = = var ) & & call_func ( var , call_func ( ) + nums , call_func ( ) ) ! = nums ) 
 call_func ( call_func ( ) , call_func ( ) + nums ) ; 
 
 if ( var = = var ) 
 { 
 var = call_func ( var , call_func ( ) , call_func ( ) - nums ) ; 
 var = call_func ( ) - nums ; var = call_func ( ) ; 
 call_func ( var ) ; 
 if ( var = = nums ) 
 { 
 if ( var ! = nums ) call_func ( var , var ) ; 
 else call_func ( var + nums , var ) ; 
 } 
 if ( var = = nums ) 
 { 
 call_func ( var + nums , var ) ; 
 var = nums ; 
 } 
 } 
 
 if ( ( var = = var ) | | ( var = = var ) | | ( var = = var ) | | ( var < nums | | var > nums ) ) 
 { var = call_func ( var , var ) ; 
 if ( var = = nums ) { call_func ( ) ; } 
 if ( var = = nums ) { 
 var = ( ) malloc ( sizeof ( ) ) ; 
 call_func ( var ) ; 
 call_func ( ) ; call_func ( ) ; call_func ( nums , nums ) ; call_func ( var ) ; 
 } 
 
 if ( var = = nums ) { call_func ( var ) ; call_func ( ) ; call_func ( words ) ; getch ( ) ; call_func ( nums , nums ) ; call_func ( var ) ; } 
 
 if ( var = = nums ) { call_func ( var ) ; call_func ( ) ; call_func ( words ) ; getch ( ) ; call_func ( nums , nums ) ; call_func ( var ) ; } 
 
 if ( var = = nums ) { call_func ( ) ; call_func ( words ) ; 
 getch ( ) ; call_func ( nums , nums ) ; call_func ( var ) ; } 
 if ( var = = nums ) { call_func ( ) ; call_func ( words ) ; getch ( ) ; call_func ( nums , nums ) ; call_func ( var ) ; } 
 } 
 
 if ( var = = var ) 
 { 
 var = call_func ( ) ; var = call_func ( ) ; 
 call_func ( var , call_func ( ) , call_func ( ) ) ; 
 call_func ( var ) ; 
 call_func ( var , var ) ; 
 } 
 
 if ( var = = var & & var ! = nums ) 
 { 
 if ( var > nums ) 
 var = call_func ( ) , var = call_func ( ) ; 
 else 
 var = var [ nums ] . var , var = var [ nums ] . var ; 
 for ( var = nums ; var < call_func ( var ) ; var + + ) 
 { 
 if ( var > nums ) 
 call_func ( var , var [ var ] . var , var [ var ] . var ) ; 
 if ( var < nums ) 
 call_func ( var , var [ call_func ( var ) - nums - var ] . var , var [ call_func ( var ) - nums - var ] . var ) ; 
 } 
 var = nums ; 
 call_func ( var ) ; 
 call_func ( var , var ) ; 
 } 
 
 if ( var = = var & & var ! = nums ) 
 { 
 if ( var > nums ) 
 var = call_func ( ) , var = call_func ( ) ; 
 else 
 var = var [ nums ] . var , var = var [ var ] . var ; 
 for ( var = nums ; var < call_func ( var ) ; var + + ) 
 { 
 if ( var > nums ) 
 call_func ( var , var [ var ] . var , var [ var ] . var ) ; 
 if ( var < nums ) 
 call_func ( var , var [ call_func ( var ) - nums - var ] . var , var [ call_func ( var ) - nums - var ] . var ) ; 
 } 
 var = var ; 
 var = nums ; 
 call_func ( var ) ; 
 call_func ( var , var ) ; 
 } 
 
 if ( var = = var & & var ! = nums ) 
 { 
 var = call_func ( ) ; var = call_func ( ) ; 
 var = var ; var = nums ; 
 call_func ( var ) ; 
 call_func ( var , var ) ; 
 } 
 
 if ( var = = var & & var ! = nums ) 
 { 
 var = call_func ( ) ; var = call_func ( ) ; 
 if ( var < nums ) 
 for ( var = nums ; var < call_func ( var ) ; var + + ) 
 call_func ( var , var , var + var , var [ var ] . var ) ; 
 if ( var > nums ) 
 for ( var = nums ; var < var ; var + + ) 
 call_func ( var , var , var + var , var [ var - nums - var ] . var ) ; 
 call_func ( var ) ; 
 call_func ( var , var ) ; 
 } 
 
 if ( var = = var ) 
 { 
 call_func ( var ) ; 
 call_func ( var ) ; 
 call_func ( var , var ) ; 
 } 
 
 if ( var = = var | | var = = var ) call_func ( var , var ) ; 
 
 var = call_func ( ) ; var = call_func ( ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words , var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words , var ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( var , var ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 } 
 } 
 #define var words 
 #define var words 
 #define var words 
 #define var words 
 #define var var - > var . var , var - > var . var , var - > var . var , var - > var . var , var - > var . var , var - > var . var , var - > var . var 
 int var = nums ; 
 struct 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 int var ; 
 } ; 
 struct 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 } ; 
 typedef struct 
 { 
 struct struct_name struct_var ; 
 struct struct_name * struct_var ; 
 } , * ; 
 typedef struct 
 { 
 struct struct_name struct_var ; 
 struct struct_name * struct_var ; 
 } , * var ; 
 void func ( ) 
 { 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 } 
 void func ( var var ) 
 { 
 struct struct_name * struct_var , * var , * ; 
 char var [ nums ] ; 
 var = var ; 
 = var - > var ; 
 while ( var - > var ! = NULL ) 
 var = var - > var ; 
 while ( nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums ) 
 break ; 
 
 while ( ) 
 { 
 if ( strcmp ( - > var . var , var ) = = nums ) 
 { 
 printf ( words % words , var ) ; 
 return ; 
 } 
 = - > var ; 
 } 
 var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 call_func ( var - > var . var , var ) ; 
 printf ( words ) ; 
 scanf ( words , var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 var = nums ; 
 } 
 } 
 void func ( ) 
 { 
 printf ( var ) ; 
 printf ( var ) ; 
 printf ( var ) ; 
 } 
 void func ( struct_name * var ) 
 { 
 struct_name * struct_var ; 
 var = var ; 
 printf ( var , var ) ; 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var [ nums ] , * var ; 
 int var , var , var = nums ; 
 char var [ nums ] , var [ nums ] ; 
 if ( ! var - > var ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = var - > var ; 
 while ( var ! = NULL ) 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 { 
 [ var ] = var ; 
 var + + ; 
 break ; 
 } 
 else 
 var = var - > var ; 
 } 
 else if ( var = = nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = var - > var ; 
 while ( var ! = NULL ) 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 { 
 [ var ] = var ; 
 var + + ; 
 var = var - > var ; 
 } 
 else 
 var = var - > var ; 
 } 
 if ( var = = nums ) 
 printf ( words ) ; 
 else 
 { 
 call_func ( ) ; 
 for ( var = nums ; var < var ; var + + ) 
 call_func ( struct_name [ var ] ) ; 
 } 
 } 
 void func ( var var , var var ) 
 { 
 struct_name * struct_var [ nums ] , * var ; 
 char var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] ; 
 struct_name * struct_var , * var ; 
 int var = nums , var = nums , var = nums , var ; 
 var = var ; 
 while ( var - > var ! = NULL ) 
 var = var - > var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var - > var ; 
 while ( var ! = NULL ) 
 { 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 { 
 var [ var ] = var ; 
 var + + ; 
 } 
 var = var - > var ; 
 } 
 printf ( words , var ) ; 
 call_func ( ) ; 
 for ( var = nums ; var < var ; var + + ) 
 call_func ( var [ var ] ) ; 
 if ( var = = nums ) 
 printf ( words var var for var ! words 
 else 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 var = ( ) malloc ( sizeof ( ) ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var - > var . var , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var - > var . var , var ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( strcmp ( var [ var ] - > var . var , var ) = = nums ) 
 { 
 if ( var [ var ] - > var . var < nums ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 return ; 
 } 
 printf ( words , var [ var ] - > var . var ) ; 
 var = nums ; 
 break ; 
 } 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 return ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var [ var ] - > var . var = var [ var ] - > var . var - var ; 
 var - > var . var = var ; 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 printf ( words ) ; 
 getch ( ) ; 
 var = nums ; 
 } 
 } 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var ; 
 char var [ nums ] , var ; 
 var = var - > var ; 
 if ( ! var ) 
 { 
 printf ( words for var var var ! words 
 return ; 
 } 
 else 
 { 
 printf ( words ) ; 
 call_func ( ) ; 
 scanf ( words , & var ) ; 
 if ( var = = words | | var = = words ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 while ( var ! = NULL ) 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 break ; 
 else 
 var = var - > var ; 
 if ( var ) 
 { 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 var = nums ; 
 } 
 else 
 printf ( words var var ! words 
 } 
 } 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var ; 
 var = var - > var ; 
 call_func ( ) ; 
 if ( var - > var = = NULL ) 
 printf ( words ) ; 
 else 
 while ( var ! = NULL ) 
 { 
 call_func ( var ) ; 
 var = var - > var ; 
 } 
 } 
 void func ( var var ) 
 { 
 FILE * var ; 
 struct_name * struct_var ; 
 int var = nums , var = nums ; 
 var = fopen ( words , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words var var ! words 
 return ; 
 } 
 var = var - > var ; 
 while ( var ) 
 { 
 if ( fwrite ( var , sizeof ( ) , nums , var ) = = nums ) 
 { 
 var = var - > var ; 
 var + + ; 
 } 
 else 
 { 
 var = nums ; 
 break ; 
 } 
 } 
 if ( var ) 
 { 
 printf ( words , var ) ; 
 var = nums ; 
 } 
 fclose ( var ) ; 
 } 
 void func ( var var ) 
 { 
 FILE * var ; 
 struct_name * struct_var ; 
 int var = nums , var = nums ; 
 var = fopen ( words , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words var var ! words 
 return ; 
 } 
 var = var - > var ; 
 while ( var ) 
 { 
 if ( fwrite ( var , sizeof ( ) , nums , var ) = = nums ) 
 { 
 var = var - > var ; 
 var + + ; 
 } 
 else 
 { 
 var = nums ; 
 break ; 
 } 
 } 
 if ( var ) 
 { 
 printf ( words , var ) ; 
 var = nums ; 
 } 
 fclose ( var ) ; 
 } 
 func ( ) 
 { 
 FILE * var , * var ; 
 struct_name * struct_var , * var ; 
 char var , var ; 
 struct_name struct_var ; 
 var var ; 
 struct_name * struct_var , * var ; 
 int var ; 
 var = ( ) malloc ( sizeof ( ) ) ; 
 var - > var = NULL ; 
 var = var ; 
 var = ( ) malloc ( sizeof ( ) ) ; 
 var - > var = NULL ; 
 var = var ; 
 var = fopen ( words , words ) ; 
 if ( ( var = = NULL ) ) 
 { 
 printf ( words var var var ! words 
 return nums ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( fread ( var , sizeof ( ) , nums , var ) = = nums ) 
 { 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 
 } 
 } 
 fclose ( var ) ; 
 var = fopen ( words , words ) ; 
 if ( ( var = = NULL ) ) 
 { 
 printf ( words var var var ! words 
 return nums ; 
 } 
 
 while ( ! feof ( var ) ) 
 { 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( fread ( var , sizeof ( ) , nums , var ) = = nums ) 
 { 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 
 } 
 } 
 fclose ( var ) ; 
 while ( nums ) 
 { 
 call_func ( ) ; 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 if ( var = = nums ) 
 { 
 if ( var = = nums ) 
 { 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = words | | var = = words ) 
 { 
 call_func ( var ) ; 
 call_func ( var ) ; 
 } 
 } 
 printf ( words ) ; 
 break ; 
 } 
 switch ( var ) 
 { 
 case nums : 
 call_func ( var ) ; break ; 
 case nums : 
 call_func ( var ) ; break ; 
 case nums : 
 call_func ( var , var ) ; break ; 
 case nums : 
 call_func ( var ) ; break ; 
 case nums : 
 call_func ( var ) ; break ; 
 case nums : 
 call_func ( var ) ; call_func ( var ) ; break ; 
 case nums : 
 return nums ; 
 } 
 printf ( words ) ; 
 getch ( ) ; 
 } 
 } 
 #define var words 
 #define var words 
 #define var words 
 #define var words 
 #define var var - > var . var , var - > var . var , var - > var . var , var - > var . var , var - > var . var , var - > var . var , var - > var . var , var - > var . var 
 #define var words 
 int var = nums ; 
 typedef struct 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 int var ; 
 int var ; 
 int var ; 
 float var ; 
 int var ; 
 } ; 
 typedef struct 
 { 
 struct struct_name struct_var ; 
 struct struct_name * struct_var ; 
 } , * ; 
 void func ( ) 
 { 
 system ( words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words var var var words 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 } 
 void func ( ) 
 { 
 printf ( var ) ; 
 printf ( var ) ; 
 printf ( var ) ; 
 } 
 void func ( struct_name * var ) 
 { 
 struct_name * struct_var ; 
 var = var ; 
 printf ( var , var ) ; 
 } 
 void func ( ) 
 { 
 printf ( words ) ; 
 call_func ( ) ; 
 } 
 void func ( ) 
 { 
 printf ( words ) ; 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var ; 
 var = var - > var ; 
 if ( ! var ) 
 { 
 printf ( words ) ; 
 call_func ( ) ; 
 return ; 
 } 
 printf ( words ) ; 
 call_func ( ) ; 
 while ( var ) 
 { 
 call_func ( var ) ; 
 var = var - > var ; 
 printf ( var ) ; 
 } 
 call_func ( ) ; 
 } 
 struct_name * struct_var ( struct_name struct_var , char var [ ] , char var [ ] ) 
 { 
 struct_name * struct_var ; 
 if ( strcmp ( var , words ) = = nums ) 
 { 
 var = var - > var ; 
 while ( var ) 
 { 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 return var ; 
 var = var - > var ; 
 } 
 } 
 else if ( strcmp ( var , words ) = = nums ) 
 { 
 var = var - > var ; 
 while ( var ) 
 { 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 return var ; 
 var = var - > var ; 
 } 
 } 
 return nums ; 
 } 
 void func ( data_type * var , data_type var , data_type * var ) 
 { 
 char var [ nums ] ; 
 do { 
 printf ( var ) ; 
 scanf ( words , var ) ; 
 if ( call_func ( var ) > var ) printf ( words ) ; 
 } while ( call_func ( var ) > var ) ; 
 call_func ( var , var ) ; 
 } 
 int func ( data_type * var ) 
 { 
 int var = nums ; 
 do { 
 printf ( var ) ; 
 scanf ( words , & var ) ; 
 if ( var > nums | | var < nums ) printf ( words ) ; 
 } while ( var > nums | | var < nums ) ; 
 return var ; 
 } 
 
 void func ( var var ) 
 { 
 struct_name * struct_var , * var , * ; 
 char var , var = nums , var [ nums ] ; 
 var = var ; 
 = var - > var ; 
 system ( words ) ; 
 call_func ( var ) ; 
 while ( var - > var ! = NULL ) 
 var = var - > var ; 
 while ( nums ) 
 { 
 while ( nums ) 
 { 
 call_func ( var , nums , words ) ; 
 var = nums ; 
 if ( strcmp ( var , words ) = = nums ) 
 { return ; } 
 = var - > var ; 
 while ( ) 
 { 
 if ( strcmp ( - > var . var , var ) = = nums ) 
 { 
 var = nums ; 
 break ; 
 } 
 = - > var ; 
 } 
 if ( var = = nums ) 
 { call_func ( ) ; 
 printf ( words , var ) ; 
 scanf ( words , & var ) ; 
 if ( var = = words | | var = = words ) 
 continue ; 
 else 
 return ; 
 } 
 else 
 { break ; } 
 } 
 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( ! var ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 call_func ( var - > var . var , var ) ; 
 call_func ( var - > var . var , nums , words ) ; 
 var - > var . var = call_func ( words ) ; 
 var - > var . var = call_func ( words ) ; 
 var - > var . var = call_func ( words ) ; 
 var - > var . var = var - > var . var + var - > var . var + var - > var . var ; 
 var - > var . var = ( float ) ( var - > var . var / nums ) ; 
 var - > var . var = nums ; 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 var = nums ; 
 } 
 return ; 
 } 
 void func ( var var ) 
 { 
 int var ; 
 char var [ nums ] ; 
 struct_name * struct_var ; 
 if ( ! var - > var ) 
 { 
 system ( words ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 return ; 
 } 
 system ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 { 
 call_func ( var , nums , words ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 call_func ( ) ; 
 call_func ( var ) ; 
 printf ( var ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 } 
 else 
 call_func ( ) ; 
 call_func ( ) ; 
 } 
 else if ( var = = nums ) 
 { 
 call_func ( var , nums , words ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 call_func ( ) ; 
 call_func ( var ) ; 
 printf ( var ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 } 
 else 
 call_func ( ) ; 
 call_func ( ) ; 
 } 
 else 
 call_func ( ) ; 
 call_func ( ) ; 
 
 } 
 void func ( var var ) 
 { 
 int var ; 
 struct_name * struct_var , * var ; 
 char var [ nums ] ; 
 if ( ! var - > var ) 
 { system ( words ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 return ; 
 } 
 system ( words ) ; 
 call_func ( var ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 { 
 call_func ( var , nums , words ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 var = var ; 
 while ( var - > var ! = var ) 
 var = var - > var ; 
 var - > var = var - > var ; 
 free ( var ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 var = nums ; 
 } 
 else 
 call_func ( ) ; 
 call_func ( ) ; 
 } 
 else if ( var = = nums ) 
 { 
 call_func ( var , nums , words ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 var = var ; 
 while ( var - > var ! = var ) 
 var = var - > var ; 
 var - > var = var - > var ; 
 free ( var ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 var = nums ; 
 } 
 else 
 call_func ( ) ; 
 call_func ( ) ; 
 } 
 else 
 call_func ( ) ; 
 call_func ( ) ; 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var ; 
 char var [ nums ] ; 
 if ( ! var - > var ) 
 { system ( words ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 return ; 
 } 
 system ( words ) ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 call_func ( var , nums , words ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 printf ( words , var - > var . var ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( var - > var . var , nums , words ) ; 
 printf ( words , var - > var . var ) ; 
 var - > var . var = call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 var - > var . var = call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 var - > var . var = call_func ( words ) ; 
 var - > var . var = var - > var . var + var - > var . var + var - > var . var ; 
 var - > var . var = ( float ) ( var - > var . var / nums ) ; 
 var - > var . var = nums ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 var = nums ; 
 } 
 else 
 call_func ( ) ; 
 call_func ( ) ; 
 } 
 void func ( var var ) 
 { 
 struct_name struct_var , var , var ; 
 char var , var [ nums ] , [ nums ] ; 
 int var = nums ; 
 var = var - > var ; 
 system ( words ) ; 
 call_func ( var ) ; 
 while ( nums ) 
 { call_func ( struct_name , nums , words ) ; 
 var = nums ; var = var - > var ; 
 while ( var ) 
 { 
 if ( strcmp ( var - > var . var , ) = = nums ) { var = nums ; break ; } 
 var = var - > var ; 
 } 
 if ( var = = nums ) 
 break ; 
 else 
 { call_func ( ) ; 
 printf ( words , ) ; 
 scanf ( words , & var ) ; 
 if ( var = = words | | var = = words ) 
 { continue ; } 
 else 
 { return ; } 
 } 
 } 
 
 call_func ( var , nums , words ) ; 
 var = var - > var ; 
 while ( var ) 
 { 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 { 
 printf ( words % words , var ) ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 return ; 
 } 
 var = var - > var ; 
 } 
 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( ! var ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 call_func ( var - > var . var , var ) ; 
 call_func ( var - > var . var , nums , words ) ; 
 var - > var . var = call_func ( words ) ; 
 var - > var . var = call_func ( words ) ; 
 var - > var . var = call_func ( words ) ; 
 var - > var . var = var - > var . var + var - > var . var + var - > var . var ; 
 var - > var . var = ( float ) ( var - > var . var / nums ) ; 
 var - > var . var = nums ; 
 var - > var = NULL ; 
 var = nums ; 
 
 var = var - > var ; 
 while ( nums ) 
 { 
 if ( strcmp ( var - > var . var , ) = = nums ) 
 { 
 var - > var = var - > var ; 
 var - > var = var ; 
 break ; 
 } 
 var = var - > var ; 
 } 
 call_func ( var ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var , * var , * var , * var ; 
 struct_name * struct_var = var - > var ; 
 int var = nums , var = nums , var = nums ; 
 if ( ! var ) 
 { system ( words ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 return ; 
 } 
 system ( words ) ; 
 call_func ( var ) ; 
 var = var = var = var = var ; 
 while ( var ) 
 { 
 if ( var - > var . var < nums ) var + + ; 
 if ( var - > var . var < nums ) var + + ; 
 if ( var - > var . var < nums ) var + + ; 
 if ( var - > var . var >= var - > var . var ) var = var ; 
 if ( var - > var . var >= var - > var . var ) var = var ; 
 if ( var - > var . var >= var - > var . var ) var = var ; 
 if ( var - > var . var >= var - > var . var ) var = var ; 
 var = var - > var ; 
 } 
 printf ( words ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 printf ( words , var - > var . var , var - > var . var ) ; 
 printf ( words , var - > var . var , var - > var . var ) ; 
 printf ( words , var - > var . var , var - > var . var ) ; 
 printf ( words , var - > var . var , var - > var . var ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 } 
 void func ( var var ) 
 { 
 struct_name struct_var ; 
 struct_name * struct_var , * var , * ; 
 int var = nums ; 
 if ( var - > var = = NULL ) 
 { system ( words ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 return ; 
 } 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( ! var ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 var - > var = NULL ; 
 system ( words ) ; 
 call_func ( var ) ; 
 var = var - > var ; 
 while ( var ) 
 { 
 = ( ) malloc ( sizeof ( ) ) ; 
 if ( ! ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 - > var = var - > var ; 
 - > var = NULL ; 
 var = var ; 
 
 while ( var - > var ! = NULL & & var - > var - > var . var >= var - > var . var ) 
 { var = var - > var ; } 
 if ( var - > var = = NULL ) 
 var - > var = ; 
 else 
 { 
 - > var = var - > var ; 
 var - > var = ; 
 } 
 var = var - > var ; 
 } 
 var - > var = var - > var ; 
 var = var - > var ; 
 while ( var ! = NULL ) 
 { 
 var + + ; 
 var - > var . var = var ; 
 var = var - > var ; 
 } 
 call_func ( var ) ; 
 var = nums ; 
 printf ( words ) ; 
 } 
 void func ( var var ) 
 { 
 FILE * var ; 
 struct_name * struct_var ; 
 int var = nums ; 
 var = fopen ( words , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( ) ; 
 return ; 
 } 
 var = var - > var ; 
 while ( var ) 
 { 
 if ( fwrite ( var , sizeof ( ) , nums , var ) = = nums ) 
 { 
 var = var - > var ; 
 var + + ; 
 } 
 else 
 { 
 break ; 
 } 
 } 
 if ( var > nums ) 
 { 
 call_func ( ) ; 
 printf ( words struct_name struct_var var : % words 
 call_func ( ) ; 
 var = nums ; 
 } 
 else 
 { system ( words ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 } 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 struct_name struct_var ; 
 FILE * var ; 
 int var ; 
 char var ; 
 int var = nums ; 
 struct_name * struct_var , * var ; 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( ! var ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 var - > var = NULL ; 
 var = var ; 
 var = fopen ( words , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( ! var ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 if ( fread ( var , sizeof ( ) , nums , var ) = = nums ) 
 { 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 var + + ; 
 } 
 } 
 fclose ( var ) ; 
 printf ( words , var ) ; 
 call_func ( ) ; 
 while ( nums ) 
 { 
 system ( words ) ; 
 call_func ( ) ; 
 var = var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 { 
 if ( var = = nums ) 
 { call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = words | | var = = words ) 
 call_func ( var ) ; 
 } 
 printf ( words ) ; 
 call_func ( ) ; 
 break ; 
 } 
 switch ( var ) 
 { 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : system ( words ) ; call_func ( var ) ; break ; 
 default : call_func ( ) ; call_func ( ) ; break ; 
 } 
 } 
 } 
 #define var words 
 #define var words 
 #define var words 
 int var ; 
 int var ; 
 int var ; 
 int var ; 
 int var ; 
 int var = nums ; 
 int var = nums ; 
 int var = nums ; 
 void func ( data_type var , data_type var , data_type var ) 
 { 
 call_func ( var , var ) ; 
 call_func ( var ) ; 
 } 
 void func ( data_type var , data_type var , data_type var , data_type var ) 
 { 
 int var ; 
 call_func ( var , var , nums ) ; 
 call_func ( var + var - nums , var , nums ) ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 { 
 call_func ( var + nums + var , var , nums ) ; 
 call_func ( var + nums + var , var + var - nums , nums ) ; 
 } 
 call_func ( var , var + var - nums , nums ) ; 
 call_func ( var + var - nums , var + var - nums , nums ) ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 { 
 call_func ( var , var + nums + var , nums ) ; 
 call_func ( var + var - nums , var + var + nums , nums ) ; 
 } 
 } 
 void func ( data_type var , data_type var , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 call_func ( var + var , var , nums ) ; 
 } 
 void func ( data_type var , data_type var , data_type var ) 
 { 
 int var ; 
 call_func ( var , var , nums ) ; 
 call_func ( var + nums , var , var - nums ) ; 
 call_func ( var + var - nums , var , nums ) ; 
 } 
 void func ( data_type var , data_type var , data_type var , data_type var , data_type var ) 
 { 
 int var , var ; 
 call_func ( var ) ; 
 call_func ( var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , var + var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 call_func ( words ) ; 
 } 
 } 
 void func ( data_type var , data_type var , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 call_func ( var , var + var , nums ) ; 
 } 
 void func ( ) 
 { 
 call_func ( nums , nums , nums , nums , nums ) ; 
 } 
 typedef struct 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 int var ; 
 } var ; 
 typedef struct 
 { 
 var var ; 
 struct struct_name * struct_var ; 
 } var , * var ; 
 void func ( var var ) 
 { 
 FILE * var ; 
 var * var ; 
 int var = nums , var = nums ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 var = var - > var ; 
 while ( var ) 
 { 
 if ( fwrite ( var , sizeof ( var ) , nums , var ) = = nums ) 
 { 
 var = var - > var ; 
 var + + ; 
 } 
 else 
 { 
 var = nums ; 
 break ; 
 } 
 } 
 if ( var ) 
 { 
 
 } 
 fclose ( var ) ; 
 } 
 
 var * func ( var var , data_type var [ ] , data_type var [ ] ) 
 { 
 var * var ; 
 if ( strcmp ( var , words ) = = nums ) 
 { 
 var = var - > var ; 
 while ( var ! = NULL ) 
 { 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 return var ; 
 var = var - > var ; 
 } 
 } 
 else if ( strcmp ( var , words ) = = nums ) 
 { 
 var = var - > var ; 
 while ( var ! = NULL ) 
 { 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 return var ; 
 var = var - > var ; 
 } 
 } 
 return nums ; 
 } 
 
 void ( var var ) 
 { 
 var * var , * var , * ; 
 char var [ nums ] ; 
 var = var ; 
 = var - > var ; 
 while ( var - > var ! = NULL ) 
 var = var - > var ; 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 while ( ) 
 { 
 if ( strcmp ( - > var . var , var ) = = nums ) 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 printf ( words % words , var ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 getch ( ) ; 
 return ; 
 } 
 = - > var ; 
 } 
 call_func ( var - > var . var , var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 scanf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 var = var - > var . var + var ; 
 var - > var . var = nums ; 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 void func ( var var ) 
 { 
 int var ; 
 char var [ nums ] ; 
 var * var ; 
 if ( ! var - > var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 } 
 else if ( var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 } 
 } 
 else 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 } 
 void func ( ) 
 { 
 int var ; 
 char var [ nums ] ; 
 var * var ; 
 var var ; 
 FILE * var ; 
 int var = nums ; 
 var * var , * var ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 var - > var = NULL ; 
 var = var ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 var = fopen ( var , words ) ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 if ( fread ( var , sizeof ( var ) , nums , var ) ) 
 { 
 var - > var = NULL ; 
 var = var + var - > var . var ; 
 var = var + var - > var . var ; 
 var - > var = var ; 
 var = var ; 
 var + + ; 
 } 
 } 
 fclose ( var ) ; 
 if ( ! var - > var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var - var - > var . var ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 } 
 else if ( var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , ( var - > var . var - var - > var . var ) ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 } 
 } 
 else 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 } 
 int func ( var var , data_type var [ ] , data_type var [ ] ) 
 { 
 char var [ nums ] ; 
 var * var ; 
 if ( ! var - > var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return nums ; 
 } 
 call_func ( var , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 call_func ( var , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 return nums ; 
 } 
 else 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return nums ; 
 } 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return nums ; 
 } 
 } 
 
 void func ( var var ) 
 { 
 int var ; 
 var * var , * var ; 
 char var [ nums ] ; 
 if ( ! var - > var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 var = var - var - > var . var ; 
 var = var ; 
 while ( var - > var ! = var ) 
 var = var - > var ; 
 var - > var = var - > var ; 
 free ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 } 
 } 
 else if ( var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 var = var ; 
 while ( var - > var ! = var ) 
 var = var - > var ; 
 var - > var = var - > var ; 
 free ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 var - - ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 } 
 } 
 else 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 } 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 
 void func ( var var ) 
 { 
 int var ; 
 var * var ; 
 char var [ nums ] ; 
 if ( ! var - > var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 call_func ( nums , nums ) ; 
 printf ( words , var - > var . var ) ; 
 scanf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var - > var . var ) ; 
 scanf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var - > var . var ) ; 
 scanf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var - > var . var ) ; 
 scanf ( words , & var ) ; 
 var = var - var - > var . var ; 
 var = var + var ; 
 var - > var . var = var ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 } 
 struct 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 } ; 
 typedef struct 
 { 
 struct struct_name struct_var ; 
 struct struct_name * struct_var ; 
 } var , * var ; 
 var * var ; 
 typedef struct 
 { 
 char var [ nums ] ; 
 char [ nums ] ; 
 char [ nums ] ; 
 char var [ nums ] ; 
 struct struct_name * struct_var ; 
 } var , * var ; 
 void func ( var var ) 
 { 
 FILE * var ; 
 var * var ; 
 int var = nums , var = nums ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( nums ) ; 
 } 
 var = var - > var ; 
 while ( var ) 
 { 
 if ( fwrite ( var , sizeof ( var ) , nums , var ) = = nums ) 
 { 
 var = var - > var ; 
 var + + ; 
 } 
 else 
 { 
 var = nums ; 
 break ; 
 } 
 } 
 if ( var ) 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var ) ; 
 } 
 fclose ( var ) ; 
 } 
 void func ( var var ) 
 { 
 FILE * var ; 
 var * var ; 
 int var = nums , var = nums ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( nums ) ; 
 } 
 var = var - > var ; 
 while ( var ) 
 { 
 if ( fwrite ( var , sizeof ( var ) , nums , var ) = = nums ) 
 { 
 var = var - > var ; 
 var + + ; 
 } 
 else 
 { 
 var = nums ; 
 break ; 
 } 
 } 
 if ( var ) 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 
 } 
 fclose ( var ) ; 
 } 
 var * func ( var var , data_type var [ ] , data_type var [ ] ) 
 { 
 var * var ; 
 if ( strcmp ( var , words ) = = nums ) 
 { 
 var = var - > var ; 
 while ( var ! = NULL ) 
 { 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 return var ; 
 var = var - > var ; 
 } 
 } 
 else if ( strcmp ( var , words ) = = nums ) 
 { 
 var = var - > var ; 
 while ( var ! = NULL ) 
 { 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 return var ; 
 var = var - > var ; 
 } 
 } 
 else if ( strcmp ( var , words ) = = nums ) 
 { 
 var = var - > var ; 
 while ( var ! = NULL ) 
 { 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 return var ; 
 var = var - > var ; 
 } 
 } 
 return nums ; 
 } 
 var * func ( var var , data_type var [ ] , data_type var [ ] ) 
 { 
 var * var ; 
 if ( strcmp ( var , words ) = = nums ) 
 { 
 var = var - > var ; 
 while ( var ! = NULL ) 
 { 
 if ( strcmp ( var - > var , var ) = = nums ) 
 return var ; 
 var = var - > var ; 
 } 
 } 
 else if ( strcmp ( var , words ) = = nums ) 
 { 
 var = var - > var ; 
 while ( var ! = NULL ) 
 { 
 if ( strcmp ( var - > , var ) = = nums ) 
 return var ; 
 var = var - > var ; 
 } 
 } 
 else if ( strcmp ( var , words ) = = nums ) 
 { 
 var = var - > var ; 
 while ( var ! = NULL ) 
 { 
 if ( strcmp ( var - > , var ) = = nums ) 
 return var ; 
 var = var - > var ; 
 } 
 } 
 return nums ; 
 } 
 
 void func ( var var ) 
 { 
 var * var , * var , * ; 
 char var [ nums ] ; 
 var = var ; 
 = var - > var ; 
 while ( var - > var ! = NULL ) 
 var = var - > var ; 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 while ( ) 
 { 
 if ( strcmp ( - > var . var , var ) = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 printf ( words % words , var ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 getch ( ) ; 
 return ; 
 } 
 = - > var ; 
 } 
 call_func ( var - > var . var , var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 scanf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 scanf ( words , var - > var . var ) ; 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 var + + ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 void func ( var var ) 
 { 
 int var ; 
 char var [ nums ] ; 
 var * var ; 
 if ( ! var - > var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 return ; 
 } 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 } 
 else if ( var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 } 
 } 
 else 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 } 
 int func ( var var , data_type var [ ] ) 
 { 
 var * var ; 
 if ( ! var - > var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 return nums ; 
 } 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 return nums ; 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return nums ; 
 } 
 } 
 void func ( var var ) 
 { 
 int var ; 
 char var [ nums ] ; 
 var * var ; 
 if ( ! var - > var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 return ; 
 } 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 } 
 else if ( var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 call_func ( nums , nums ) ; 
 printf ( words , var - > var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var - > ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var - > ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 } 
 else 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 } 
 void func ( var var ) 
 { 
 int var ; 
 var * var , * var ; 
 char var [ nums ] ; 
 if ( ! var - > var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 var = var ; 
 while ( var - > var ! = var ) 
 var = var - > var ; 
 var - > var = var - > var ; 
 free ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 var - - ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 } 
 else if ( var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 var = var ; 
 while ( var - > var ! = var ) 
 var = var - > var ; 
 var - > var = var - > var ; 
 free ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 var - - ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 call_func ( var ) ; 
 } 
 
 void func ( var var ) 
 { 
 int var ; 
 var * var , * var ; 
 var * var ; 
 char var [ nums ] ; 
 FILE * var ; 
 var * var , * var , * var ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 var - > var = NULL ; 
 var = var ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 var = fopen ( var , words ) ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 if ( fread ( var , sizeof ( var ) , nums , var ) ) 
 { 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 } 
 } 
 fclose ( var ) ; 
 if ( ! var - > var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 var - > var . var = var - > var . var - nums ; 
 call_func ( var ) ; 
 } 
 var = var ; 
 while ( var - > var ! = var ) 
 var = var - > var ; 
 var - > var = var - > var ; 
 free ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 var - - ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 } 
 else if ( var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 var - > var . var = var - > var . var - nums ; 
 call_func ( var ) ; 
 } 
 var = var ; 
 while ( var - > var ! = var ) 
 var = var - > var ; 
 var - > var = var - > var ; 
 free ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 var - - ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 call_func ( var ) ; 
 } 
 void func ( var var ) 
 { 
 var * var ; 
 char var [ nums ] ; 
 if ( ! var - > var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var - > var . var ) ; 
 scanf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var - > var . var ) ; 
 scanf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var - > var . var ) ; 
 scanf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var - > var . var ) ; 
 scanf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 } 
 
 void func ( var var ) 
 { 
 var * var ; 
 char var [ nums ] ; 
 if ( ! var - > var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( var , var - > var . var ) ; 
 printf ( words , var ) ; 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var - > var . var ) ; 
 scanf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var - > var . var ) ; 
 scanf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var - > var . var ) ; 
 scanf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 } 
 int func ( var var , data_type var [ nums ] , data_type var [ nums ] ) 
 { 
 var * var ; 
 if ( ! var - > var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( nums ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return nums ; 
 } 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 { 
 var = var ; 
 return nums ; 
 } 
 else 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return nums ; 
 } 
 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( nums ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return nums ; 
 } 
 } 
 
 int func ( var var , data_type var [ nums ] ) 
 { 
 int var ; 
 var * var ; 
 if ( ! var - > var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return nums ; 
 } 
 var = call_func ( var , var , words ) ; 
 if ( var ) 
 { 
 if ( var - > var . var < var - > var . var ) 
 { 
 var = var + nums ; 
 var - > var . var = var - > var . var + nums ; 
 call_func ( var ) ; 
 return nums ; 
 } 
 else 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 return nums ; 
 } 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 return nums ; 
 } 
 } 
 void func ( var var ) 
 { 
 var var ; 
 FILE * var ; 
 var * var , * var ; 
 var var ; 
 FILE * var ; 
 int var ; 
 var * var , * var ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 var * var , * var , * ; 
 char var [ nums ] ; 
 var = var ; 
 = var - > var ; 
 while ( var - > var ! = NULL ) 
 var = var - > var ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 var - > var = NULL ; 
 var = var ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 var = fopen ( var , words ) ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 if ( fread ( var , sizeof ( var ) , nums , var ) ) 
 { 
 var - > var = NULL ; 
 var = var + var - > var . var ; 
 var - > var = var ; 
 var = var ; 
 } 
 } 
 fclose ( var ) ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 var - > var = NULL ; 
 var = var ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 var = fopen ( var , words ) ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 if ( fread ( var , sizeof ( var ) , nums , var ) ) 
 { 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 } 
 } 
 fclose ( var ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var , var , nums ) ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 while ( ) 
 { 
 if ( strcmp ( - > var , var ) = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 printf ( words % words , var ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 getch ( ) ; 
 return ; 
 } 
 = - > var ; 
 } 
 call_func ( var - > var , var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 if ( func ( var , var , var ) ) 
 { 
 call_func ( var - > var , var ) ; 
 call_func ( var - > struct_name , var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 if ( func ( var , var ) ) 
 { 
 call_func ( var - > struct_name , var ) ; 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 if ( func ( var , var ) ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 var + + ; 
 getch ( ) ; 
 } 
 } 
 } 
 call_func ( var ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 var var , var , var ; 
 FILE * var ; 
 int var = nums ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 var - > var = NULL ; 
 var = var ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 var = fopen ( var , words ) ; 
 } 
 var = nums ; 
 while ( ! feof ( var ) ) 
 { 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 if ( fread ( var , sizeof ( var ) , nums , var ) ) 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 if ( strcmp ( var - > , var - > var . var ) = = nums ) 
 { 
 call_func ( var ) ; 
 call_func ( nums , var ) ; 
 printf ( words , var - > var , var - > var , var - > ) ; 
 var + + ; 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 var + + ; 
 } 
 } 
 var = var ; 
 if ( var = = nums ) 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 } 
 } 
 fclose ( var ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var ) ; 
 getch ( ) ; 
 } 
 int func ( var var ) 
 { 
 
 while ( ! var ) 
 { 
 char var [ nums ] , var [ nums ] , var ; 
 int var = nums ; 
 var [ nums ] = words ; 
 var [ nums ] = words ; 
 call_func ( nums ) ; 
 call_func ( ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums , nums , nums , nums ) ; 
 while ( var [ nums ] = = words ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 var = getch ( ) ; 
 if ( var = = nums ) 
 { 
 var = nums ; 
 return nums ; 
 } 
 while ( var ! = words & & var <= nums & & ( var >= nums & & var <= nums ) | | ( var >= nums & & var <= nums | | ( var >= nums & & var <= nums ) ) ) 
 { 
 call_func ( var ) ; 
 call_func ( nums ) ; 
 call_func ( var ) ; 
 var [ var ] = var ; 
 var + + ; 
 var = getch ( ) ; 
 if ( var = = nums ) 
 { 
 var = nums ; 
 return nums ; 
 } 
 } 
 var [ var ] = words ; 
 } 
 while ( var [ nums ] = = words ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( nums ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 var = nums ; 
 var = getch ( ) ; 
 if ( var = = nums ) 
 { 
 var = nums ; 
 return nums ; 
 } 
 while ( var ! = words & & var <= nums & & ( var >= nums & & var <= nums ) | | ( var >= nums & & var <= nums | | ( var >= nums & & var <= nums ) ) ) 
 { 
 call_func ( nums ) ; 
 call_func ( words ) ; 
 var [ var ] = var ; 
 var + + ; 
 var = getch ( ) ; 
 if ( var = = nums ) 
 { 
 var = nums ; 
 return nums ; 
 } 
 } 
 var [ var ] = words ; 
 } 
 if ( ! strcmp ( var , words ) & & ! strcmp ( var , words ) ) 
 { 
 return nums ; 
 } 
 if ( func ( var , var , var ) ) 
 { 
 return nums ; 
 } 
 } 
 } 
 void func ( ) 
 { 
 var = nums ; 
 var = nums ; 
 while ( nums ) 
 { 
 int var ; 
 var var ; 
 FILE * var ; 
 int var = nums ; 
 var * var , * var ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 var - > var = NULL ; 
 var = var ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 var = fopen ( var , words ) ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 if ( fread ( var , sizeof ( var ) , nums , var ) ) 
 { 
 var - > var = NULL ; 
 var = var + var - > var . var ; 
 var = var + var - > var . var ; 
 var - > var = var ; 
 var = var ; 
 var + + ; 
 } 
 } 
 fclose ( var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var ) ; 
 while ( nums ) 
 { 
 call_func ( nums ) ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 printf ( words , var - var , var ) ; 
 printf ( words , var ) ; 
 call_func ( nums , nums ) ; 
 var = getch ( ) ; 
 switch ( var ) 
 { 
 case words : 
 ( var ) ; 
 call_func ( var ) ; 
 break ; 
 case words : 
 call_func ( var ) ; 
 call_func ( var ) ; 
 break ; 
 case words : 
 call_func ( var ) ; 
 break ; 
 case words : 
 call_func ( var ) ; 
 call_func ( var ) ; 
 break ; 
 case nums : 
 return ; 
 } 
 } 
 } 
 } 
 void func ( ) 
 { 
 while ( nums ) 
 { 
 int var ; 
 var var ; 
 FILE * var ; 
 int var = nums ; 
 var * var , * var ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 var - > var = NULL ; 
 var = var ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 var = fopen ( var , words ) ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 if ( fread ( var , sizeof ( var ) , nums , var ) ) 
 { 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 var + + ; 
 } 
 var = var ; 
 } 
 fclose ( var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var ) ; 
 while ( nums ) 
 { 
 call_func ( nums ) ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 printf ( words , var ) ; 
 call_func ( nums , nums ) ; 
 var = getch ( ) ; 
 switch ( var ) 
 { 
 case words : 
 call_func ( var ) ; 
 call_func ( var ) ; 
 break ; 
 case words : 
 call_func ( var ) ; 
 call_func ( var ) ; 
 break ; 
 case words : 
 call_func ( var ) ; 
 break ; 
 case words : 
 call_func ( var ) ; 
 call_func ( var ) ; 
 break ; 
 case nums : 
 return ; 
 } 
 } 
 } 
 } 
 void ( ) 
 { 
 while ( nums ) 
 { 
 int var ; 
 var var , var , var ; 
 FILE * var ; 
 int var = nums ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 var - > var = NULL ; 
 var = var ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 var = fopen ( var , words ) ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 if ( fread ( var , sizeof ( var ) , nums , var ) ) 
 { 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 var + + ; 
 } 
 var = var ; 
 } 
 while ( nums ) 
 { 
 call_func ( nums ) ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 printf ( words , var ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 var = getch ( ) ; 
 switch ( var ) 
 { 
 case words : 
 call_func ( var ) ; 
 break ; 
 case words : 
 call_func ( var ) ; 
 call_func ( var ) ; 
 break ; 
 case words : 
 call_func ( var ) ; 
 break ; 
 case nums : 
 return ; 
 } 
 } 
 } 
 } 
 void func ( ) 
 { 
 while ( nums ) 
 { 
 call_func ( nums ) ; 
 call_func ( ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 var = getch ( ) ; 
 if ( var = = words ) 
 call_func ( ) ; 
 if ( var = = words ) 
 call_func ( ) ; 
 if ( var = = words ) 
 ( ) ; 
 if ( var = = nums ) 
 { 
 var = - nums ; 
 return ; 
 } 
 } 
 } 
 void func ( ) 
 { 
 while ( nums ) 
 { 
 call_func ( ) ; 
 if ( var = = words ) 
 call_func ( ) ; 
 if ( var = = words ) 
 call_func ( ) ; 
 if ( var = = words ) 
 ( ) ; 
 if ( var = = nums ) 
 { 
 return ; 
 } 
 } 
 } 
 void func ( var var ) 
 { 
 if ( var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 printf ( words , var - > var . var ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 } 
 } 
 void ( var var ) 
 { 
 int var ; 
 var var , var , var ; 
 FILE * var ; 
 int var = nums ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 var - > var = NULL ; 
 var = var ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 var = fopen ( var , words ) ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 if ( fread ( var , sizeof ( var ) , nums , var ) ) 
 { 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 var + + ; 
 } 
 } 
 while ( nums ) 
 { 
 call_func ( nums ) ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 var = getch ( ) ; 
 switch ( var ) 
 { 
 case words : 
 call_func ( var ) ; 
 break ; 
 case words : 
 call_func ( var ) ; 
 call_func ( var ) ; 
 break ; 
 case words : 
 call_func ( ) ; 
 break ; 
 case words : 
 call_func ( ) ; 
 break ; 
 case nums : 
 return ; 
 } 
 } 
 } 
 func ( ) 
 { 
 var var , var ; 
 FILE * var ; 
 var * var , * var ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 var - > var = NULL ; 
 var = var ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 var = fopen ( var , words ) ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 if ( fread ( var , sizeof ( var ) , nums , var ) ) 
 { 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 } 
 } 
 fclose ( var ) ; 
 system ( words ) ; 
 if ( var = = nums ) 
 { 
 var = - nums ; 
 return ; 
 } 
 while ( nums ) 
 { 
 var = call_func ( var ) ; 
 if ( var = = nums ) 
 { 
 var = - nums ; 
 break ; 
 } 
 if ( var = = nums ) 
 { 
 call_func ( ) ; 
 var = nums ; 
 } 
 if ( var = = nums ) 
 { 
 ( var ) ; 
 var = nums ; 
 } 
 } 
 } 
 #define var nums 
 #define var nums 
 struct 
 { 
 int var ; 
 char var [ nums ] ; 
 int var ; 
 int var ; 
 int var ; 
 } ; 
 struct 
 { 
 struct struct_name struct_var [ var ] ; 
 } ; 
 struct 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 } ; 
 struct struct_name struct_var [ var ] ; 
 struct struct_name struct_var [ var ] ; 
 struct struct_name struct_var [ nums * var ] ; 
 struct struct_name struct_var [ var ] ; 
 struct struct_name struct_var [ var + nums ] ; 
 int var = nums ; 
 int var = nums ; 
 int var = nums ; 
 int func ( ) 
 { 
 int call_func ( ) ; 
 int call_func ( ) ; 
 int call_func ( ) ; 
 int call_func ( ) ; 
 int call_func ( ) ; 
 int call_func ( ) ; 
 int call_func ( ) ; 
 int var , var = nums ; 
 call_func ( ) ; 
 call_func ( ) ; 
 while ( var = = nums ) 
 { 
 call_func ( ) ; 
 scanf ( words , & var ) ; 
 switch ( var ) 
 { 
 case nums : ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 default : printf ( words ) ; 
 } 
 if ( var = = nums ) 
 break ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } 
 call_func ( ) ; 
 return nums ; 
 } 
 
 int func ( ) 
 { 
 FILE * var ; 
 var = fopen ( words , words ) ; 
 call_func ( var , words ) ; 
 call_func ( var , words ) ; 
 call_func ( var , words ) ; 
 call_func ( var , words ) ; 
 call_func ( var , words ) ; 
 call_func ( var , words ) ; 
 call_func ( var , words ) ; 
 call_func ( var , words ) ; 
 call_func ( var , words ) ; 
 call_func ( var , words ) ; 
 call_func ( var , words ) ; 
 call_func ( var , words ) ; 
 call_func ( var , words ) ; 
 call_func ( var , words ) ; 
 call_func ( var , words ) ; 
 fclose ( var ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var = nums , var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var = var [ var ] . var = var [ var ] . var = - nums ; 
 var [ var ] . var = nums ; 
 var [ var ] . var = var [ var ] . var = nums ; 
 var [ var ] . var = nums ; 
 var [ var ] . var = nums ; 
 var [ var ] . var = nums ; 
 } 
 var [ var ] . var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 var [ var ] . var = - nums ; 
 for ( var = nums ; var < nums * var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var [ var ] . var = var ; 
 var [ var ] . var [ var ] . var = nums ; 
 var [ var ] . var [ var ] . var = var [ var ] . var ; 
 var [ var ] . var [ var ] . var = var [ var ] . var ; 
 } 
 } 
 
 return nums ; 
 } 
 int func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int call_func ( ) ; 
 int call_func ( ) ; 
 int call_func ( ) ; 
 int call_func ( ) ; 
 int var ; 
 int var = nums ; 
 while ( var = = nums ) 
 { 
 call_func ( ) ; 
 scanf ( words , & var ) ; 
 switch ( var ) 
 { 
 case nums : ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 default : printf ( words ) ; 
 } 
 if ( var = = nums ) 
 break ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var = nums ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words ) ; 
 scanf ( words , var [ var ] . var ) ; 
 var [ var ] . var = var ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 if ( var [ var ] . var <= nums ) { 
 var [ var ] . var = nums ; 
 break ; 
 } 
 var + = var [ var ] . var ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var = nums ; 
 printf ( words ) ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 return nums ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] . var > nums ) { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var , var [ var ] . var , var [ var ] . var , var [ var ] . var ) ; 
 printf ( words ) ; 
 } 
 else 
 continue ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var = nums , var = nums ; 
 int call_func ( ) ; 
 int call_func ( ) ; 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 switch ( var ) 
 { 
 case nums : call_func ( ) ; break ; 
 case nums : ; break ; 
 default : printf ( words ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var = nums , var = nums ; 
 if ( var = = nums ) { 
 printf ( words ) ; 
 return nums ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] . var = = nums ) { 
 var + + ; 
 continue ; 
 } 
 else { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var , var [ var ] . var ) ; 
 } 
 } 
 printf ( words ) ; 
 if ( var = = var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var = nums , var = nums ; 
 int call_func ( ) ; 
 call_func ( ) ; 
 printf ( words ) ; 
 while ( var > nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( var >= var ) { 
 printf ( words ) ; 
 scanf ( words , & var ) ; } 
 var [ var ] . var = var ; 
 printf ( words ) ; 
 scanf ( words , var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var > nums ) { 
 var [ var ] . var + = var ; 
 var + = var ; 
 } 
 else 
 break ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int call_func ( ) ; 
 int call_func ( ) ; 
 int call_func ( ) ; 
 int call_func ( data_type var ) ; 
 int call_func ( data_type var ) ; 
 int var , var = nums , var = nums ; 
 int var = nums , var = nums ; 
 call_func ( ) ; 
 while ( var = = nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 switch ( var ) 
 { 
 case nums : ; break ; 
 case nums : var = call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 default : printf ( words ) ; 
 } 
 if ( var = = nums ) 
 break ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } 
 while ( var = = nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 switch ( var ) 
 { 
 case nums : ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 default : printf ( words ) ; 
 } 
 if ( var = = nums ) 
 break ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var = nums ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 while ( strcmp ( var , var [ var ] . var ) ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( ! strcmp ( var , words ) ) 
 break ; 
 } 
 if ( ! strcmp ( var , words ) ) 
 return nums ; 
 else 
 return var ; 
 } 
 int func ( ) 
 { 
 printf ( words , var ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , var [ var ] . var ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , var [ var ] . var ) ; 
 var + + ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var , var = nums ; 
 var = var ; 
 printf ( words ) ; 
 printf ( words , var [ var ] . var , var ) ; 
 printf ( words ) ; 
 if ( var [ var ] . var ! = - nums ) { 
 for ( var = nums ; var < var ; var + + ) { 
 if ( var [ var [ var ] . var ] . var [ var ] . var = = nums ) 
 var + + ; 
 else { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var , var [ var [ var ] . var ] . var [ var ] . var , var [ var ] . var ) ; 
 printf ( words ) ; 
 } 
 
 } 
 } 
 else { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var = nums , var = nums , var = nums , var = nums , var = nums ; 
 printf ( words ) ; 
 var = var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 if ( var [ var ] . var = = - nums ) { 
 var + + ; 
 continue ; } 
 else 
 printf ( words , var [ var ] . var , var [ var ] . var , var [ var ] . var ) ; 
 } 
 if ( var = = var ) 
 { 
 printf ( words ) ; 
 return nums ; 
 } 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( ( var >= var ) | | ( var [ var ] . var = = - nums ) ) { 
 printf ( words ) ; 
 scanf ( words , & var ) ; } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( var > nums ) 
 { 
 if ( var [ var ] . var < var ) 
 { 
 var [ var ] . var [ var ] . var = var [ var ] . var ; 
 var [ var ] . var = nums ; 
 printf ( words , var [ var ] . var [ var ] . var - var [ var ] . var , var [ var ] . var ) ; 
 var [ var ] . var + = ( var - var [ var ] . var ) ; 
 } 
 else { 
 var [ var ] . var [ var ] . var = var ; 
 var [ var ] . var - = var ; 
 } 
 var - = var [ var ] . var [ var ] . var ; 
 var [ var ] . var + = ( var [ var ] . var [ var ] . var * ( var [ var ] . var - var [ var ] . var ) ) ; 
 var [ var ] . var + = var [ var ] . var ; 
 var [ var ] . var + = var [ var ] . var [ var ] . var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( ( var >= var ) | | ( var [ var ] . var = = - nums ) ) { 
 printf ( words ) ; 
 scanf ( words , & var ) ; } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } 
 var [ var ] . var = var ; 
 var + + ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] . var = = nums ) 
 var + + ; 
 else { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var , var [ var ] . var ) ; 
 printf ( words ) ; 
 } 
 
 } 
 printf ( words , var ) ; 
 printf ( words , var [ var ] . var ) ; 
 return nums ; 
 } 
 var call_func ( var , words ) 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 
 #define var nums 
 
 #define var nums 
 #define var nums 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( data_type var , data_type * * var ) ; 
 var call_func ( var * var , data_type var ) ; 
 void call_func ( data_type * var , data_type var ) ; 
 void call_func ( ) ; 
 void call_func ( data_type * var , data_type var ) ; 
 void call_func ( data_type * var , data_type var , var * var ) ; 
 void call_func ( data_type var ) ; 
 typedef struct 
 { 
 var int var : nums ; 
 var int var : nums ; 
 var char var ; 
 var var var ; 
 var var var ; 
 var var var ; 
 var char var ; 
 var char var ; 
 var var var ; 
 var int var ; 
 var int var ; 
 } var ; 
 typedef struct 
 { 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 } var ; 
 typedef struct 
 { 
 
 var char var ; 
 var char var ; 
 var char var ; 
 var var var [ nums ] ; 
 } var ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 char * var ; 
 char * var ; 
 var var ; 
 char * var ; 
 int var ; 
 var var ; 
 double var ; 
 var var ; 
 
 void func ( ) 
 { 
 var var ; 
 var = NULL ; 
 var = nums ; 
 var = NULL ; 
 var = var ; 
 var = NULL ; 
 var = var ; 
 var = nums ; 
 var = var ; 
 
 if ( func ( call_func ( nums , nums ) , & var ) ! = nums ) 
 { 
 
 printf ( words , call_func ( ) ) ; 
 return ; 
 } 
 var = var ; 
 } 
 void func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 call_func ( - nums ) ; 
 } 
 void func ( data_type var , data_type * * var ) 
 { 
 int var ; 
 int var ; 
 int var ; 
 int var ; 
 int var ; 
 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 call_func ( ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var = call_func ( var [ var ] ) ; 
 if ( var [ var ] [ nums ] = = words ) 
 { 
 
 if ( func ( var [ var ] [ nums ] ) ) 
 { 
 var = nums ; 
 for ( var = var - nums , var = nums ; var >= nums ; var - - , var + + ) 
 var + = ( ( double ) ( var [ var ] [ var ] - nums ) ) * call_func ( nums , var ) ; 
 } 
 else 
 { 
 switch ( func ( var [ var ] [ nums ] ) ) 
 { 
 case words : 
 var = var ; 
 break ; 
 default : 
 call_func ( ) ; 
 break ; 
 } 
 } 
 } 
 else if ( func ( var [ var ] [ nums ] ) ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( ! ( func ( var [ var ] [ var ] ) ) ) 
 { 
 var = var [ var ] ; 
 break ; 
 } 
 else if ( var = = var - nums ) 
 var = call_func ( var [ var ] ) ; 
 } 
 } 
 else 
 var = var [ var ] ; 
 } 
 } 
 var func ( var * var , data_type var ) 
 { 
 var var var = nums ; 
 while ( var > nums ) 
 { 
 var + = * var + + ; 
 var - = sizeof ( var ) ; 
 } 
 if ( var ) 
 { 
 var + = * ( var * ) var ; 
 } 
 var = ( var > > nums ) + ( var & var ) ; 
 var + = ( var > > nums ) ; 
 return ( var ) ( var ) ; 
 } 
 void func ( data_type * var , data_type var ) 
 { 
 var * var = NULL ; 
 char * var = NULL ; 
 var = ( var * ) var ; 
 var - > var = var ; 
 var - > var = nums ; 
 var - > var = ( var ) call_func ( ) ; 
 var - > var = nums ; 
 var - > var = nums ; 
 var = var + sizeof ( var ) ; 
 memset ( var , words , var - sizeof ( var ) ) ; 
 } 
 void func ( ) 
 { 
 if ( var ! = var ) 
 call_func ( var ) ; 
 call_func ( call_func ( ) , nums , var ) ; 
 call_func ( call_func ( ) , nums , var ) ; 
 call_func ( ) ; 
 return ; 
 } 
 void func ( data_type * var , data_type var ) 
 { 
 var * var = NULL ; 
 var var ; 
 int var ; 
 var * var = NULL ; 
 var = ( var * ) ( var + nums ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < ( var - > var / nums ) - nums ; var + + ) 
 { 
 var . var . var = var - > var [ var ] ; 
 if ( var ! = nums ) 
 printf ( words ) ; 
 var = call_func ( ( data_type * ) & var . var . var , sizeof ( var . var . var ) , var ) ; 
 
 if ( var ) 
 printf ( words , call_func ( var ) , var - > var ) ; 
 
 else 
 printf ( words , call_func ( var ) ) ; 
 } 
 return ; 
 } 
 void func ( data_type * var , data_type var , var * var ) 
 { 
 var * var = NULL ; 
 var * var = NULL ; 
 var var var ; 
 var var ; 
 static int var = nums ; 
 var = ( var * ) var ; 
 
 var = var - > var * nums ; 
 var = call_func ( ) ; 
 if ( ( var = = var ) & & ( ! var ) ) 
 call_func ( var , var ) ; 
 if ( var < var + var ) 
 { 
 printf ( words , 
 call_func ( var - > var ) ) ; 
 } 
 var = ( var * ) ( var + var ) ; 
 if ( var - > var ! = var ) 
 { 
 printf ( words , var - > var ) ; 
 return ; 
 } 
 
 if ( var - > var ! = ( var ) func ( ) ) 
 { 
 printf ( words var ! words 
 return ; 
 } 
 var = var ; 
 printf ( words , var , call_func ( var - > var ) ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - var - > var ) ; 
 printf ( words ) ; 
 var + + ; 
 return ; 
 } 
 void func ( data_type var ) 
 { 
 int var ; 
 int var ; 
 int var ; 
 struct struct_name * struct_var = NULL ; 
 var = call_func ( var , var , var , NULL , nums , var ) ; 
 if ( var = = var ) 
 { 
 printf ( words , call_func ( ) ) ; 
 return ; 
 } 
 if ( var ) 
 { 
 
 call_func ( & var , sizeof ( var ) ) ; 
 var . var = var ; 
 var . var = nums ; 
 var . var = nums ; 
 
 var = call_func ( var , var , var , ( data_type * ) & var , sizeof ( var ) ) ; 
 if ( var = = var ) 
 { 
 printf ( words , call_func ( ) ) ; 
 } 
 } 
 
 var = call_func ( var , var , var , ( data_type * ) & var , sizeof ( var ) ) ; 
 if ( var = = var ) 
 { 
 printf ( words , call_func ( ) ) ; 
 return ; 
 } 
 var = nums ; 
 var = call_func ( var , var , var , ( data_type * ) & var , sizeof ( var ) ) ; 
 if ( var = = var ) 
 { 
 printf ( words , call_func ( ) ) ; 
 return ; 
 } 
 memset ( & var , nums , sizeof ( var ) ) ; 
 var . var = var ; 
 if ( ( var . var . var = func ( var ) ) = = var ) 
 { 
 
 
 if ( ( var = func ( var ) ) ! = NULL ) 
 { 
 
 call_func ( & ( var . var ) , var - > var , var - > var ) ; 
 var . var = var - > var ; 
 printf ( words , call_func ( var . var ) ) ; 
 } 
 
 else 
 { 
 printf ( words , call_func ( ) ) ; 
 return ; 
 } 
 } 
 var + = sizeof ( var ) ; 
 var = ( char * ) call_func ( call_func ( ) , var , var ) ; 
 var = ( char * ) call_func ( call_func ( ) , var , var ) ; 
 if ( ! var ) 
 { 
 printf ( words , call_func ( ) ) ; 
 return ; 
 } 
 memset ( var , nums , var ) ; 
 call_func ( var , var ) ; 
 
 while ( nums ) 
 { 
 static int var = nums ; 
 int var ; 
 
 if ( var + + = = var ) 
 break ; 
 
 ( ( var * ) var ) - > var = nums ; 
 ( ( var * ) var ) - > var = call_func ( ) ; 
 ( ( var * ) var ) - > var = var + + ; 
 ( ( var * ) var ) - > var = call_func ( ( var * ) var , var ) ; 
 var = call_func ( var , var , var , nums , ( struct struct_name * ) & var , sizeof ( var ) ) ; 
 
 if ( var = = var ) 
 { 
 
 if ( func ( ) = = var ) 
 { 
 printf ( words ) ; 
 continue ; 
 } 
 printf ( words , call_func ( ) ) ; 
 return ; 
 } 
 var = sizeof ( var ) ; 
 var = call_func ( var , var , var , nums , ( struct struct_name * ) & var , & var ) ; 
 
 if ( var = = var ) 
 { 
 
 if ( func ( ) = = var ) 
 { 
 printf ( words ) ; 
 continue ; 
 } 
 printf ( words , call_func ( ) ) ; 
 return ; 
 } 
 call_func ( var , var , & var ) ; 
 } 
 } 
 int func ( data_type var , data_type * var [ ] ) 
 { 
 call_func ( ) ; 
 call_func ( var , var ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 if ( var ) 
 printf ( words , var ) ; 
 
 else 
 printf ( words ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 getch ( ) ; 
 } 
 struct 
 { 
 char var [ nums ] ; 
 int var , var , var ; 
 int var , var ; 
 int var , var ; 
 float var , var ; 
 int var , var , var , var ; 
 } var ; 
 struct 
 { 
 char var [ nums ] ; 
 int var ; 
 int var , var ; 
 var ; 
 float var , var ; 
 } var ; 
 func ( ) 
 { 
 int var = nums , var = nums , var = nums , var = nums ; 
 char var ; 
 void call_func ( ) ; 
 int call_func ( data_type var ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( data_type var , data_type var ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 var : var = nums , var = nums ; 
 call_func ( ) ; 
 system ( words ) ; 
 call_func ( ) ; 
 call_func ( var , var ) ; 
 while ( nums ) 
 { 
 var = getch ( ) ; 
 switch ( var ) 
 { 
 words : 
 words : 
 printf ( words ) ; 
 var - = nums ; 
 if ( var < nums ) var = nums ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var - nums , var ) ; 
 break ; 
 words : 
 words : 
 printf ( words ) ; 
 var + = nums ; 
 if ( var > nums ) var = nums ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var - nums , var ) ; 
 break ; 
 words : 
 words : 
 if ( nums = = var ) 
 call_func ( nums ) ; 
 if ( nums = = var ) 
 { 
 system ( words ) ; 
 call_func ( ) ; 
 while ( getch ( ) ) { system ( words ) ; goto var ; } 
 } 
 if ( nums = = var ) 
 { 
 system ( words ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 while ( nums ) 
 { 
 printf ( words ) ; 
 call_func ( var . var , words , words ) ; 
 gets ( var . var ) ; 
 if ( call_func ( var . var ) <= nums ) break ; 
 } 
 system ( words ) ; 
 call_func ( ) ; 
 while ( nums ) { 
 call_func ( ) ; 
 ( ) ; 
 call_func ( nums ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( ) ; } 
 } 
 break ; 
 } 
 } 
 
 } 
 void func ( data_type var , data_type var ) 
 { 
 var var ; 
 var var ; 
 var = call_func ( var ) ; 
 call_func ( var , & var ) ; 
 var . var . var = var ; 
 var . var . var = var ; 
 call_func ( var , var . var ) ; 
 } 
 void func ( ) 
 { 
 var var = { nums , nums } ; 
 call_func ( call_func ( var ) , & var ) ; 
 } 
 int func ( data_type var ) 
 { 
 if ( var < nums ) var = nums ; 
 return var ; 
 } 
 void func ( ) 
 { 
 int var = nums , var = nums ; 
 int var = nums , var = nums , var = nums , var = nums , var = nums , var = nums , var = nums , var = nums , var = nums , var = nums , var = nums ; 
 float var = nums , var = nums ; 
 int var , var , var , var ; 
 int var , var , var , var ; 
 char var , var ; 
 char var , var ; 
 char var [ nums ] ; 
 call_func ( struct_name ( NULL ) ) ; 
 var = call_func ( ) % nums + nums ; 
 var = call_func ( ) % nums + nums ; 
 var = call_func ( ) % nums + nums ; 
 var = nums - var - var - var ; 
 var : printf ( words ) ; 
 scanf ( words , var ) ; 
 var : while ( nums ) 
 { 
 printf ( words , var = nums + var * nums , var , var , var , var = nums + var * nums . nums , var = nums + var * nums . nums , var = nums + var * nums . nums , var = nums + var * nums . nums , var ) ; 
 scanf ( words , & var ) ; 
 switch ( var ) 
 { 
 words : var + = nums , var - = nums ; break ; 
 words : var + = nums , var - = nums ; break ; 
 words : var + = nums , var - = nums ; break ; 
 default : printf ( words ) ; 
 } 
 if ( var = = nums ) break ; 
 } 
 printf ( words , var , var , var , var , var , var = var , var , var , var , var ) ; 
 var : printf ( words ) ; 
 while ( nums ) 
 { 
 scanf ( words , & var ) ; 
 if ( var ! = words ) printf ( words ) ; 
 if ( var = = words ) break ; 
 } 
 var = call_func ( ) % nums + nums ; 
 var = call_func ( ) % nums + nums ; 
 var = nums - var ; 
 var = nums ; 
 printf ( words , var , var , var ) ; 
 while ( nums ) 
 { 
 if ( var <= nums ) break ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 switch ( var ) 
 { 
 words : if ( call_func ( ) % nums + nums <= nums ) printf ( words , var ) ; 
 else if ( ( call_func ( ) % nums + nums ) * nums <= var * nums ) 
 printf ( words , var , var , call_func ( var - = var ) ) ; 
 else 
 printf ( words , var , call_func ( var - var ) , call_func ( var - = call_func ( var - var ) ) ) ; 
 if ( var <= nums ) break ; 
 if ( ( call_func ( ) % nums + nums ) * nums <= var * nums ) printf ( words ) ; 
 else if ( call_func ( ) % nums + nums <= nums ) 
 printf ( words , var , var , var , call_func ( var - = var ) ) ; 
 else 
 printf ( words , var , call_func ( var - var ) , var , call_func ( var - = call_func ( var - var ) ) ) ; break ; 
 words : if ( call_func ( ) % nums = = nums ) goto var ; 
 else if ( ( call_func ( ) % nums + nums ) * nums <= var * nums ) printf ( words ) ; 
 else if ( call_func ( ) % nums + nums <= nums ) 
 printf ( words , var , var , var , call_func ( var - = var ) ) ; 
 else 
 printf ( words , var , call_func ( var - var ) , var , call_func ( var - = call_func ( var - var ) ) ) ; break ; 
 default : printf ( words ) ; 
 } 
 if ( var <= nums ) break ; 
 } 
 if ( var <= nums ) goto var ; 
 var + = var ; 
 if ( var >= var ) var + = nums , var + = nums , var - = var , var + = nums * ( var - nums ) , printf ( words , var ) ; 
 else printf ( words ) ; 
 if ( var ! = nums ) goto var ; 
 while ( nums ) 
 { 
 scanf ( words , & var ) ; 
 if ( var ! = words ) printf ( words ) ; 
 if ( var = = words ) printf ( words , var , var , var = var , var , var , var , var ) ; 
 if ( var = = words ) goto var ; 
 } 
 var : printf ( words ) ; 
 } 
 void func ( ) 
 { 
 int var = nums , var = nums , var = nums ; 
 void call_func ( ) ; 
 void call_func ( data_type var , data_type var ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( nums ) 
 { 
 call_func ( nums ) ; 
 call_func ( var + = nums , var ) ; 
 printf ( words ) ; 
 call_func ( nums , var ) ; 
 printf ( words , var + = nums ) ; 
 if ( var = = nums ) 
 { 
 call_func ( nums ) ; 
 break ; 
 } 
 } 
 system ( words ) ; 
 } 
 void func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 var . var = var . var = var . var = nums ; 
 var . var = nums + var . var * nums . nums ; 
 var . var = nums + var . var * nums . nums ; 
 var . var = nums + var . var * nums ; 
 var . var = var . var ; 
 var . var = var . var = nums + var . var * nums . nums ; 
 var . var = nums ; 
 var . var = nums + nums * var . var * ( var . var - nums ) ; 
 var . var = nums ; 
 var . var = nums ; 
 } 
 void func ( ) 
 { 
 call_func ( struct_name ( nums ) ) ; 
 call_func ( var . var , words , words ) ; 
 var . var = call_func ( ) % nums + nums ; 
 var . var = call_func ( ) % nums + nums ; 
 var . var = nums - var . var ; 
 var . var = nums ; 
 var . var = var . var = nums ; 
 } 
 void ( ) 
 { 
 int call_func ( data_type var ) ; 
 var . var = nums + var . var * nums . nums ; 
 var . var = nums + var . var * nums . nums ; 
 var . var = nums + var . var * nums ; 
 var . var = var . var = nums + var . var * nums . nums ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , call_func ( var . var ) , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , call_func ( var . var ) ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 } 
 void func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 char var ; 
 int var = nums , var = nums ; 
 if ( var . var > nums ) { 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 while ( nums ) 
 { 
 var = getch ( ) ; 
 switch ( var ) 
 { 
 words : 
 words : 
 printf ( words ) ; 
 var - = nums ; 
 if ( var < nums ) var = nums ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var - nums , var ) ; 
 break ; 
 words : 
 words : 
 printf ( words ) ; 
 var + = nums ; 
 if ( var > nums ) var = nums ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var - nums , var ) ; 
 break ; 
 words : 
 words : 
 if ( var = = nums ) var . var + = nums , var . var - = nums ; 
 if ( var = = nums ) var . var + = nums , var . var - = nums ; 
 if ( var = = nums ) var . var + = nums , var . var - = nums ; 
 ( ) ; 
 call_func ( var , var ) ; 
 break ; 
 } 
 if ( var . var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 break ; } } 
 } 
 } 
 void func ( ) 
 { 
 char var ; 
 int var , var ; 
 var : var = nums , var = nums ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 while ( nums ) 
 { 
 var = getch ( ) ; 
 switch ( var ) 
 { 
 words : 
 words : 
 printf ( words ) ; 
 var - = nums ; 
 if ( var < nums ) var = nums ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var - nums , var ) ; 
 break ; 
 words : 
 words : 
 printf ( words ) ; 
 var + = nums ; 
 if ( var > nums ) var = nums ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var - nums , var ) ; 
 break ; 
 words : 
 words : 
 if ( var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 goto var ; 
 } 
 if ( var = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 var = nums , var = nums ; 
 while ( nums ) 
 { 
 var = getch ( ) ; 
 switch ( var ) 
 { 
 words : 
 words : 
 printf ( words ) ; 
 var - = nums ; 
 if ( var < nums ) var = nums ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var - nums , var ) ; 
 break ; 
 words : 
 words : 
 printf ( words ) ; 
 var + = nums ; 
 if ( var > nums ) var = nums ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var - nums , var ) ; 
 break ; 
 words : 
 words : 
 if ( var = = nums ) call_func ( nums ) ; 
 if ( var = = nums ) goto var ; 
 } 
 } 
 } 
 } 
 } 
 var : call_func ( nums , nums ) ; 
 } 
 void func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 call_func ( nums ) ; 
 system ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums ) ; 
 } 
 void func ( ) 
 { 
 char var ; 
 int var , var ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void ( ) ; 
 int call_func ( ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 var = nums , var = nums ; 
 while ( nums ) 
 { 
 var = getch ( ) ; 
 switch ( var ) 
 { 
 words : 
 words : 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 var - = nums ; 
 if ( var < nums ) var = nums ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var - nums , var ) ; 
 break ; 
 words : 
 words : 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 var + = nums ; 
 if ( var > nums ) var = nums ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var - nums , var ) ; 
 break ; 
 words : 
 words : 
 if ( var = = nums ) { call_func ( ) ; call_func ( ) ; if ( var . var <= nums ) { call_func ( ) ; call_func ( ) ; ( ) ; } } 
 if ( var = = nums ) 
 { 
 call_func ( ) ; 
 if ( var . var <= nums ) 
 { 
 system ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 } 
 } 
 } 
 } 
 } 
 void func ( ) 
 { 
 void call_func ( ) ; 
 void ( ) ; 
 void call_func ( ) ; 
 int call_func ( data_type var ) ; 
 call_func ( struct_name ( nums ) ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums ) ; 
 if ( call_func ( ) % nums + nums <= nums ) printf ( words , var . var ) ; 
 else if ( ( call_func ( ) % nums + nums ) * nums <= var . var * nums ) 
 printf ( words , var . var , var . var , call_func ( var . var - = var . var ) ) ; 
 else 
 printf ( words , var . var , call_func ( var . var - var . var ) , call_func ( var . var - = call_func ( var . var - var . var ) ) ) ; 
 ( ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 if ( var . var <= nums ) 
 { 
 var . var + = var . var ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var ) ; 
 if ( var . var >= var . var ) 
 var . var + = nums , var . var + = nums , var . var - = var . var , var . var + = nums * ( var . var - nums ) , var . var = var . var , printf ( words ) ; 
 ( ) ; 
 goto var ; 
 } 
 call_func ( nums ) ; 
 call_func ( nums , nums ) ; 
 if ( ( call_func ( ) % nums + nums ) * nums <= var . var * nums ) printf ( words ) ; 
 else if ( call_func ( ) % nums + nums <= nums ) 
 printf ( words , var . var , var . var , var . var , call_func ( var . var - = var . var ) ) ; 
 else 
 printf ( words , var . var , call_func ( var . var - var . var ) , var . var , call_func ( var . var - = call_func ( var . var - var . var ) ) ) ; 
 ( ) ; 
 call_func ( nums , nums ) ; 
 if ( var . var <= nums ) 
 { 
 system ( words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 } 
 var : ; 
 } 
 int func ( ) 
 { 
 if ( func ( ) % nums = = nums ) 
 { 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 } 
 else if ( ( func ( ) % nums + nums ) * nums <= var . var * nums ) 
 { 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 } 
 else if ( func ( ) % nums + nums <= nums ) 
 { 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var , var . var , var . var , call_func ( var . var - = var . var ) ) ; 
 ( ) ; 
 } 
 else 
 { 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words , var . var , call_func ( var . var - var . var ) , var . var , call_func ( var . var - = call_func ( var . var - var . var ) ) ) ; 
 ( ) ; 
 } 
 return var . var ; 
 } 
 void func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 #define var var 
 #define var var 
 #define var nums 
 #define var nums 
 #define var var 
 #define var var 
 int var [ nums ] [ nums ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , 
 nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , 
 nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , 
 nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , 
 nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , 
 nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , 
 nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , 
 nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , 
 nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , 
 nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , 
 nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , 
 nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , 
 nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , 
 nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , 
 nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } ; 
 struct 
 { 
 int var ; 
 int var ; 
 } ; 
 struct struct_name struct_var , var [ nums ] ; 
 int var = nums ; 
 int var [ nums ] [ nums ] ; 
 int var = nums ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void ( ) ; 
 void call_func ( ) ; 
 void call_func ( struct struct_name * var ) ; 
 void call_func ( struct struct_name * var ) ; 
 void call_func ( ) ; 
 void call_func ( data_type var , data_type var ) ; 
 void call_func ( ) ; 
 void ( ) 
 { 
 int var , var ; 
 while ( nums ) 
 { var = call_func ( nums ) ; 
 while ( ! func ( ) ) 
 { 
 call_func ( var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 call_func ( var [ var ] . var * nums + nums , var [ var ] . var * nums + nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 if ( var [ var ] . var = = var . var & & var [ var ] . var = = var . var ) 
 var = nums ; 
 call_func ( ) ; 
 if ( var ) 
 break ; 
 } 
 if ( var ) 
 break ; 
 var = call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums + var . var * nums , nums + var . var * nums , nums ) ; 
 if ( var = = var ) 
 break ; 
 else if ( var = = var ) 
 { 
 var . var - - ; 
 if ( var [ var . var ] [ var . var ] = = nums ) 
 var . var + + ; 
 else if ( var [ var . var ] [ var . var ] = = nums ) 
 call_func ( var . var , var . var ) ; 
 } 
 else if ( var = = var ) 
 { 
 var . var + + ; 
 if ( var [ var . var ] [ var . var ] = = nums ) 
 var . var - - ; 
 else if ( var [ var . var ] [ var . var ] = = nums ) 
 call_func ( var . var , var . var ) ; 
 } 
 else if ( var = = var ) 
 { 
 var . var + + ; 
 if ( var [ var . var ] [ var . var ] = = nums ) 
 var . var - - ; 
 else if ( var [ var . var ] [ var . var ] = = nums ) 
 call_func ( var . var , var . var ) ; 
 } 
 else if ( var = = var ) 
 { 
 var . var - - ; 
 if ( var [ var . var ] [ var . var ] = = nums ) 
 var . var + + ; 
 else if ( var [ var . var ] [ var . var ] = = nums ) 
 call_func ( var . var , var . var ) ; 
 } 
 if ( var = = nums ) 
 break ; 
 call_func ( var ) ; 
 call_func ( nums + var . var * nums , nums + var . var * nums , nums ) ; 
 call_func ( ) ; 
 if ( var ) 
 break ; 
 } 
 } 
 void func ( struct struct_name * var ) 
 { 
 int var ; 
 call_func ( nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 call_func ( var [ var ] . var * nums + nums , var [ var ] . var * nums + nums , nums ) ; 
 call_func ( var ) ; 
 } 
 void func ( ) 
 { 
 call_func ( ) ; 
 call_func ( nums , nums , nums ) ; 
 while ( ! func ( ) ) 
 { 
 call_func ( call_func ( ) % nums + nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 } 
 } 
 void func ( ) 
 { 
 call_func ( ) ; 
 call_func ( nums , nums , nums ) ; 
 while ( ! func ( ) ) 
 { 
 call_func ( call_func ( ) % nums + nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 } 
 } 
 void func ( data_type var , data_type var ) 
 { 
 call_func ( nums ) ; 
 call_func ( nums + var * nums , nums + var * nums , nums ) ; 
 var + + ; 
 var [ var ] [ var ] = nums ; 
 } 
 void func ( ) 
 { 
 int var ; 
 for ( var = nums ; var < nums ; var + + ) 
 if ( var [ var ] . var = = var . var & & var [ var ] . var = = var . var ) 
 var = nums ; 
 } 
 void func ( struct struct_name * var ) 
 { 
 int var , var ; 
 call_func ( ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var . var = = var [ var ] . var & & ( var [ var ] . var + nums ) = = var . var ) 
 var [ var ] . var + + ; 
 else if ( var . var = = var [ var ] . var & & ( var [ var ] . var - nums ) = = var . var ) 
 var [ var ] . var - - ; 
 else if ( var . var = = var [ var ] . var & & ( var [ var ] . var + nums ) = = var . var ) 
 var [ var ] . var + + ; 
 else if ( var . var = = var [ var ] . var & & ( var [ var ] . var - nums ) = = var . var ) 
 var [ var ] . var - - ; 
 else 
 { 
 var : 
 var [ var ] [ nums ] = call_func ( ) % nums + nums ; 
 if ( var [ var ] [ nums ] = = nums & & var [ var ] [ nums ] = = nums | | var [ var ] [ nums ] = = nums & & var [ var ] [ nums ] = = nums ) 
 goto var ; 
 if ( var [ var ] [ nums ] = = nums & & var [ var ] [ nums ] = = nums | | var [ var ] [ nums ] = = nums & & var [ var ] [ nums ] = = nums ) 
 goto var ; 
 var [ var ] [ nums ] = var [ var ] [ nums ] ; 
 if ( var [ var ] [ nums ] = = nums ) 
 { 
 var [ var ] . var - - ; 
 if ( var [ var [ var ] . var ] [ var [ var ] . var ] = = nums ) 
 { 
 var [ var ] . var + + ; 
 goto var ; 
 } 
 } 
 else if ( var [ var ] [ nums ] = = nums ) 
 { 
 var [ var ] . var + + ; 
 if ( var [ var [ var ] . var ] [ var [ var ] . var ] = = nums ) 
 { 
 var [ var ] . var - - ; 
 goto var ; 
 } 
 } 
 else if ( var [ var ] [ nums ] = = nums ) 
 { 
 var [ var ] . var + + ; 
 if ( var [ var [ var ] . var ] [ var [ var ] . var ] = = nums ) 
 { 
 var [ var ] . var - - ; 
 goto var ; 
 } 
 } 
 else if ( var [ var ] [ nums ] = = nums ) 
 { 
 var [ var ] . var - - ; 
 if ( var [ var [ var ] . var ] [ var [ var ] . var ] = = nums ) 
 { 
 var [ var ] . var + + ; 
 goto var ; 
 } 
 } 
 } 
 } 
 } 
 void func ( ) 
 { 
 int var , var ; 
 call_func ( nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 for ( var = nums ; var < nums ; var + + ) 
 if ( var [ var ] [ var ] = = nums ) 
 { 
 call_func ( var , nums ) ; 
 call_func ( nums + var * nums - nums , nums + var * nums + nums , nums + var * nums + nums , nums + var * nums - nums ) ; 
 } 
 else if ( var [ var ] [ var ] = = nums ) 
 { 
 call_func ( var ) ; 
 call_func ( nums + var * nums , nums + var * nums , nums ) ; 
 } 
 else if ( var [ var ] [ var ] = = nums ) 
 { 
 call_func ( var ) ; 
 call_func ( nums + var * nums , nums + var * nums , nums ) ; 
 } 
 else if ( var [ var ] [ var ] = = nums ) 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums + var * nums , nums + var * nums , nums ) ; 
 } 
 var . var = nums ; var . var = nums ; 
 var [ nums ] . var = nums ; var [ nums ] . var = nums ; 
 var [ nums ] . var = nums ; var [ nums ] . var = nums ; 
 var [ nums ] . var = nums ; var [ nums ] . var = nums ; 
 var [ nums ] . var = nums ; var [ nums ] . var = nums ; 
 var [ nums ] . var = nums ; var [ nums ] . var = nums ; 
 } 
 void func ( ) 
 { 
 call_func ( nums ) ; 
 call_func ( var , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 getch ( ) ; 
 } 
 func ( ) 
 { 
 int var = var , var ; 
 int var ; 
 call_func ( & var , & var , words ) ; 
 call_func ( ) ; 
 var = call_func ( nums ) ; 
 if ( var = = var ) 
 call_func ( nums ) ; 
 else 
 { 
 call_func ( ) ; 
 call_func ( ) ; 
 ( ) ; 
 if ( var = = nums ) 
 { 
 call_func ( ) ; 
 getch ( ) ; 
 } 
 if ( var ) 
 { 
 call_func ( ) ; 
 getch ( ) ; 
 } 
 } 
 call_func ( ) ; 
 } 
 
 var call_func ( var , words ) 
 #define var words 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 var var ; 
 var var ; 
 struct struct_name struct_var ; 
 struct struct_name struct_var ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 struct struct_name struct_var ; 
 struct struct_name struct_var ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 void call_func ( ) ; 
 void call_func ( data_type var , data_type * * var ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void func ( ) 
 { 
 
 var = var ; 
 var = var ; 
 var = var ; 
 var = var ; 
 var = var ; 
 var = var ; 
 
 var = var ; 
 var = call_func ( var ) ; 
 var = var ; 
 var = var ; 
 var = var ; 
 var = var ; 
 } 
 void func ( data_type var , data_type * * var ) 
 { 
 int var ; 
 
 if ( var <= nums ) 
 { 
 call_func ( ) ; 
 return ; 
 } 
 
 if ( var [ nums ] [ nums ] = = words & & var [ nums ] [ nums ] = = words ) 
 { 
 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] [ nums ] = = words ) 
 { 
 switch ( func ( var [ var ] [ nums ] ) ) 
 { 
 
 case words : 
 var = var ; 
 break ; 
 
 case words : 
 if ( call_func ( var [ var ] ) > nums ) 
 var = call_func ( & var [ var ] [ nums ] ) ; 
 break ; 
 
 case words : 
 if ( call_func ( var [ var ] ) > nums ) 
 var = call_func ( & var [ var ] [ nums ] ) ; 
 break ; 
 
 case words : 
 var = call_func ( & var [ var ] [ nums ] ) ; 
 break ; 
 
 default : 
 { 
 call_func ( ) ; 
 call_func ( - nums ) ; 
 } 
 break ; 
 } 
 } 
 } 
 return ; 
 } 
 
 if ( var [ nums ] [ nums ] = = words & & var [ nums ] [ nums ] = = words ) 
 { 
 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] [ nums ] = = words ) 
 { 
 switch ( func ( var [ var ] [ nums ] ) ) 
 { 
 
 case words : 
 var = var ; 
 break ; 
 
 case words : 
 if ( call_func ( var [ var ] ) > nums ) 
 var = call_func ( & var [ var ] [ nums ] ) ; 
 break ; 
 
 case words : 
 if ( call_func ( var [ var ] ) > nums ) 
 var = call_func ( & var [ var ] [ nums ] ) ; 
 break ; 
 
 case words : 
 if ( call_func ( var [ var ] ) > nums ) 
 var = call_func ( & var [ var ] [ nums ] ) ; 
 break ; 
 
 case words : 
 var = var ; 
 break ; 
 
 case words : 
 var = call_func ( & var [ var ] [ nums ] ) ; 
 break ; 
 
 default : 
 call_func ( ) ; 
 break ; 
 } 
 } 
 } 
 
 } 
 return ; 
 } 
 void func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 } 
 void func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 call_func ( - nums ) ; 
 } 
 void func ( ) 
 { 
 
 char * var = words ; 
 var var = var ; 
 int var = sizeof ( var ) ; 
 int var ; 
 var var = nums ; 
 
 
 var = call_func ( var , var , nums , NULL , nums , var ) ; 
 
 if ( var = = var ) 
 { 
 printf ( words , call_func ( ) ) ; 
 call_func ( ) ; 
 return ; 
 } 
 
 
 var . var = var ; 
 var . var . var = var ; 
 var . var = call_func ( var ) ; 
 
 
 if ( func ( var , var , var , ( data_type var * ) & var , 
 sizeof ( var ) ) = = var ) 
 
 { 
 printf ( words , call_func ( ) ) ; 
 call_func ( var ) ; 
 call_func ( ) ; 
 return ; 
 } 
 
 while ( var < var ) 
 { 
 
 call_func ( nums ) ; 
 
 var = call_func ( var , var , nums , nums , ( struct struct_name * ) & var , var ) ; 
 
 if ( var = = var ) 
 printf ( words , call_func ( ) ) ; 
 
 else 
 { 
 printf ( words , var ) ; 
 } 
 var + + ; 
 } 
 
 call_func ( var ) ; 
 call_func ( ) ; 
 } 
 void func ( ) 
 { 
 var var = var ; 
 int var ; 
 char var [ nums ] ; 
 var var = nums ; 
 
 var . var = var ; 
 var . var . var = nums ; 
 var . var = call_func ( var ) ; 
 
 var . var = var ; 
 var . var . var = var ; 
 var . var = call_func ( var ) ; 
 
 var = sizeof ( var ) ; 
 
 var = call_func ( var , var , nums ) ; 
 
 if ( var = = var ) 
 { 
 printf ( words , call_func ( ) ) ; 
 call_func ( ) ; 
 return ; 
 } 
 
 if ( func ( var , var , var , ( data_type var * ) & var , 
 sizeof ( var ) ) = = var ) 
 
 { 
 printf ( words , call_func ( ) ) ; 
 call_func ( var ) ; 
 call_func ( ) ; 
 return ; 
 } 
 
 if ( func ( var , ( struct struct_name * ) & var , 
 sizeof ( struct struct_name ) ) = = var ) 
 
 { 
 printf ( words , call_func ( ) ) ; 
 call_func ( var ) ; 
 call_func ( ) ; 
 return ; 
 } 
 
 while ( var < var ) 
 { 
 call_func ( var , var , nums , nums , ( struct var var * ) & var , ( data_type var * ) & var ) ; 
 
 call_func ( nums ) ; 
 
 printf ( words , var ) ; 
 
 call_func ( var , nums ) ; 
 var + + ; 
 } 
 
 call_func ( var ) ; 
 call_func ( ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 
 if ( ( var = func ( var , var , nums , NULL , nums , 
 var 
 | var 
 | var ) ) = = var ) 
 { 
 printf ( words , call_func ( ) ) ; 
 call_func ( ) ; 
 return ; 
 } 
 
 
 var . var = var ; 
 var . var = call_func ( var ) ; 
 var . var . var = var ; 
 
 
 if ( func ( var , ( struct struct_name * ) & var , 
 sizeof ( var ) ) = = var ) 
 
 { 
 printf ( words , call_func ( ) ) ; 
 call_func ( var ) ; 
 call_func ( ) ; 
 return ; 
 } 
 
 var . var = var ; 
 var . var = call_func ( var ) ; 
 var . var . var = var ; 
 
 var = nums ; 
 
 if ( func ( var , var , var , 
 ( data_type * ) & var , sizeof ( data_type ) ) = = var ) 
 
 { 
 printf ( words , call_func ( ) ) ; 
 call_func ( var ) ; 
 call_func ( ) ; 
 return ; 
 } 
 
 if ( var ) 
 { 
 
 var = nums ; 
 if ( func ( var , var , var , 
 ( data_type * ) & var , sizeof ( var ) ) = = var ) 
 
 { 
 printf ( words , 
 call_func ( ) ) ; 
 call_func ( var ) ; 
 call_func ( ) ; 
 return ; 
 } 
 } 
 
 
 if ( ( var = func ( var , ( var * ) & var , 
 sizeof ( var ) , NULL , NULL , NULL , NULL , 
 var ) ) = = var ) 
 
 { 
 printf ( words , call_func ( ) ) ; 
 call_func ( var ) ; 
 call_func ( ) ; 
 return ; 
 } 
 } 
 void func ( ) 
 { 
 
 var var [ var ] ; 
 var var ; 
 int var ; 
 call_func ( ) ; 
 
 for ( var = nums ; var < var ; var + + ) 
 { 
 
 call_func ( var , words , var ) ; 
 var = call_func ( var , ( data_type * ) var , call_func ( var ) , nums , 
 ( struct struct_name * ) & var , sizeof ( var ) ) ; 
 
 if ( var = = var ) 
 { 
 printf ( words , call_func ( ) ) ; 
 call_func ( var ) ; 
 call_func ( var ) ; 
 call_func ( ) ; 
 return ; 
 } 
 
 else 
 printf ( words , var ) ; 
 call_func ( nums ) ; 
 } 
 
 call_func ( var ) ; 
 call_func ( ) ; 
 } 
 void func ( ) 
 { 
 var var ; 
 struct struct_name struct_var ; 
 var var [ var ] ; 
 int var ; 
 int var = sizeof ( struct ) ; 
 call_func ( ) ; 
 
 for ( var = nums ; var < var ; var + + ) 
 { 
 
 if ( ( var = func ( var , var , var , nums , 
 ( struct struct_name * ) & var , & var ) ) = = var ) 
 
 { 
 printf ( words , call_func ( ) ) ; 
 call_func ( var ) ; 
 call_func ( var ) ; 
 call_func ( ) ; 
 return ; 
 } 
 
 var [ var ] = nums ; 
 printf ( words % words , var , call_func ( var . var ) ) ; 
 } 
 
 call_func ( var ) ; 
 call_func ( ) ; 
 } 
 int func ( data_type var , data_type * * var ) 
 { 
 var var ; 
 call_func ( ) ; 
 call_func ( var , var ) ; 
 
 if ( func ( call_func ( nums , nums ) , & var ) ! = nums ) 
 { 
 printf ( words ) ; 
 return - nums ; 
 } 
 
 if ( var ) 
 { 
 
 if ( var ) 
 { 
 call_func ( ) ; 
 return nums ; 
 } 
 
 else 
 { 
 call_func ( ) ; 
 return nums ; 
 } 
 } 
 
 if ( var ) 
 { 
 
 if ( var ) 
 { 
 call_func ( ) ; 
 return nums ; 
 } 
 
 else 
 { 
 call_func ( ) ; 
 return nums ; 
 } 
 } 
 return nums ; 
 } 
 #define var nums 
 #define var nums 
 #define var nums 
 typedef struct 
 { 
 int var ; 
 struct struct_name * struct_var ; 
 } var ; 
 typedef struct 
 { 
 char var ; 
 struct struct_name * struct_var ; 
 } var ; 
 var * func ( var * var , data_type var ) 
 { 
 var * var ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 var - > var = var ; 
 var - > var = var ; 
 var = var ; 
 return var ; 
 } 
 var * func ( var * var ) 
 { 
 var * var ; 
 var = var ; 
 var = var - > var ; 
 free ( var ) ; 
 return var ; 
 } 
 int func ( var * var ) 
 { 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 return nums ; 
 } 
 
 return var - > var ; 
 } 
 var * func ( var * var , data_type * var ) 
 { 
 * var = call_func ( var ) ; 
 var = call_func ( var ) ; 
 return var ; 
 } 
 int func ( var * var ) 
 { 
 if ( var = = NULL ) 
 return nums ; 
 return nums ; 
 } 
 var * func ( var * var , data_type var ) 
 { 
 var * var ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 var - > var = var ; 
 var - > var = var ; 
 var = var ; 
 return var ; 
 } 
 var * func ( var * var ) 
 { 
 var * var ; 
 var = var ; 
 var = var - > var ; 
 free ( var ) ; 
 return var ; 
 } 
 char func ( var * var ) 
 { 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 return nums ; 
 } 
 return var - > var ; 
 } 
 var * func ( var * var , data_type * var ) 
 { 
 * var = call_func ( var ) ; 
 var = call_func ( var ) ; 
 return var ; 
 } 
 int func ( var * var ) 
 { 
 if ( var = = NULL ) 
 return nums ; 
 else 
 return nums ; 
 } 
 void func ( ) 
 { 
 int var , var ; 
 call_func ( ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 var = call_func ( nums ) ; 
 printf ( words , var ) ; 
 } 
 } 
 void func ( data_type * var , data_type * var ) 
 { 
 var * var = NULL ; 
 int var = nums , var = nums ; 
 char var ; 
 while ( var [ var ] ! = words ) 
 { 
 
 if ( func ( var [ var ] ) ) 
 { 
 do { 
 var [ var ] = var [ var ] ; 
 var + + ; var + + ; 
 } while ( var [ var ] ! = words ) ; 
 var [ var ] = words ; 
 var + + ; 
 } 
 
 if ( var [ var ] = = words ) 
 var = call_func ( var , var [ var ] ) ; 
 
 if ( var [ var ] = = words ) 
 { 
 var = call_func ( var , & var ) ; 
 while ( var ! = words ) 
 { 
 var [ var ] = var ; 
 var + + ; 
 var = call_func ( var , & var ) ; 
 } 
 } 
 
 if ( var [ var ] = = words | | var [ var ] = = words ) 
 { 
 if ( ! func ( var ) ) 
 { 
 var = call_func ( var ) ; 
 while ( var ! = words ) 
 { 
 var [ var ] = var ; 
 var + + ; 
 var = call_func ( var ) ; 
 if ( call_func ( var ) ) 
 break ; 
 else 
 var = call_func ( var ) ; 
 } 
 } 
 var = call_func ( var , var [ var ] ) ; 
 } 
 
 if ( var [ var ] = = words | | var [ var ] = = words ) 
 { 
 if ( ! func ( var ) ) 
 { 
 var = call_func ( var ) ; 
 while ( var = = words | | var = = words ) 
 { 
 var [ var ] = var ; 
 var + + ; 
 var = call_func ( var ) ; 
 if ( call_func ( var ) ) 
 break ; 
 else 
 var = call_func ( var ) ; 
 } 
 } 
 var = call_func ( var , var [ var ] ) ; 
 } 
 var + + ; 
 } 
 while ( ! call_func ( var ) ) 
 var = call_func ( var , & var [ var + + ] ) ; 
 var [ var ] = words ; 
 } 
 int func ( data_type * struct_name ) 
 { 
 var * var = NULL ; 
 int var , var , var , var , var ; 
 var = nums ; 
 while ( [ var ] ! = words ) 
 { 
 if ( func ( struct_name [ var ] ) ) 
 { 
 var = nums ; 
 do { 
 var = nums * var + [ var ] - words ; 
 var + + ; 
 } while ( [ var ] ! = words ) ; 
 var = call_func ( var , var ) ; 
 } 
 if ( [ var ] = = words ) 
 { 
 var = call_func ( var , & var ) ; 
 var = call_func ( var , & var ) ; 
 var = var + var ; 
 var = call_func ( var , var ) ; 
 } 
 if ( [ var ] = = words ) 
 { 
 var = call_func ( var , & var ) ; 
 var = call_func ( var , & var ) ; 
 var = var - var ; 
 var = call_func ( var , var ) ; 
 } 
 if ( [ var ] = = words ) 
 { 
 var = call_func ( var , & var ) ; 
 var = call_func ( var , & var ) ; 
 var = var * var ; 
 var = call_func ( var , var ) ; 
 } 
 if ( [ var ] = = words ) 
 { 
 var = call_func ( var , & var ) ; 
 var = call_func ( var , & var ) ; 
 var = var / var ; 
 var = call_func ( var , var ) ; 
 } 
 var + + ; 
 } 
 var = call_func ( var , & var ) ; 
 return var ; 
 } 
 int func ( data_type * var ) 
 { 
 char var ; 
 int var = nums ; 
 while ( var [ var ] ! = words ) 
 { 
 if ( func ( var [ var ] ) ) 
 { 
 if ( func ( var [ var + nums ] ) ) 
 { 
 var + + ; 
 continue ; 
 } 
 if ( var [ var + nums ] ! = words ) 
 { 
 printf ( words ) ; 
 return nums ; 
 } 
 var + + ; 
 } 
 var + + ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 char var [ var ] , var [ var ] , var ; 
 int var , var ; 
 call_func ( ) ; 
 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( nums ) 
 { 
 printf ( words ) ; 
 call_func ( ) ; 
 printf ( words ) ; 
 do { 
 printf ( words ) ; 
 
 scanf ( words , var , & var ) ; 
 
 } while ( ! call_func ( var ) ) ; 
 
 printf ( words , var ) ; 
 
 call_func ( var , var ) ; 
 
 var = call_func ( var ) ; 
 printf ( words , var , var ) ; 
 if ( var = = nums ) 
 printf ( words ) ; 
 else printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = words | | var = = words ) 
 break ; 
 } 
 return nums ; 
 } 
 typedef struct 
 { 
 int var ; 
 int var ; 
 } var ; 
 var var ; 
 struct struct_name * struct_var , var , var ; 
 int func ( var var ) 
 { 
 var var ; 
 var . var = var . var + nums ; var . var = var . var + nums ; 
 call_func ( var . var , var . var ) ; printf ( words , nums , nums ) ; 
 call_func ( var . var , var . var + nums ) ; printf ( words , nums , nums ) ; 
 var . var + = nums ; 
 call_func ( var . var , var . var ) ; printf ( words , nums , nums ) ; 
 call_func ( var . var , var . var + nums ) ; printf ( words , nums , nums ) ; 
 return nums ; 
 } 
 int func ( var var ) 
 { 
 int var = nums ; 
 for ( ; var < nums ; var + + ) 
 { 
 call_func ( var . var + nums , var . var + var ) ; 
 if ( var = = nums | | var = = nums ) 
 printf ( words , nums , nums , nums , nums , nums , nums ) ; 
 else 
 printf ( words , nums , words , nums ) ; 
 } 
 return nums ; 
 } 
 int func ( var var ) 
 { 
 int var = nums ; 
 for ( ; var < nums ; var + + ) 
 { 
 call_func ( var . var + nums , var . var + var ) ; 
 printf ( words , words , nums ) ; 
 } 
 return nums ; 
 } 
 int func ( var var ) 
 { 
 int var = nums ; 
 for ( ; var < nums ; var + + ) 
 { 
 call_func ( var . var + nums , var . var + var ) ; 
 if ( var = = nums | | var = = nums | | var = = nums ) 
 printf ( words , nums , nums , nums , nums , nums , nums ) ; 
 else if ( var > nums & & var < nums ) 
 printf ( words , words , nums ) ; 
 else 
 printf ( words , nums ) ; 
 } 
 return nums ; 
 } 
 int func ( var var ) 
 { 
 int var = nums ; 
 for ( ; var < nums ; var + + ) 
 { 
 call_func ( var . var + nums , var . var + var ) ; 
 if ( var = = nums | | var = = nums | | var = = nums ) 
 printf ( words , nums , nums , nums , nums , nums , nums ) ; 
 else 
 printf ( words , words , nums ) ; 
 } 
 return nums ; 
 } 
 int func ( var var ) 
 { 
 int var = nums ; 
 for ( ; var < nums ; var + + ) 
 { 
 call_func ( var . var + nums , var . var + var ) ; 
 if ( var < nums ) printf ( words , nums , words , nums ) ; 
 else if ( var = = nums ) 
 printf ( words , nums , nums , nums , nums , nums , nums ) ; 
 else printf ( words , words , nums ) ; 
 } 
 return nums ; 
 } 
 int func ( var var ) 
 { 
 int var = nums ; 
 for ( ; var < nums ; var + + ) 
 { 
 call_func ( var . var + nums , var . var + var ) ; 
 if ( var = = nums | | var = = nums | | var = = nums ) 
 printf ( words , nums , nums , nums , nums , nums , nums ) ; 
 else if ( var > nums & & var < nums ) 
 printf ( words , nums ) ; 
 else 
 printf ( words , words , nums ) ; 
 } 
 return nums ; 
 } 
 int func ( var var ) 
 { 
 int var = nums ; 
 for ( ; var < nums ; var + + ) 
 { 
 call_func ( var . var + nums , var . var + var ) ; 
 if ( var = = nums | | var = = nums | | var = = nums ) 
 printf ( words , nums , nums , nums , nums , nums , nums ) ; 
 else if ( var > nums & & var < nums ) 
 printf ( words , nums ) ; 
 else 
 printf ( words , nums , words , nums ) ; 
 } 
 return nums ; 
 } 
 int func ( var var ) 
 { 
 int var = nums ; 
 for ( ; var < nums ; var + + ) 
 { 
 call_func ( var . var + nums , var . var + var ) ; 
 if ( var = = nums ) printf ( words , nums , nums , nums , nums , nums , nums ) ; 
 else printf ( words , words , nums ) ; 
 } 
 return nums ; 
 } 
 int func ( var var ) 
 { 
 int var = nums ; 
 for ( ; var < nums ; var + + ) 
 { 
 call_func ( var . var + nums , var . var + var ) ; 
 if ( var = = nums | | var = = nums | | var = = nums ) 
 printf ( words , nums , nums , nums , nums , nums , nums ) ; 
 else printf ( words , nums , words , nums ) ; 
 } 
 return nums ; 
 } 
 int func ( var var ) 
 { 
 int var = nums ; 
 for ( ; var < nums ; var + + ) 
 { 
 call_func ( var . var + nums , var . var + var ) ; 
 if ( var = = nums | | var = = nums | | var = = nums ) 
 printf ( words , nums , nums , nums , nums , nums , nums ) ; 
 else if ( var > nums & & var < nums ) 
 printf ( words , nums , words , nums ) ; 
 else 
 printf ( words , words , nums ) ; 
 } 
 return nums ; 
 } 
 int func ( var var ) 
 { 
 int var = nums ; 
 for ( ; var < nums ; var + + ) 
 call_func ( var . var , var . var + var ) ; printf ( words , words ) ; 
 return nums ; 
 } 
 int func ( var var , data_type var ) 
 { 
 int var , var ; 
 var var ; 
 var = var / nums , var = var % nums ; 
 var . var = var . var + nums , var . var = var . var ; 
 switch ( var ) 
 { 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 } 
 switch ( var ) 
 { 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 var var , var , var , var , var ; 
 var . var = nums , var . var = nums , var . var = nums ; 
 var . var = var . var = var . var = nums ; 
 var . var = nums , var . var = nums ; 
 var . var = var . var = nums ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( var ) ; 
 var = ( nums ) ; 
 var = call_func ( & var ) ; 
 var = * var ; 
 call_func ( var , var . var ) ; 
 call_func ( var ) ; 
 call_func ( var , var . var ) ; 
 call_func ( var ) ; 
 call_func ( var , var . var ) ; 
 while ( nums ) 
 { 
 var = ( nums ) ; 
 var = call_func ( & var ) ; 
 var = * var ; 
 if ( var . var ! = var . var ) 
 { 
 var = var ; 
 call_func ( ) ; 
 call_func ( var , var . var ) ; 
 call_func ( var ) ; 
 call_func ( var , var . var ) ; 
 call_func ( var ) ; 
 call_func ( var , var . var ) ; 
 } 
 if ( call_func ( nums ) = = nums ) continue ; 
 else call_func ( nums ) ; 
 } 
 return nums ; 
 } 
 #define var nums 
 #define var nums 
 #define var var 
 #define var nums 
 struct 
 { int var ; 
 int var ; 
 int var ; 
 } var [ nums ] [ nums ] ; 
 int var ; 
 int var ; 
 int var = nums ; 
 int var = nums , var = nums ; 
 int var = nums , var = nums ; 
 int var , var ; 
 void func ( data_type var , data_type var ) 
 { 
 int var = var - nums ; 
 int var = var - nums ; 
 call_func ( nums ) ; 
 call_func ( var , var , var + var , var ) ; 
 call_func ( var , var + nums , var + var , var + nums ) ; 
 call_func ( var , var , var , var + var ) ; 
 call_func ( var + nums , var , var + nums , var + var ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var + var , var + var , var + var ) ; 
 call_func ( var + nums , var + var - nums , var + var , var + var - nums ) ; 
 call_func ( var + var - nums , var + nums , var + var - nums , var + var ) ; 
 call_func ( var + var , var + nums , var + var , var + var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var + nums , var + nums , var + var - nums , var + var - nums ) ; 
 } 
 void func ( data_type var , data_type var ) 
 { int var , var ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 { var [ var ] [ var ] . var = nums ; 
 var [ var ] [ var ] . var = nums + var * nums ; 
 var [ var ] [ var ] . var = nums + var * nums ; 
 call_func ( nums + var * nums , nums + var * nums ) ; 
 } 
 var = nums , var = nums ; 
 } 
 void func ( data_type var , data_type var ) 
 { 
 call_func ( var , var ) ; 
 } 
 void func ( data_type var , data_type var ) 
 { 
 var = var ; 
 var = var ; 
 var = nums ; 
 call_func ( nums ) ; 
 } 
 void func ( data_type var , data_type var ) 
 { 
 var = var ; 
 var = var ; 
 var = nums ; 
 call_func ( nums ) ; 
 } 
 void func ( data_type var , data_type var ) 
 { 
 var = var ; 
 var = var ; 
 var = nums ; 
 call_func ( nums ) ; 
 } 
 void func ( data_type var , data_type var ) 
 { 
 var = var ; 
 var = var ; 
 var = var ; 
 call_func ( nums ) ; 
 } 
 void func ( ) 
 { 
 var = nums ; 
 call_func ( nums ) ; 
 var = var ; 
 var = var ; 
 } 
 void func ( ) 
 { 
 int var ; 
 int var ; 
 var = nums ; 
 var = var ; 
 if ( var = = var & & var = = nums ) 
 { 
 call_func ( ) ; 
 if ( var ! = var ) 
 if ( var + nums < nums ) 
 var = nums ; 
 } 
 if ( var ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( var , var , var + var , var + var ) ; 
 call_func ( var , var ) ; 
 } 
 } 
 void func ( data_type var , data_type var ) 
 { int var ; 
 int var = var - var ; 
 int var , var , var = nums ; 
 call_func ( ( var var ) struct_name ( nums ) ) ; 
 do 
 { 
 var = call_func ( ) % nums ; 
 } while ( var <= nums | | var >= nums ) ; 
 while ( var ) 
 { 
 call_func ( ) ; 
 if ( var <= ( nums - var ) ) 
 var * = ( - nums ) ; 
 if ( var >= ( nums - var ) | | var <= ( nums - var ) ) 
 var * = ( - nums ) ; 
 call_func ( var ) ; 
 call_func ( var + = var , var - = var , var - nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( var , var , var - nums ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 if ( var < var * var & & var [ var ] [ var ] . var = = nums & & var >= var [ var ] [ var ] . var & & var <= var [ var ] [ var ] . var + nums 
 & & var >= var [ var ] [ var ] . var & & var <= var [ var ] [ var ] . var + nums ) 
 { var + + ; 
 var * = ( - nums ) ; 
 var [ var ] [ var ] . var = nums ; 
 call_func ( nums , nums ) ; 
 call_func ( var [ var ] [ var ] . var , var [ var ] [ var ] . var , var [ var ] [ var ] . var + nums , var [ var ] [ var ] . var + nums ) ; 
 } 
 if ( var = = var | | var = = var - nums | | var = = var - nums & & var = = ( var + nums + nums ) | | var = = ( var + nums + nums ) | | var = = ( var + nums ) ) 
 if ( var >= ( var - var ) ) 
 { var * = ( - nums ) ; 
 var * = ( - nums ) ; 
 } 
 if ( var > var & & var < ( var + nums ) ) 
 if ( var >= ( var - var ) ) 
 var * = ( - nums ) ; 
 if ( var = = var * var ) 
 { call_func ( nums ) ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 break ; 
 } 
 if ( var > var ) 
 { call_func ( nums ) ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 break ; 
 } 
 } 
 var = nums , var = nums ; 
 var = nums , var = nums ; 
 } 
 void func ( ) 
 { 
 int var ; 
 char * [ nums ] = { words , words , words , words , words } ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 call_func ( nums , nums + var * nums , struct_name [ var ] ) ; 
 } 
 void func ( data_type var ) 
 { 
 int var ; 
 char * [ nums ] = { words , words , words , words } ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 call_func ( nums , nums + var * nums , struct_name [ var ] ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums + var * nums , struct_name [ var ] ) ; 
 } 
 void func ( ) 
 { 
 void call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( ) ; 
 var = nums , var = nums ; 
 call_func ( var ) ; 
 do 
 { 
 if ( func ( nums ) ) 
 { 
 var = call_func ( nums ) ; 
 switch ( var ) 
 { 
 case var : 
 { 
 var + + ; var = var % nums ; 
 call_func ( var ) ; 
 break ; 
 } 
 case var : 
 { 
 var - - ; 
 var = ( var + nums ) % nums ; 
 call_func ( var ) ; 
 break ; 
 } 
 } 
 } 
 } while ( var ! = var ) ; 
 call_func ( ) ; 
 } 
 void func ( ) 
 { 
 switch ( var ) 
 { 
 case nums : 
 call_func ( ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var , var ) ; 
 call_func ( nums , var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( ) ; 
 break ; 
 case nums : { 
 call_func ( ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var , var ) ; 
 call_func ( nums , var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( ) ; 
 break ; } 
 case nums : { 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( ) ; 
 break ; } 
 case nums : call_func ( ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 } 
 } 
 void func ( ) 
 { int var = var , var ; 
 call_func ( & var , & var , words ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 } 
 int var [ nums ] [ nums ] ; 
 int var = nums , var = nums ; 
 void func ( ) 
 { 
 int var , var , var ; 
 call_func ( ( var ) struct_name ( NULL ) ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var = call_func ( ) % nums ; 
 if ( var > nums ) 
 { 
 var [ var - nums ] [ var - nums ] = nums ; 
 } else 
 { 
 var [ var - nums ] [ var - nums ] = nums ; 
 } 
 } 
 var [ nums ] [ nums ] = nums ; 
 var [ var - nums ] [ var - nums ] = nums ; 
 } 
 typedef struct 
 { 
 int var ; 
 int var ; 
 struct struct_name * struct_var ; 
 } , * var ; 
 void func ( struct_name * var ) 
 { 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } else 
 { 
 var - > var = NULL ; 
 } 
 } 
 void func ( struct_name * var , data_type var , data_type var ) 
 { 
 struct_name * struct_var ; 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( ! var ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 else 
 { 
 var - > var = var ; 
 var - > var = var ; 
 var - > var = var - > var ; 
 var - > var = var ; 
 } 
 } 
 void func ( struct_name * var , data_type * var , data_type * var ) 
 { 
 struct_name * struct_var ; 
 var = var - > var ; 
 if ( ! var ) { 
 return ; 
 } else { 
 * var = var - > var ; 
 * var = var - > var ; 
 } 
 var - > var = var - > var ; 
 free ( var ) ; 
 } 
 int func ( struct_name * var ) 
 { 
 return ( ( var - > var ) = = NULL ) ; 
 } 
 int func ( data_type var , data_type var ) 
 { 
 
 if ( var < var - nums & & ( var [ var ] [ var + nums ] = = nums | | var [ var ] [ var + nums ] = = nums ) ) 
 { 
 return nums ; 
 } 
 
 if ( var < var - nums & & ( var [ var + nums ] [ var ] = = nums | | var [ var + nums ] [ var ] = = nums ) ) 
 { 
 return nums ; 
 } 
 
 if ( var >= nums & & ( var [ var ] [ var - nums ] = = nums | | var [ var ] [ var - nums ] = = nums ) ) 
 { 
 return nums ; 
 } 
 
 if ( var >= nums & & ( var [ var - nums ] [ var ] = = nums | | var [ var - nums ] [ var ] = = nums ) ) 
 { 
 return nums ; 
 } 
 return - nums ; 
 } 
 void func ( ) 
 { 
 int var = nums , var = nums ; 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] [ var ] = = nums | | var [ var ] [ var ] = = nums | | var [ var ] [ var ] = = - nums ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var [ var ] [ var ] = = nums ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var [ var ] [ var ] = = nums ) 
 { 
 printf ( words ) ; 
 } else if ( var [ var ] [ var ] = = nums ) 
 { 
 printf ( words ) ; 
 } else if ( var [ var ] [ var ] = = nums ) 
 { 
 printf ( words ) ; 
 } else if ( var [ var ] [ var ] = = nums ) 
 { 
 printf ( words ) ; 
 } 
 } 
 printf ( words ) ; 
 } 
 } 
 void func ( ) 
 { 
 int var = nums , var = nums ; 
 int var = nums ; 
 int var = nums ; 
 struct_name * struct_var = NULL ; 
 call_func ( var ) ; 
 do { 
 if ( var [ var ] [ var ] = = nums ) 
 { 
 var = nums ; 
 } 
 switch ( func ( var , var ) ) { 
 case nums : 
 var [ var ] [ var ] = nums ; 
 call_func ( var , var , var ) ; 
 var + + ; 
 break ; 
 case nums : 
 var [ var ] [ var ] = nums ; 
 call_func ( var , var , var ) ; 
 var + + ; 
 break ; 
 case nums : 
 var [ var ] [ var ] = nums ; 
 call_func ( var , var , var ) ; 
 var - - ; 
 break ; 
 case nums : 
 var [ var ] [ var ] = nums ; 
 call_func ( var , var , var ) ; 
 var - - ; 
 break ; 
 case - nums : 
 var [ var ] [ var ] = - nums ; 
 if ( ! call_func ( var ) ) 
 call_func ( var , & var , & var ) ; 
 break ; 
 } 
 var + + ; 
 } while ( ! call_func ( var ) & & var = = nums ) ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 } else 
 { 
 printf ( words ) ; 
 } 
 } 
 int func ( ) 
 { 
 var : 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < nums | | var > nums | | var < nums | | var > nums ) { 
 printf ( words ) ; 
 call_func ( - nums ) ; 
 } 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 call_func ( ) ; 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 if ( func ( getch ( ) ) = = words ) 
 { 
 printf ( words ) ; 
 call_func ( ) ; 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 if ( func ( getch ( ) ) = = words ) 
 { 
 goto var ; 
 } 
 else 
 { 
 call_func ( nums ) ; 
 } 
 } 
 else 
 { 
 call_func ( nums ) ; 
 } 
 getch ( ) ; 
 return nums ; 
 } 
 extern int var ; 
 extern struct struct_name struct_var [ nums ] ; 
 int func ( data_type * var ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( * var >= nums & & * var <= nums ) 
 return nums ; 
 else 
 { 
 printf ( words ) ; 
 return nums ; 
 } 
 } 
 int func ( data_type var , data_type var [ ] ) 
 { 
 switch ( var ) 
 { 
 case nums : 
 if ( call_func ( var ) > nums ) 
 return nums ; 
 else return nums ; 
 break ; 
 case nums : 
 if ( call_func ( var ) > nums ) 
 return nums ; 
 else return nums ; 
 break ; 
 case nums : 
 if ( call_func ( var ) > nums ) 
 return nums ; 
 else return nums ; 
 break ; 
 default : break ; 
 } 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 char var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( func ( nums , var ) ) 
 { 
 return nums ; 
 } 
 else 
 { 
 if ( ! strcmp ( var [ var ] . var , var ) ) 
 { 
 return nums ; 
 } 
 else 
 return nums ; 
 } 
 } 
 int func ( data_type var ) 
 { 
 char var ; 
 switch ( var ) 
 { 
 case nums : 
 printf ( words ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 break ; 
 default : 
 return nums ; 
 break ; 
 } 
 call_func ( ) ; 
 var = call_func ( ) ; 
 switch ( func ( var ) ) 
 { 
 case nums : 
 return nums ; 
 break ; 
 case nums : 
 return nums ; 
 break ; 
 default : 
 printf ( words ) ; 
 return - nums ; 
 break ; 
 } 
 } 
 int func ( data_type var , data_type var ) 
 { 
 if ( var [ var ] . var [ nums ] = = words ) 
 { 
 switch ( var ) 
 { 
 case nums : 
 printf ( words ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 break ; 
 default : 
 return - nums ; 
 break ; 
 } 
 return nums ; 
 } 
 else 
 return nums ; 
 } 
 int func ( ) 
 { 
 if ( var = = nums ) 
 return nums ; 
 else 
 return var [ var - nums ] . var + nums ; 
 } 
 int func ( data_type var ) 
 { 
 for ( ; var ! = var - nums ; + + var ) 
 { 
 var [ var ] . var = var [ var + nums ] . var ; 
 if ( ! func ( var [ var ] . var , var [ var + nums ] . var ) | | 
 ! call_func ( var [ var ] . var , var [ var + nums ] . var ) | | 
 ! call_func ( var [ var ] . var , var [ var + nums ] . var ) ) 
 { 
 return nums ; 
 } 
 var [ var ] . var = var [ var + nums ] . var ; 
 } 
 - - var ; 
 return nums ; 
 } 
 void func ( data_type var ) 
 { 
 if ( var ! = - nums ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 if ( var [ var ] . var [ nums ] = = words ) 
 printf ( words , var [ var ] . var , var [ var ] . var , 
 var [ var ] . var ) ; 
 else 
 printf ( words , var [ var ] . var , var [ var ] . var , 
 var [ var ] . var ) ; 
 printf ( words ) ; 
 } 
 } 
 int func ( data_type var ) 
 { 
 int var ; 
 int var ; 
 switch ( var ) 
 { 
 case nums : printf ( words ) ; break ; 
 case nums : printf ( words ) ; break ; 
 case nums : printf ( words ) ; break ; 
 case nums : printf ( words ) ; break ; 
 case nums : printf ( words ) ; break ; 
 case nums : printf ( words ) ; break ; 
 case nums : printf ( words ) ; break ; 
 case nums : printf ( words ) ; break ; 
 default : break ; 
 } 
 scanf ( words , & var ) ; 
 for ( var = nums ; var ! = var ; + + var ) 
 { 
 if ( var [ var ] . var = = var ) 
 { 
 return var ; 
 } 
 } 
 switch ( var ) 
 { 
 case nums : printf ( words ) ; break ; 
 case nums : printf ( words ) ; break ; 
 case nums : printf ( words ) ; break ; 
 case nums : printf ( words ) ; break ; 
 case nums : printf ( words ) ; break ; 
 case nums : printf ( words ) ; break ; 
 case nums : printf ( words ) ; break ; 
 case nums : printf ( words ) ; break ; 
 default : break ; 
 } 
 return - nums ; 
 } 
 void func ( data_type * var ) 
 { 
 while ( nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( ! call_func ( nums , var ) ) 
 break ; 
 else 
 printf ( words ) ; 
 } 
 } 
 void func ( data_type * var ) 
 { 
 while ( nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( ! call_func ( nums , var ) ) 
 break ; 
 else 
 printf ( words ) ; 
 } 
 } 
 float func ( data_type var ) 
 { 
 float var ; 
 char var [ nums ] ; 
 while ( nums ) 
 { 
 switch ( var ) 
 { 
 case nums : 
 printf ( words ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 break ; 
 default : break ; 
 } 
 scanf ( words , & var ) ; 
 call_func ( var , words , var ) ; 
 if ( ! call_func ( nums , var ) ) 
 break ; 
 else 
 { 
 printf ( words ) ; 
 return - nums ; 
 } 
 } 
 return var ; 
 } 
 void func ( ) 
 { 
 int var ; 
 var = nums ; 
 if ( func ( ) ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 do { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( func ( & var ) ) 
 { 
 } 
 switch ( var ) 
 { 
 case nums : 
 if ( func ( ) ) 
 { 
 printf ( words ) ; 
 break ; 
 } 
 call_func ( nums ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 default : break ; 
 } 
 } while ( var ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var ! = var ; + + var ) 
 { 
 if ( var [ var ] . var [ nums ] = = words ) 
 printf ( words , var [ var ] . var , var [ var ] . var , 
 var [ var ] . var ) ; 
 else 
 printf ( words , var [ var ] . var , var [ var ] . var , 
 var [ var ] . var ) ; 
 printf ( words ) ; 
 } 
 } 
 int func ( data_type var ) 
 { 
 int var ; 
 int var ; 
 if ( ( var = func ( nums ) ) ! = - nums ) 
 { 
 var [ var ] . var + = var ; 
 call_func ( var ) ; 
 return nums ; 
 } 
 else 
 return nums ; 
 } 
 int func ( ) 
 { 
 FILE * var ; 
 var = fopen ( words , words ) ; 
 if ( ! var ) 
 return nums ; 
 while ( ! feof ( var ) ) 
 { 
 call_func ( var , words , & var [ var ] . var , var [ var ] . var , var [ var ] . var , 
 & var [ var ] . var , var [ var ] . var ) ; 
 + + var ; 
 } 
 fclose ( var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 FILE * var ; 
 int var ; 
 var = fopen ( words , words ) ; 
 if ( ! var ) 
 return nums ; 
 for ( var = nums ; var ! = var ; + + var ) 
 { 
 call_func ( var , words , var [ var ] . var , var [ var ] . var , var [ var ] . var , 
 var [ var ] . var , var [ var ] . var ) ; 
 } 
 fclose ( var ) ; 
 return nums ; 
 } 
 #define var var 
 #define var var 
 #define var nums 
 #define var nums 
 #define var var 
 #define var nums 
 int var , var ; 
 int var ; 
 struct 
 { 
 int var ; 
 int var ; 
 int var ; 
 } var ; 
 struct 
 { 
 int var [ var ] ; 
 int var [ var ] ; 
 int ; 
 int var ; 
 int var ; 
 } var ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void ( int var , int var ) ; 
 int call_func ( ) ; 
 func ( ) 
 { 
 int var = var , var ; 
 call_func ( var ) ; 
 call_func ( & var , & var , words ) ; 
 var = call_func ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 getch ( ) ; 
 call_func ( ) ; 
 } 
 void ( int var , int var ) 
 { 
 int var = nums ; 
 int var = nums ; 
 call_func ( nums ) ; 
 call_func ( var , var , var + var , var ) ; 
 call_func ( var , var + nums , var + var - nums , var + nums ) ; 
 call_func ( var , var , var , var + var ) ; 
 call_func ( var + nums , var , var + nums , var + var - nums ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var + var , var + var , var + var ) ; 
 call_func ( var + nums , var + var - nums , var + var , var + var - nums ) ; 
 call_func ( var + var - nums , var + nums , var + var - nums , var + var - nums ) ; 
 call_func ( var + var , var + nums , var + var , var + var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var + nums , var + nums , var + var - nums , var + var - nums ) ; 
 } 
 void func ( ) 
 { int var ; 
 for ( var = nums ; var <= nums ; var + = nums ) 
 { 
 ( var , nums ) ; 
 ( var , nums ) ; 
 } 
 for ( var = nums ; var <= nums ; var + = nums ) 
 { 
 ( nums , var ) ; 
 ( nums , var ) ; 
 } 
 } 
 int func ( ) 
 { int var ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 switch ( var ) 
 { 
 case nums : return nums ; 
 case nums : return nums ; 
 case nums : return nums ; 
 default : 
 call_func ( ) ; 
 call_func ( ) ; 
 } 
 } 
 void func ( void ) 
 { 
 call_func ( ( var var ) struct_name ( nums ) ) ; 
 var . var = nums ; 
 var . var = nums ; 
 var . var = nums ; 
 var . var [ nums ] = nums ; var . var [ nums ] = nums ; 
 var . var [ nums ] = nums ; var . var [ nums ] = nums ; 
 var . = nums ; 
 do 
 { 
 while ( ! func ( ) ) 
 { 
 if ( var . var = = nums ) 
 do 
 { 
 var . var = call_func ( ) % nums + nums ; 
 var . var = call_func ( ) % nums + nums ; 
 var . var = nums ; 
 } while ( var . var % nums ! = nums | | var . var % nums ! = nums ) ; 
 if ( var . var = = nums ) 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( var . var , var . var , var . var + nums , var . var + nums ) ; 
 } 
 for ( var = var . - nums ; var > nums ; var - - ) 
 { 
 var . var [ var ] = var . var [ var - nums ] ; 
 var . var [ var ] = var . var [ var - nums ] ; 
 } 
 
 switch ( var . var ) 
 { 
 case nums : var . var [ nums ] + = nums ; break ; 
 case nums : var . var [ nums ] - = nums ; break ; 
 case nums : var . var [ nums ] - = nums ; break ; 
 case nums : var . var [ nums ] + = nums ; break ; 
 } 
 for ( var = nums ; var < var . ; var + + ) 
 { 
 if ( var . var [ var ] = = var . var [ nums ] & & var . var [ var ] = = var . var [ nums ] ) 
 { 
 call_func ( ) ; 
 var . var = nums ; 
 break ; 
 } 
 } 
 if ( var . var [ nums ] < nums | | var . var [ nums ] > nums | | var . var [ nums ] < nums | | 
 var . var [ nums ] > nums ) 
 { 
 call_func ( ) ; 
 var . var = nums ; 
 break ; 
 } 
 if ( var . var [ nums ] = = var . var & & var . var [ nums ] = = var . var ) 
 { 
 call_func ( nums ) ; 
 call_func ( var . var , var . var , var . var + nums , var . var + nums ) ; 
 var . + + ; 
 var . var = nums ; 
 } 
 call_func ( nums ) ; 
 for ( var = nums ; var < var . ; var + + ) 
 { call_func ( nums , nums , nums ) ; 
 call_func ( var . var [ var ] , var . var [ var ] , var . var [ var ] + nums , 
 var . var [ var ] + nums ) ; 
 } 
 call_func ( var ) ; 
 call_func ( nums ) ; 
 call_func ( var . var [ var . struct_name - nums ] , var . var [ var . struct_name - nums ] , 
 var . var [ var . struct_name - nums ] + nums , var . var [ var . struct_name - nums ] + nums ) ; 
 } 
 if ( var . var = = nums ) 
 break ; 
 var = call_func ( nums ) ; 
 if ( var = = var & & var . var ! = nums ) 
 var . var = nums ; 
 else 
 if ( var = = var & & var . var ! = nums ) 
 var . var = nums ; 
 else 
 if ( var = = var & & var . var ! = nums ) 
 var . var = nums ; 
 else 
 if ( var = = var & & var . var ! = nums ) 
 var . var = nums ; 
 } while ( var ! = var ) ; 
 } 
 void func ( void ) 
 { 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 } 
 #define var nums . nums 
 #define var var 
 float var = - nums , var = - nums , var = - nums ; 
 func ( ) 
 { 
 int var , var , var , var = nums ; 
 char var [ nums ] ; 
 float var ; 
 var = var ; 
 call_func ( var ) ; 
 call_func ( & var , & var , words ) ; 
 call_func ( var ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , var ) ; 
 for ( var = nums ; var <= nums * var ; var + = var / nums ) 
 { 
 call_func ( nums + nums * call_func ( - var ) , nums + nums * call_func ( - var ) , var ) ; 
 } 
 for ( var = nums ; var <= nums * var ; var + = var / nums ) 
 { 
 call_func ( var ) ; 
 call_func ( nums + nums * call_func ( - var ) , nums + nums * call_func ( - var ) , nums ) ; 
 call_func ( var , var ) ; 
 call_func ( nums + nums * call_func ( - var ) , nums + nums * call_func ( - var ) , var ) ; 
 } 
 call_func ( var ) ; 
 for ( var = nums ; var <= nums * var ; var + = var / nums ) 
 { 
 call_func ( var , var , nums ) ; 
 call_func ( nums + nums * call_func ( - var ) , nums + nums * call_func ( - var ) , var ) ; 
 var - - ; 
 if ( var < nums ) 
 var + = nums ; 
 } 
 while ( ! func ( ) ) 
 { 
 call_func ( ) ; 
 call_func ( nums ) ; 
 } 
 var = call_func ( nums ) ; 
 if ( var = = var ) 
 { 
 call_func ( ) ; 
 call_func ( nums ) ; 
 } 
 getch ( ) ; 
 call_func ( ) ; 
 } 
 func ( ) 
 { 
 struct struct_name * struct_var ; 
 float , var , var ; 
 int var , var ; 
 var var ; 
 ( & var ) ; 
 var = call_func ( & var ) ; 
 var = var - > var ; 
 var = var - > var ; 
 = var - > var ; 
 var = ( var + ( var * nums + ) / nums ) * var / nums - var / nums ; 
 var = ( var + / nums ) * ( var / nums ) - var / nums ; 
 if ( var ! = ( - nums ) & & var ! = ( - nums ) & & var ! = ( - nums ) ) 
 { call_func ( nums ) ; 
 call_func ( nums , nums , nums + nums * call_func ( var ) , nums + nums * call_func ( var ) ) ; 
 call_func ( nums , nums , nums + nums * call_func ( var ) , nums + nums * call_func ( var ) ) ; 
 call_func ( nums , nums , nums + nums * call_func ( ( var ) * ( var / nums ) + var / nums ) , nums + nums * call_func ( ( var ) * ( var / nums ) + var / nums ) ) ; 
 } 
 call_func ( var ) ; 
 call_func ( nums , nums , nums + nums * call_func ( var ) , nums + nums * call_func ( var ) ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums , nums + nums * call_func ( var ) , nums + nums * call_func ( var ) ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums , nums + nums * call_func ( ( struct_name ) * ( var / nums ) + var / nums ) , nums + nums * call_func ( ( struct_name ) * ( var / nums ) + var / nums ) ) ; 
 var = ; 
 var = var ; 
 var = var ; 
 } 
 #define var sizeof ( struct ) 
 #define var words 
 #define var var [ var ] . var , var [ var ] . var , var [ var ] . var , var [ var ] . var , var [ var ] . var , var [ var ] . var 
 struct 
 { int var ; 
 char var [ nums ] ; 
 double var ; 
 double var ; 
 double var ; 
 double var ; 
 } ; 
 struct struct_name struct_var [ nums ] ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void func ( ) 
 { int var ; 
 call_func ( ) ; 
 scanf ( words , & var ) ; 
 while ( var ) 
 { switch ( var ) 
 { case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 default : break ; 
 } 
 getch ( ) ; 
 call_func ( ) ; 
 scanf ( words , & var ) ; 
 } 
 } 
 void func ( ) 
 { int var , var = nums ; 
 char var [ nums ] ; 
 FILE * var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) 
 var + + ; 
 } 
 fclose ( var ) ; 
 if ( var = = nums ) 
 printf ( words ) ; 
 else 
 { 
 system ( words ) ; 
 call_func ( ) ; 
 } 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 fwrite ( & var [ var ] , var , nums , var ) ; 
 } 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 while ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] . var = = var [ var ] . var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 fclose ( var ) ; 
 return ; 
 } 
 printf ( words ) ; 
 scanf ( words , var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 var [ var ] . var = var [ var ] . var + var [ var ] . var + var [ var ] . var ; 
 if ( fwrite ( & var [ var ] , var , nums , var ) ! = nums ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 } 
 else 
 { 
 printf ( words , var [ var ] . var ) ; 
 var + + ; 
 } 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 } 
 fclose ( var ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 int var , var = nums ; 
 var = fopen ( words , words ) ; 
 while ( ! feof ( var ) ) 
 { 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) 
 var + + ; 
 } 
 fclose ( var ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( var , var ) ; 
 } 
 } 
 
 void func ( ) 
 { 
 system ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 struct struct_name struct_var ; 
 int var = nums , var = nums , var = nums ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 while ( ! feof ( var ) ) 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) 
 var + + ; 
 fclose ( var ) ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 return ; } 
 for ( var = nums ; var < var - nums ; var + + ) 
 for ( var = var + nums ; var < var ; var + + ) 
 if ( var [ var ] . var < var [ var ] . var ) 
 { var = var [ var ] ; var [ var ] = var [ var ] ; var [ var ] = var ; } 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 for ( var = nums ; var < var ; var + + ) 
 if ( fwrite ( & var [ var ] , var , nums , var ) ! = nums ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 } 
 fclose ( var ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 FILE * var ; 
 int var , var , var , var = nums ; 
 char var [ nums ] ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; return ; } 
 while ( ! feof ( var ) ) 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) var + + ; 
 fclose ( var ) ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var = = var [ var ] . var ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 for ( var = var ; var < var ; var + + ) 
 var [ var ] = var [ var + nums ] ; 
 var - - ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 for ( var = nums ; var < var ; var + + ) 
 if ( fwrite ( & var [ var ] , var , nums , var ) ! = nums ) 
 { printf ( words ) ; 
 getch ( ) ; } 
 fclose ( var ) ; 
 printf ( words ) ; 
 return ; 
 } 
 } 
 printf ( words ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 int var , var , var = nums ; 
 char var [ nums ] ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 while ( ! feof ( var ) ) if ( fread ( & var [ var ] , var , nums , var ) = = nums ) var + + ; 
 fclose ( var ) ; 
 if ( var = = nums ) { printf ( words ) ; return ; } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var = = var [ var ] . var ) 
 { printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 printf ( words ) ; 
 printf ( var , var ) ; 
 break ; 
 } 
 } 
 if ( var = = var ) printf ( words ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 int var , var , var = nums , var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 while ( ! feof ( var ) ) 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) var + + ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 fclose ( var ) ; 
 return ; 
 } 
 call_func ( ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var = = var [ var ] . var ) 
 { 
 printf ( words ) ; 
 
 printf ( words ) ; 
 scanf ( words , var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; 
 
 var [ var ] . var = var [ var ] . var + var [ var ] . var + var [ var ] . var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 for ( var = nums ; var < var ; var + + ) 
 if ( fwrite ( & var [ var ] , var , nums , var ) ! = nums ) 
 { printf ( words ) ; getch ( ) ; } 
 fclose ( var ) ; 
 return ; 
 } 
 } 
 printf ( words ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 int var , var , var , var = nums , var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 while ( ! feof ( var ) ) 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) var + + ; 
 if ( var = = nums ) { printf ( words ) ; 
 fclose ( var ) ; 
 return ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var = = var [ var ] . var ) 
 break ; 
 for ( var = var - nums ; var > var ; var - - ) 
 var [ var + nums ] = var [ var ] ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var + nums ] . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] . var = = var [ var ] . var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 fclose ( var ) ; 
 return ; 
 } 
 printf ( words ) ; 
 scanf ( words , var [ var + nums ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var + nums ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var + nums ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var + nums ] . var ) ; 
 var [ var + nums ] . var = var [ var + nums ] . var + var [ var + nums ] . var + var [ var + nums ] . var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 for ( var = nums ; var <= var ; var + + ) 
 if ( fwrite ( & var [ var ] , var , nums , var ) ! = nums ) 
 { printf ( words ) ; getch ( ) ; } 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 int var = nums ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 while ( ! feof ( var ) ) 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) 
 var + + ; 
 if ( var = = nums ) { printf ( words ) ; fclose ( var ) ; return ; } 
 printf ( words , var ) ; 
 fclose ( var ) ; 
 } 
 #define var sizeof ( struct ) 
 #define var 
 struct 
 { int var ; 
 char var [ nums ] ; 
 int var ; 
 struct struct_name * struct_var ; 
 } ; 
 typedef struct struct_name struct_var ; 
 int var , var ; 
 void call_func ( ) ; 
 var * call_func ( void ) ; 
 var * call_func ( var * var ) ; 
 var * call_func ( var * var ) ; 
 var * call_func ( var * var ) ; 
 var * ( var * var , var * var ) ; 
 void call_func ( var * var ) ; 
 call_func ( var * var ) ; 
 var * func ( void ) 
 { 
 var * var ; 
 var * var , * var , * var , * var ; 
 int var , var ; 
 char var [ nums ] ; 
 var = nums ; 
 var = var = var = ( var * ) malloc ( var ) ; 
 printf ( words var , var nums var ! words 
 var : printf ( words call_func ( var > nums ) : words 
 scanf ( words , & var - > var ) ; 
 while ( var - > var < nums ) 
 { 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 } 
 
 if ( var - > var = = nums ) 
 goto var ; 
 else 
 { 
 var = var ; 
 if ( var > nums ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var - > var ! = var - > var ) 
 var = var - > var ; 
 else 
 { 
 printf ( words ) ; 
 goto var ; 
 
 } 
 } 
 } 
 } 
 printf ( words var : words 
 scanf ( words , & var - > var ) ; 
 printf ( words var var : words 
 scanf ( words , & var - > var ) ; 
 while ( var - > var ! = nums ) 
 { 
 var = var + nums ; 
 if ( var = = nums ) 
 var = var ; 
 else 
 var - > var = var ; 
 var = var ; 
 var = ( var * ) malloc ( var ) ; 
 printf ( words var , var nums var ! words 
 var : printf ( words call_func ( var > nums ) : words 
 scanf ( words , & var - > var ) ; 
 while ( var - > var < nums ) 
 { call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; } 
 
 if ( var - > var = = nums ) 
 goto var ; 
 else 
 { 
 var = var ; 
 if ( var > nums ) 
 { for ( var = nums ; var < var ; var + + ) 
 { if ( var - > var ! = var - > var ) 
 var = var - > var ; 
 else 
 { printf ( words ) ; 
 goto var ; 
 
 } 
 } 
 } 
 } 
 printf ( words var : words 
 scanf ( words , & var - > var ) ; 
 printf ( words var var : words 
 scanf ( words , & var - > var ) ; 
 } 
 var : var = var ; 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = var + nums ; var <= var ; var + + ) 
 { 
 var = var ; 
 var = var - > var ; 
 if ( var - > var > var - > var ) 
 { 
 var = var - > var ; 
 var - > var = var - > var ; 
 var - > var = var ; 
 
 call_func ( var , var - > var ) ; 
 call_func ( var - > var , var - > var ) ; 
 call_func ( var - > var , var ) ; 
 
 
 } 
 } 
 var = var ; var = var ; 
 } 
 var - > var = NULL ; 
 printf ( words var : % var var ! words 
 getch ( ) ; 
 return ( var ) ; 
 } 
 var * func ( var * var ) 
 { 
 var * var , * var ; 
 int var = nums ; 
 char var [ nums ] ; 
 FILE * var ; 
 printf ( words var var var var : words 
 scanf ( words , var ) ; 
 if ( ( var = fopen ( var , words ) ) = = NULL ) 
 { 
 printf ( words var var var ! words 
 getch ( ) ; 
 return nums ; 
 } 
 else 
 { 
 var = ( var * ) malloc ( var ) ; 
 call_func ( var , words , & var - > var , var - > var , & var - > var ) ; 
 printf ( words , var - > var , var - > var , var - > var ) ; 
 var = NULL ; 
 do 
 { 
 var = var + nums ; 
 if ( var = = nums ) 
 var = var ; 
 else 
 var - > var = var ; 
 var = var ; 
 var = ( var * ) malloc ( var ) ; 
 call_func ( var , words , & var - > var , var - > var , & var - > var ) ; 
 printf ( words , var - > var , var - > var , var - > var ) ; 
 } while ( ! feof ( var ) ) ; 
 var - > var = var ; 
 var - > var = NULL ; 
 var = var + nums ; 
 } 
 printf ( words ) ; 
 getch ( ) ; 
 fclose ( var ) ; 
 return ( var ) ; 
 } 
 var * func ( var * var ) 
 { 
 int var ; 
 var * var , * var ; 
 printf ( words var var var : words 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 while ( var ! = nums ) 
 { 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 return ( var ) ; 
 } 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 var = var ; 
 while ( var ! = var - > var & & var - > var ! = NULL ) 
 { 
 var = var ; 
 var = var - > var ; 
 } 
 if ( var = = var - > var ) 
 { 
 printf ( words , var - > var , var - > var , var - > var ) ; 
 printf ( words ) ; 
 } 
 else 
 printf ( words , var ) ; 
 printf ( words var var var : words 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 } 
 printf ( words ) ; 
 call_func ( ) ; 
 return ( var ) ; 
 } 
 var * func ( var * var ) 
 { 
 var * var , * var ; 
 int var ; 
 printf ( words var var call_func ( var nums var ) : words 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 while ( var ! = nums ) 
 { 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 return ( var ) ; 
 } 
 var = var ; 
 while ( var ! = var - > var & & var - > var ! = NULL ) 
 
 { 
 var = var ; 
 var = var - > var ; 
 } 
 if ( var = = var - > var ) 
 
 { 
 if ( var = = var ) 
 var = var - > var ; 
 
 else 
 var - > var = var - > var ; 
 
 printf ( words , var ) ; 
 var = var - nums ; 
 } 
 else 
 printf ( words , var ) ; 
 
 printf ( words var var var : words 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 } 
 var var 
 printf ( words ) ; 
 #endif 
 printf ( words , var ) ; 
 getch ( ) ; 
 return ( var ) ; 
 } 
 var * ( var * var , var * var ) 
 { 
 var * var , * var , * var , * var , * var ; 
 int var , var ; 
 char var [ nums ] ; 
 var = var = ( var * ) malloc ( var ) ; 
 printf ( words var var var ! words 
 var : printf ( words call_func ( var > nums ) : words 
 scanf ( words , & var - > var ) ; 
 
 while ( var - > var < nums ) 
 { 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 } 
 
 if ( var - > var = = nums ) 
 goto var ; 
 else 
 { 
 var = var ; 
 if ( var > nums ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var - > var ! = var - > var ) 
 var = var - > var ; 
 else 
 { 
 printf ( words ) ; 
 goto var ; 
 
 } 
 } 
 } 
 } 
 
 printf ( words var : words 
 scanf ( words , var - > var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 var = var ; 
 var = var ; 
 if ( var = = NULL ) 
 { 
 var = var ; 
 var - > var = NULL ; 
 } 
 else 
 { 
 if ( var - > var = = NULL ) 
 { 
 var - > var = var ; 
 var - > var = NULL ; 
 } 
 else 
 { 
 while ( var - > var ! = NULL ) 
 { 
 var = var ; 
 var = var - > var ; 
 } 
 var - > var = var ; 
 var - > var = NULL ; 
 } 
 } 
 var = var + nums ; 
 var = var ; 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = var + nums ; var <= var ; var + + ) 
 { 
 var = var ; 
 var = var - > var ; 
 if ( var - > var > var - > var ) 
 { 
 var = var - > var ; 
 var - > var = var - > var ; 
 var - > var = var ; 
 
 call_func ( var , var - > var ) ; 
 call_func ( var - > var , var - > var ) ; 
 call_func ( var - > var , var ) ; 
 
 
 } 
 var = var ; 
 var = var ; 
 } 
 } 
 var : 
 printf ( words , var ) ; 
 getch ( ) ; 
 return ( var ) ; 
 } 
 
 
 void func ( var * var ) 
 { 
 var * var ; 
 if ( var = = NULL ) 
 printf ( words ) ; 
 else 
 { 
 printf ( words , var ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 var = var ; 
 do 
 { printf ( words , var - > var , var - > var , var - > var ) ; 
 printf ( words ) ; 
 var = var - > var ; 
 } while ( var ! = NULL ) ; 
 getch ( ) ; 
 } 
 } 
 func ( var * var ) 
 { 
 FILE * var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words var var var ! words 
 return nums ; 
 } 
 else 
 { 
 while ( var ! = NULL ) 
 { 
 call_func ( var , words , var - > var , var - > var , var - > var ) ; 
 var = var - > var ; 
 } 
 printf ( words ) ; 
 getch ( ) ; 
 } 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 system ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 func ( ) 
 { 
 int var ; 
 var * var = nums , * var = nums ; 
 call_func ( ) ; 
 scanf ( words , & var ) ; 
 while ( nums ) 
 { 
 switch ( var ) 
 { 
 case nums : var = call_func ( ) ; break ; 
 case nums : var = call_func ( var ) ; break ; 
 case nums : var = call_func ( var ) ; break ; 
 case nums : var = call_func ( var ) ; break ; 
 case nums : var = ( var , var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( nums ) ; 
 default : printf ( words ) ; 
 } 
 call_func ( ) ; 
 scanf ( words , & var ) ; 
 } 
 } 
 #define var words 
 #define var words 
 #define var words 
 #define var words 
 #define var var - > var . var , var - > var . var , var - > var . var , var - > var . var , var - > var . var , var - > var . var , var - > var . var 
 int var = nums ; 
 struct 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 int var ; 
 } ; 
 struct 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 } ; 
 typedef struct 
 { 
 struct struct_name struct_var ; 
 struct struct_name * struct_var ; 
 } , * ; 
 typedef struct 
 { 
 struct struct_name struct_var ; 
 struct struct_name * struct_var ; 
 } , * var ; 
 void func ( ) 
 { 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 } 
 void func ( var var ) 
 { 
 struct struct_name * struct_var , * var , * ; 
 char var [ nums ] ; 
 var = var ; 
 = var - > var ; 
 while ( var - > var ! = NULL ) 
 var = var - > var ; 
 while ( nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums ) 
 break ; 
 
 while ( ) 
 { 
 if ( strcmp ( - > var . var , var ) = = nums ) 
 { 
 printf ( words % words , var ) ; 
 return ; 
 } 
 = - > var ; 
 } 
 var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 call_func ( var - > var . var , var ) ; 
 printf ( words ) ; 
 scanf ( words , var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 var = nums ; 
 } 
 } 
 void func ( ) 
 { 
 printf ( var ) ; 
 printf ( var ) ; 
 printf ( var ) ; 
 } 
 void func ( struct_name * var ) 
 { 
 struct_name * struct_var ; 
 var = var ; 
 printf ( var , var ) ; 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var [ nums ] , * var ; 
 int var , var , var = nums ; 
 char var [ nums ] , var [ nums ] ; 
 if ( ! var - > var ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = var - > var ; 
 while ( var ! = NULL ) 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 { 
 [ var ] = var ; 
 var + + ; 
 break ; 
 } 
 else 
 var = var - > var ; 
 } 
 else if ( var = = nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = var - > var ; 
 while ( var ! = NULL ) 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 { 
 [ var ] = var ; 
 var + + ; 
 var = var - > var ; 
 } 
 else 
 var = var - > var ; 
 } 
 if ( var = = nums ) 
 printf ( words ) ; 
 else 
 { 
 call_func ( ) ; 
 for ( var = nums ; var < var ; var + + ) 
 call_func ( struct_name [ var ] ) ; 
 } 
 } 
 void func ( var var , var var ) 
 { 
 struct_name * struct_var [ nums ] , * var ; 
 char var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] ; 
 struct_name * struct_var , * var ; 
 int var = nums , var = nums , var = nums , var ; 
 var = var ; 
 while ( var - > var ! = NULL ) 
 var = var - > var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var - > var ; 
 while ( var ! = NULL ) 
 { 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 { 
 var [ var ] = var ; 
 var + + ; 
 } 
 var = var - > var ; 
 } 
 printf ( words , var ) ; 
 call_func ( ) ; 
 for ( var = nums ; var < var ; var + + ) 
 call_func ( var [ var ] ) ; 
 if ( var = = nums ) 
 printf ( words var var for var ! words 
 else 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 var = ( ) malloc ( sizeof ( ) ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var - > var . var , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var - > var . var , var ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( strcmp ( var [ var ] - > var . var , var ) = = nums ) 
 { 
 if ( var [ var ] - > var . var < nums ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 return ; 
 } 
 printf ( words , var [ var ] - > var . var ) ; 
 var = nums ; 
 break ; 
 } 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 return ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var [ var ] - > var . var = var [ var ] - > var . var - var ; 
 var - > var . var = var ; 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 printf ( words ) ; 
 getch ( ) ; 
 var = nums ; 
 } 
 } 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var ; 
 char var [ nums ] , var ; 
 var = var - > var ; 
 if ( ! var ) 
 { 
 printf ( words for var var var ! words 
 return ; 
 } 
 else 
 { 
 printf ( words ) ; 
 call_func ( ) ; 
 scanf ( words , & var ) ; 
 if ( var = = words | | var = = words ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 while ( var ! = NULL ) 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 break ; 
 else 
 var = var - > var ; 
 if ( var ) 
 { 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 var = nums ; 
 } 
 else 
 printf ( words var var ! words 
 } 
 } 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var ; 
 var = var - > var ; 
 call_func ( ) ; 
 if ( var - > var = = NULL ) 
 printf ( words ) ; 
 else 
 while ( var ! = NULL ) 
 { 
 call_func ( var ) ; 
 var = var - > var ; 
 } 
 } 
 void func ( var var ) 
 { 
 FILE * var ; 
 struct_name * struct_var ; 
 int var = nums , var = nums ; 
 var = fopen ( words , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words var var ! words 
 return ; 
 } 
 var = var - > var ; 
 while ( var ) 
 { 
 if ( fwrite ( var , sizeof ( ) , nums , var ) = = nums ) 
 { 
 var = var - > var ; 
 var + + ; 
 } 
 else 
 { 
 var = nums ; 
 break ; 
 } 
 } 
 if ( var ) 
 { 
 printf ( words , var ) ; 
 var = nums ; 
 } 
 fclose ( var ) ; 
 } 
 void func ( var var ) 
 { 
 FILE * var ; 
 struct_name * struct_var ; 
 int var = nums , var = nums ; 
 var = fopen ( words , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words var var ! words 
 return ; 
 } 
 var = var - > var ; 
 while ( var ) 
 { 
 if ( fwrite ( var , sizeof ( ) , nums , var ) = = nums ) 
 { 
 var = var - > var ; 
 var + + ; 
 } 
 else 
 { 
 var = nums ; 
 break ; 
 } 
 } 
 if ( var ) 
 { 
 printf ( words , var ) ; 
 var = nums ; 
 } 
 fclose ( var ) ; 
 } 
 func ( ) 
 { 
 FILE * var , * var ; 
 struct_name * struct_var , * var ; 
 char var , var ; 
 struct_name struct_var ; 
 var var ; 
 struct_name * struct_var , * var ; 
 int var ; 
 var = ( ) malloc ( sizeof ( ) ) ; 
 var - > var = NULL ; 
 var = var ; 
 var = ( ) malloc ( sizeof ( ) ) ; 
 var - > var = NULL ; 
 var = var ; 
 var = fopen ( words , words ) ; 
 if ( ( var = = NULL ) ) 
 { 
 printf ( words var var var ! words 
 return nums ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( fread ( var , sizeof ( ) , nums , var ) = = nums ) 
 { 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 
 } 
 } 
 fclose ( var ) ; 
 var = fopen ( words , words ) ; 
 if ( ( var = = NULL ) ) 
 { 
 printf ( words var var var ! words 
 return nums ; 
 } 
 
 while ( ! feof ( var ) ) 
 { 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( fread ( var , sizeof ( ) , nums , var ) = = nums ) 
 { 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 
 } 
 } 
 fclose ( var ) ; 
 while ( nums ) 
 { 
 call_func ( ) ; 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 if ( var = = nums ) 
 { 
 if ( var = = nums ) 
 { 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = words | | var = = words ) 
 { 
 call_func ( var ) ; 
 call_func ( var ) ; 
 } 
 } 
 printf ( words ) ; 
 break ; 
 } 
 switch ( var ) 
 { 
 case nums : 
 call_func ( var ) ; break ; 
 case nums : 
 call_func ( var ) ; break ; 
 case nums : 
 call_func ( var , var ) ; break ; 
 case nums : 
 call_func ( var ) ; break ; 
 case nums : 
 call_func ( var ) ; break ; 
 case nums : 
 call_func ( var ) ; call_func ( var ) ; break ; 
 case nums : 
 return nums ; 
 } 
 printf ( words ) ; 
 getch ( ) ; 
 } 
 } 
 typedef struct 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 } ; 
 typedef struct 
 { 
 struct struct_name struct_var ; 
 struct struct_name * struct_var ; 
 } , * ; 
 void func ( data_type * var , data_type var , data_type * var ) 
 { 
 char var [ nums ] ; 
 do { 
 printf ( var ) ; 
 scanf ( words , var ) ; 
 if ( call_func ( var ) > var ) printf ( words ) ; 
 } while ( call_func ( var ) > var ) ; 
 call_func ( var , var ) ; 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var , * var ; 
 var = var ; 
 while ( nums ) 
 { 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( ! var ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 call_func ( var - > var . var , nums , words ) ; 
 if ( strcmp ( var - > var . var , words ) = = nums ) 
 break ; 
 call_func ( var - > var . var , nums , words ) ; 
 call_func ( var - > var . var , nums , words ) ; 
 call_func ( var - > var . var , nums , words ) ; 
 call_func ( var - > var . var , nums , words ) ; 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 } 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var , * var ; 
 char [ nums ] ; 
 var = var ; 
 var = var - > var ; 
 printf ( words ) ; 
 scanf ( words , ) ; 
 while ( var ) 
 { 
 if ( strcmp ( , var - > var . var ) = = nums ) 
 { var - > var = var - > var ; 
 free ( var ) ; 
 printf ( words ) ; 
 break ; 
 } 
 else 
 { 
 var = var ; 
 var = var - > var ; 
 } 
 } 
 getch ( ) ; 
 } 
 void func ( struct_name * var ) 
 { 
 printf ( words ) ; 
 printf ( words , var - > var . var ) ; 
 printf ( words , var - > var . var ) ; 
 printf ( words , var - > var . var ) ; 
 printf ( words , var - > var . var ) ; 
 printf ( words , var - > var . var ) ; 
 } 
 void func ( var var ) 
 { 
 char var [ nums ] ; 
 struct_name * struct_var ; 
 var = var - > var ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 while ( var ) 
 { if ( strcmp ( var - > var . var , var ) = = nums ) 
 { 
 call_func ( var ) ; 
 getch ( ) ; 
 break ; 
 } 
 else 
 var = var - > var ; 
 } 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var ; 
 var = var - > var ; 
 while ( var ! = NULL ) 
 { 
 call_func ( var ) ; 
 var = var - > var ; 
 } 
 getch ( ) ; 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var ; 
 FILE * var ; 
 var = var - > var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words ) ; 
 while ( var ) 
 { 
 fwrite ( var , sizeof ( ) , nums , var ) ; 
 var = var - > var ; 
 } 
 fclose ( var ) ; 
 getch ( ) ; 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var , * var ; 
 FILE * var ; 
 var - > var = NULL ; 
 var = var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } ; 
 printf ( words ) ; 
 while ( ! feof ( var ) ) 
 { 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( ! var ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 if ( fread ( var , sizeof ( ) , nums , var ) ! = nums ) 
 break ; 
 else 
 { 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 } 
 } 
 fclose ( var ) ; 
 getch ( ) ; 
 } 
 func ( ) 
 { 
 int var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 do 
 { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } while ( var < nums | | var > nums ) ; 
 return var ; 
 } 
 func ( ) 
 { 
 struct_name struct_var ; 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( ! var ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 var - > var = NULL ; 
 system ( words ) ; 
 while ( nums ) 
 { 
 system ( words ) ; 
 switch ( func ( ) ) 
 { 
 case nums : 
 call_func ( var ) ; 
 break ; 
 case nums : 
 call_func ( var ) ; 
 break ; 
 case nums : 
 call_func ( var ) ; 
 break ; 
 case nums : 
 call_func ( var ) ; 
 break ; 
 case nums : 
 call_func ( var ) ; 
 break ; 
 case nums : 
 call_func ( var ) ; 
 break ; 
 case nums : 
 call_func ( nums ) ; 
 } 
 } 
 } 
 typedef struct 
 { 
 int var ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 var char var ; 
 char var [ nums ] ; 
 int var ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char [ nums ] ; 
 struct struct_name * struct_var ; 
 } var ; 
 
 char var [ nums ] ; 
 var * var , * var ; 
 char var , var ; 
 
 void call_func ( void ) ; 
 void call_func ( void ) ; 
 void call_func ( void ) ; 
 void call_func ( void ) ; 
 void call_func ( void ) ; 
 void call_func ( void ) ; 
 void call_func ( void ) ; 
 void call_func ( void ) ; 
 void call_func ( void ) ; 
 int call_func ( data_type struct_name ) ; 
 int call_func ( data_type struct_name ) ; 
 char * call_func ( data_type * var , data_type * struct_name , data_type var ) ; 
 var * call_func ( data_type * var ) ; 
 var * call_func ( data_type var ) ; 
 var * call_func ( data_type * var ) ; 
 var * call_func ( data_type * var ) ; 
 void call_func ( var * var , data_type * var , data_type * var ) ; 
 void call_func ( void ) ; 
 void call_func ( data_type var , data_type var ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void func ( ) 
 { 
 FILE * var ; 
 var * var ; 
 int var = nums ; 
 char var = words ; 
 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 
 do { 
 var + + ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 printf ( words , var ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > ) ; 
 
 var - > var = NULL ; 
 if ( var = = NULL ) 
 { 
 var = var ; 
 var = var ; 
 } else { 
 var - > var = var ; 
 var = var ; 
 } 
 
 fwrite ( var , sizeof ( var ) , nums , var ) ; 
 
 var = nums ; 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 var = getch ( ) ; 
 
 if ( func ( var ) ! = words ) 
 { 
 fclose ( var ) ; 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 
 system ( words ) ; 
 } while ( nums ) ; 
 } 
 void func ( data_type var , data_type var ) 
 { 
 while ( var - - ) 
 call_func ( var ) ; 
 
 printf ( words ) ; 
 return ; 
 } 
 void func ( ) 
 { 
 FILE * var , * var ; 
 char var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] , var ; 
 int var ; 
 char var = words ; 
 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 getch ( ) ; 
 
 do { 
 printf ( words ) ; 
 for ( var = nums ; var < nums & & ( ( var [ var ] = getch ( ) ) ! = nums ) ; var + + ) 
 call_func ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums & & ( ( var [ var ] = getch ( ) ) ! = nums ) ; var + + ) 
 call_func ( words ) ; 
 
 var [ var ] = words ; 
 var [ var ] = words ; 
 
 if ( strcmp ( var , var ) ! = nums ) 
 printf ( words ) ; 
 else break ; 
 
 } while ( nums ) ; 
 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 
 var = nums ; 
 while ( var [ var ] ) 
 { 
 
 var [ var ] = ( var [ var ] var var ) ; 
 call_func ( var [ var ] , var ) ; 
 var + + ; 
 } 
 
 fclose ( var ) ; 
 printf ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 
 } else { 
 var = nums ; 
 while ( ! feof ( var ) & & var < nums ) 
 var [ var + + ] = ( call_func ( var ) var ) ; 
 
 
 var [ var ] = words ; 
 
 if ( var >= nums ) var - - ; 
 while ( var [ var ] ! = - nums & & var >= nums ) 
 var - - ; 
 
 var [ var ] = words ; 
 call_func ( var , var ) ; 
 } 
 } 
 void func ( ) 
 { 
 int var = nums ; 
 var * var , * var ; 
 char var [ nums ] , var ; 
 
 system ( words ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 
 var = var ; 
 var = var ; 
 while ( var ) 
 { 
 if ( strcmp ( var - > var , var ) = = nums ) 
 { 
 var = nums ; 
 system ( words ) ; 
 
 printf ( words , var - > var ) ; 
 call_func ( words , nums ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 
 fflush ( stdin ) ; 
 var = call_func ( ) ; 
 
 if ( var ! = words & & var ! = words ) return ; 
 if ( var = = var ) var = var - > var ; 
 else var - > var = var - > var ; 
 
 free ( var ) ; 
 var = nums ; 
 call_func ( ) ; 
 return ; 
 } else { 
 var = var ; 
 var = var - > var ; 
 } 
 } 
 if ( ! var ) 
 { 
 call_func ( words , nums ) ; 
 printf ( words , var ) ; 
 getch ( ) ; 
 } 
 return ; 
 } 
 void func ( var * var , data_type * var , data_type * var ) 
 { 
 if ( var ) 
 { 
 printf ( words , var , var ) ; 
 call_func ( words , nums ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > ) ; 
 call_func ( words , nums ) ; 
 } else { 
 call_func ( words , nums ) ; 
 printf ( words , var , var ) ; 
 } 
 return ; 
 } 
 var * func ( data_type * var ) 
 { 
 var * var ; 
 var = var ; 
 
 while ( var ) 
 { 
 if ( strcmp ( var , var - > var ) = = nums ) return var ; 
 var = var - > var ; 
 } 
 return NULL ; 
 } 
 var * func ( data_type var ) 
 { 
 var * var ; 
 
 var = var ; 
 while ( var ) 
 { 
 if ( var = = var - > var ) return var ; 
 var = var - > var ; 
 } 
 return NULL ; 
 } 
 var * func ( data_type * var ) 
 { 
 var * var ; 
 
 var = var ; 
 while ( var ) 
 { 
 if ( ( strcmp ( var , var - > var ) = = nums ) | | 
 ( strcmp ( var , var - > var ) = = nums ) | | 
 ( strcmp ( var , var - > var ) = = nums ) ) 
 return var ; 
 var = var - > var ; 
 
 } 
 return NULL ; 
 } 
 var * func ( data_type * var ) 
 { 
 var * var ; 
 
 var = var ; 
 while ( var ) 
 { 
 if ( strcmp ( var , var - > var ) = = nums ) return var ; 
 var = var - > var ; 
 } 
 return NULL ; 
 } 
 void func ( ) 
 { 
 int var , var = nums , var ; 
 char var [ nums ] ; 
 var * var ; 
 
 system ( words ) ; 
 
 do { 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 
 do { 
 fflush ( stdin ) ; 
 var = call_func ( ) ; 
 system ( words ) ; 
 
 switch ( var ) 
 { 
 case words : 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 
 var = call_func ( var ) ; 
 call_func ( var , words , var ) ; 
 getch ( ) ; 
 break ; 
 
 case words : 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 
 var = call_func ( var ) ; 
 call_func ( var , var , nums ) ; 
 call_func ( var , words , var ) ; 
 getch ( ) ; 
 break ; 
 
 case words : 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 
 var = call_func ( var ) ; 
 call_func ( var , words , var ) ; 
 getch ( ) ; 
 break ; 
 
 case words : 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 
 var = call_func ( var ) ; 
 call_func ( var , words , var ) ; 
 getch ( ) ; 
 break ; 
 
 case words : 
 var = nums ; 
 break ; 
 } 
 } while ( var < words | | var > words ) ; 
 
 system ( words ) ; 
 if ( var ) break ; 
 } while ( nums ) ; 
 } 
 void func ( ) 
 { 
 var * var ; 
 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 var = var ; 
 
 while ( var ) 
 { 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > ) ; 
 call_func ( words , nums ) ; 
 var = var - > var ; 
 } 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 void func ( ) 
 { 
 int var , var = nums ; 
 char var [ nums ] ; 
 
 do { 
 printf ( words ) ; 
 for ( var = nums ; var < nums & & ( ( var [ var ] = getch ( ) ) ! = nums ) ; var + + ) 
 call_func ( words ) ; 
 
 var [ var ] = words ; 
 if ( strcmp ( var , var ) ) 
 { 
 printf ( words ) ; 
 system ( words ) ; 
 var - - ; 
 } else break ; 
 } while ( var > nums ) ; 
 
 if ( ! var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 } 
 void func ( ) 
 { 
 char var ; 
 
 system ( words ) ; 
 
 do { 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 
 do { 
 fflush ( stdin ) ; 
 var = call_func ( ) ; 
 system ( words ) ; 
 
 switch ( var ) 
 { 
 case words : 
 call_func ( ) ; 
 break ; 
 case words : 
 if ( var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 break ; 
 } 
 
 call_func ( ) ; 
 break ; 
 case words : 
 if ( var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 break ; 
 } 
 
 call_func ( ) ; 
 break ; 
 case words : 
 if ( var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 break ; 
 } 
 
 call_func ( ) ; 
 break ; 
 case words : 
 if ( var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 break ; 
 } 
 
 call_func ( ) ; 
 break ; 
 case words : 
 if ( var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 break ; 
 } 
 
 call_func ( ) ; 
 break ; 
 case words : 
 call_func ( ) ; 
 break ; 
 case words : 
 call_func ( ) ; 
 call_func ( nums ) ; 
 } 
 } while ( var < words | | var > words ) ; 
 
 
 system ( words ) ; 
 } while ( nums ) ; 
 } 
 int func ( data_type var ) { 
 int var ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 
 return ( var ) ; 
 } 
 int func ( data_type var ) { 
 int var ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 
 return ( var ) ; 
 } 
 char * func ( data_type * var , data_type * var , data_type var ) 
 { 
 char * var ; 
 var = malloc ( sizeof ( char ) * var ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 return NULL ; 
 } 
 printf ( words , var , var ) ; 
 printf ( words , var ) ; 
 scanf ( words , var ) ; 
 
 return var ; 
 } 
 void func ( ) 
 { 
 var * var ; 
 char var [ nums ] , * var ; 
 int var ; 
 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 
 var = call_func ( var ) ; 
 call_func ( var , words , var ) ; 
 
 if ( var ) 
 { 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 
 do { 
 fflush ( stdin ) ; 
 var = call_func ( ) ; 
 switch ( var ) 
 { 
 case words : 
 var = call_func ( words , var - > var , nums ) ; 
 if ( var ! = NULL ) 
 { 
 call_func ( var - > var , var ) ; 
 free ( var ) ; 
 } 
 break ; 
 case words : 
 var - > var = call_func ( var - > var ) ; 
 break ; 
 case words : 
 var = call_func ( words , var - > var , nums ) ; 
 if ( var ! = NULL ) 
 { 
 call_func ( var - > var , var ) ; 
 free ( var ) ; 
 } 
 break ; 
 case words : 
 var - > var = call_func ( var - > var ) ; 
 break ; 
 case words : 
 var = call_func ( words , var - > var , nums ) ; 
 if ( var ! = NULL ) 
 { 
 call_func ( var - > var , var ) ; 
 free ( var ) ; 
 } 
 break ; 
 case words : 
 var = call_func ( words , var - > var , nums ) ; 
 if ( var ! = NULL ) 
 { 
 call_func ( var - > var , var ) ; 
 free ( var ) ; 
 } 
 break ; 
 case words : 
 var = call_func ( words , var - > var , nums ) ; 
 if ( var ! = NULL ) 
 { 
 call_func ( var - > var , var ) ; 
 free ( var ) ; 
 } 
 break ; 
 case words : 
 var = call_func ( words , var - > var , nums ) ; 
 if ( var = = NULL ) 
 { 
 call_func ( var - > var , var ) ; 
 free ( var ) ; 
 } 
 break ; 
 case words : 
 var = call_func ( words , var - > struct_name , nums ) ; 
 if ( var ! = NULL ) 
 { 
 call_func ( var - > struct_name , var ) ; 
 free ( var ) ; 
 } 
 break ; 
 case words : 
 return ; 
 } 
 } while ( var < words | | var > words ) ; 
 
 var = nums ; 
 call_func ( ) ; 
 printf ( words ) ; 
 getch ( ) ; 
 } 
 return ; 
 } 
 
 void func ( void ) 
 { 
 FILE * var ; 
 var * var ; 
 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 var = nums ; 
 return ; 
 } 
 
 while ( ! feof ( var ) ) 
 { 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 
 fread ( var , sizeof ( var ) , nums , var ) ; 
 if ( feof ( var ) ) break ; 
 
 if ( var = = NULL ) 
 { 
 var = var ; 
 var = var ; 
 } else { 
 var - > var = var ; 
 var = var ; 
 } 
 var - > var = NULL ; 
 } 
 var = nums ; 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 char var [ nums ] , var [ nums ] , var ; 
 int var ; 
 FILE * var ; 
 
 system ( words ) ; 
 
 printf ( words ) ; 
 for ( var = nums ; var < nums & & ( ( var [ var ] = getch ( ) ) ! = nums ) ; var + + ) 
 call_func ( words ) ; 
 
 var [ var ] = words ; 
 if ( strcmp ( var , var ) ! = nums ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 do { 
 printf ( words ) ; 
 for ( var = nums ; var < nums & & ( ( var [ var ] = getch ( ) ) ! = nums ) ; var + + ) 
 call_func ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums & & ( ( var [ var ] = getch ( ) ) ! = nums ) ; var + + ) 
 call_func ( words ) ; 
 
 var [ var ] = words ; 
 var [ var ] = words ; 
 
 if ( strcmp ( var , var ) ! = nums ) 
 printf ( words ) ; 
 else break ; 
 
 } while ( nums ) ; 
 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 
 var = nums ; 
 while ( var [ var ] ) 
 { 
 call_func ( var [ var ] , var ) ; 
 var + + ; 
 } 
 
 fclose ( var ) ; 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 void func ( ) 
 { 
 FILE * var ; 
 var * var ; 
 
 if ( var = = nums ) return ; 
 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 
 var = var ; 
 while ( var ) 
 { 
 fwrite ( var , sizeof ( var ) , nums , var ) ; 
 var = var - > var ; 
 } 
 
 var = nums ; 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 var * var ; 
 int var = nums , var = nums , = nums , var = nums ; 
 
 var = var ; 
 while ( var ) 
 { 
 var + + ; 
 var + = var - > var ; 
 char var [ nums ] ; 
 call_func ( var , var - > var , nums ) ; 
 if ( ( strcmp ( var , words ) = = nums ) | | ( strcmp ( var - > var , words ) = = nums ) ) + + ; 
 else var + + ; 
 var = var - > var ; 
 } 
 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , ) ; 
 printf ( words , var ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 int func ( void ) 
 { 
 var = var = NULL ; 
 var = var = nums ; 
 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 system ( words ) ; 
 return nums ; 
 } 
 var call_func ( var , words ) 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 FILE * var ; 
 FILE * var ; 
 struct 
 { 
 int var ; 
 int var ; 
 int var ; 
 char var [ nums ] ; 
 } ; 
 struct 
 { 
 int var ; 
 int var ; 
 char var [ nums ] ; 
 } ; 
 struct 
 { 
 int var ; 
 char var [ nums ] ; 
 int var ; 
 var var ; 
 } ; 
 struct 
 { 
 int var ; 
 char var [ nums ] ; 
 } ; 
 struct struct_name struct_var [ nums ] ; 
 int var = nums ; 
 int var ; 
 int var = nums ; 
 struct struct_name struct_var [ nums ] ; 
 void func ( ) 
 { 
 if ( var ! = NULL ) 
 fclose ( var ) ; 
 if ( var ! = NULL ) 
 fclose ( var ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 } 
 var var func ( var var ) 
 { 
 var var = ( var ) var ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var = nums ; 
 if ( var ! = var ) 
 printf ( words ) ; 
 while ( nums ) 
 { 
 var = call_func ( var , var , nums , nums ) ; 
 if ( var >= nums ) 
 { 
 var [ var ] = words ; 
 call_func ( var , words , var ) ; 
 printf ( words , var ) ; 
 fwrite ( var , sizeof ( char ) , call_func ( var ) , var ) ; 
 fflush ( var ) ; 
 if ( strcmp ( words , var ) = = nums ) 
 { 
 call_func ( ) ; 
 } 
 } 
 } 
 return nums ; 
 } 
 var var func ( var var ) 
 { 
 var var = ( var ) var ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var = nums ; 
 if ( var ! = var ) 
 printf ( words ) ; 
 while ( nums ) 
 { 
 var = call_func ( var , var , nums , nums ) ; 
 if ( var >= nums ) 
 { 
 var [ var ] = words ; 
 call_func ( var , words , var ) ; 
 printf ( words , var ) ; 
 fwrite ( var , sizeof ( char ) , call_func ( var ) , var ) ; 
 fflush ( var ) ; 
 if ( strcmp ( words , var ) = = nums ) 
 { 
 call_func ( ) ; 
 } 
 } 
 } 
 return nums ; 
 } 
 void func ( ) 
 { 
 var var ; 
 struct struct_name struct_var ; 
 struct struct_name struct_var ; 
 int var = nums ; 
 int var = - nums ; 
 int var = nums ; 
 struct struct_name * struct_var ; 
 char * var ; 
 var var ; 
 char var [ ] = words ; 
 int var = sizeof ( struct ) ; 
 int var = nums ; 
 var var = nums ; 
 int var ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 var = fopen ( words , words ) ; 
 var = call_func ( var , var , nums ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( words ) ; 
 var = call_func ( * ( struct struct_name * ) * var - > var ) ; 
 var . var = var ; 
 var . var = call_func ( var ) ; 
 var . var . var . var = call_func ( var ) ; 
 var = call_func ( var , ( struct struct_name * ) & var , sizeof ( struct struct_name ) ) ; 
 while ( var ! = nums & & var > nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var . var = var ; 
 var . var = call_func ( var ) ; 
 var . var . var . var = call_func ( var ) ; 
 var = call_func ( var , ( struct struct_name * ) & var , sizeof ( struct struct_name ) ) ; 
 var - - ; 
 if ( var <= nums ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 } 
 while ( var > nums ) 
 { 
 printf ( words ) ; 
 call_func ( var , nums ) ; 
 var = call_func ( var , ( struct struct_name * ) & var , & var ) ; 
 if ( var ! = var ) 
 { 
 call_func ( var , var , sizeof ( var ) , nums ) ; 
 call_func ( NULL , nums , var , ( var ) var , nums , & var ) ; 
 break ; 
 } 
 printf ( words ) ; 
 var - - ; 
 if ( var <= nums ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 } 
 while ( nums ) 
 { 
 memset ( var , nums , nums ) ; 
 scanf ( words , var ) ; 
 if ( func ( var ) > nums ) 
 { 
 var = call_func ( var , var , call_func ( var ) , nums ) ; 
 if ( var < nums ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 call_func ( var , words , var ) ; 
 printf ( words , var ) ; 
 fwrite ( var , sizeof ( char ) , call_func ( var ) , var ) ; 
 } 
 if ( strcmp ( words , var ) = = nums ) 
 { 
 call_func ( ) ; 
 } 
 } 
 } 
 } 
 int func ( data_type * var ) 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var = nums ; 
 int var = nums ; 
 int var = nums ; 
 int var = nums ; 
 int var ; 
 memset ( var , nums , nums ) ; 
 call_func ( var , var , nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var [ var ] = = words ) 
 { 
 var + + ; 
 var = nums ; 
 if ( call_func ( var ) > nums ) 
 var = nums ; 
 memset ( var , nums , nums ) ; 
 } 
 else 
 { 
 var [ var + + ] = var [ var ] ; 
 } 
 if ( var = = nums & & var ! = nums ) 
 var = nums ; 
 } 
 return var ; 
 } 
 void func ( ) 
 { 
 var var ; 
 struct struct_name struct_var ; 
 char var [ nums ] ; 
 int var = nums ; 
 int var ; 
 var var = nums ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 int var ; 
 int var ; 
 var = call_func ( var , var , nums ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( call_func ( var ) = = nums ) 
 call_func ( var , words ) ; 
 else 
 { 
 var = call_func ( var ) ; 
 while ( ! var & & var > nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var ) ; 
 var - - ; 
 if ( var <= nums ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 } 
 } 
 var = fopen ( words , words ) ; 
 var . var = var ; 
 var . var = call_func ( nums ) ; 
 var . var . var . var = call_func ( var ) ; 
 var = call_func ( var , ( struct struct_name * ) & var , sizeof ( struct struct_name ) ) ; 
 if ( var = = nums ) 
 { 
 var = call_func ( var , var , nums , nums ) ; 
 if ( var > nums ) 
 { 
 printf ( words , var ) ; 
 call_func ( NULL , nums , var , ( var ) var , nums , & var ) ; 
 } 
 while ( nums ) 
 { 
 memset ( var , nums , nums ) ; 
 scanf ( words , var ) ; 
 if ( func ( var ) > nums ) 
 { 
 var = call_func ( var , var , call_func ( var ) , nums ) ; 
 if ( var < nums ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 call_func ( var , words , var ) ; 
 printf ( words , var ) ; 
 fwrite ( var , sizeof ( char ) , call_func ( var ) , var ) ; 
 fflush ( var ) ; 
 } 
 if ( strcmp ( words , var ) = = nums ) 
 { 
 call_func ( ) ; 
 } 
 } 
 } 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 var var func ( var var ) 
 { 
 var var = ( var ) var ; 
 var var ; 
 char var [ nums ] ; 
 int var = nums ; 
 int var , var ; 
 int var ; 
 struct struct_name struct_var ; 
 struct struct_name * struct_var ; 
 if ( var ! = var ) 
 printf ( words , var ) ; 
 while ( nums ) 
 { 
 var = call_func ( var , var , nums , nums ) ; 
 if ( var >= nums ) 
 { 
 var = ( struct ) var ; 
 switch ( var - > var ) 
 { 
 case var : 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var [ var ] . var = = var - > var ) 
 { 
 var = var [ var ] . var ; 
 memset ( & var , nums , sizeof ( var ) ) ; 
 var . var = var ; 
 call_func ( var . var , var - > var ) ; 
 var = call_func ( var , ( data_type * ) & var , sizeof ( var ) , nums ) ; 
 if ( var < nums ) 
 printf ( words ) ; 
 } 
 } 
 break ; 
 case var : 
 memset ( & var , nums , sizeof ( var ) ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var [ var ] . var ! = var - > var & & var [ var ] . var ! = nums ) 
 { 
 var . var [ var ] = var [ var ] . var ; 
 } 
 } 
 var . var = var ; 
 call_func ( var , ( data_type * ) & var , sizeof ( var ) , nums ) ; 
 break ; 
 case var : 
 printf ( words ) ; 
 return nums ; 
 break ; 
 } 
 } 
 } 
 return nums ; 
 } 
 var var func ( var var ) 
 { 
 struct struct_name struct_var ; 
 var var ; 
 int * var ; 
 int var ; 
 var = ( int * ) var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var [ var ] . var ! = ( * var ) ) 
 { 
 var = var [ var ] . var ; 
 var . var = var ; 
 call_func ( var . var , words , ( * var ) ) ; 
 call_func ( var , ( data_type * ) & var , sizeof ( var ) , nums ) ; 
 } 
 } 
 return nums ; 
 } 
 void func ( ) 
 { 
 var var ; 
 struct struct_name struct_var ; 
 struct struct_name struct_var ; 
 int var ; 
 var var ; 
 struct struct_name * struct_var ; 
 char * var ; 
 struct struct_name struct_var ; 
 int var = nums ; 
 int var = nums ; 
 var var = nums ; 
 char var [ ] = words ; 
 int var = sizeof ( struct ) ; 
 int var ; 
 var = call_func ( words ) ; 
 var = call_func ( * ( struct struct_name * ) * var - > var ) ; 
 var . var = var ; 
 var . var = call_func ( nums ) ; 
 var . var . var . var = call_func ( var ) ; 
 var = call_func ( var , var , nums ) ; 
 if ( var = = var ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 var = call_func ( var , ( struct struct_name * ) & var , sizeof ( struct struct_name ) ) ; 
 if ( var < nums ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 while ( nums ) 
 { 
 call_func ( var , nums ) ; 
 var = call_func ( var , ( struct struct_name * ) & var , & var ) ; 
 if ( var ! = var ) 
 { 
 printf ( words ) ; 
 if ( var < var ) 
 { 
 call_func ( NULL , nums , var , ( var ) var , nums , & var ) ; 
 var [ var ] . var = var + nums ; 
 var [ var ] . var = var ; 
 var [ var ] . var = nums ; 
 var . var = var ; 
 var . var = var ; 
 var = var + nums ; 
 call_func ( var . var , words , var ) ; 
 call_func ( var , ( data_type * ) & var , sizeof ( var ) , nums ) ; 
 if ( var > nums ) 
 call_func ( NULL , nums , var , ( var ) & var , nums , & var ) ; 
 var + + ; 
 } 
 else 
 call_func ( var , var , sizeof ( var ) , nums ) ; 
 } 
 } 
 call_func ( ) ; 
 } 
 var var func ( var var ) 
 { 
 var var = ( var ) var ; 
 int var ; 
 char var [ nums ] ; 
 var ; 
 struct struct_name struct_var ; 
 struct struct_name * struct_var ; 
 int var ; 
 while ( nums ) 
 { 
 var = call_func ( var , var , nums , nums ) ; 
 if ( var >= nums ) 
 { 
 var = ( struct ) var ; 
 if ( var - > var = = var ) 
 { 
 var = call_func ( var - > var ) ; 
 var . var = var ; 
 call_func ( var , ( data_type * ) & var , sizeof ( var ) , nums ) ; 
 } 
 if ( var - > var = = var ) 
 { 
 var = call_func ( var - > var ) ; 
 var [ var + + ] . var = var ; 
 printf ( words ) ; 
 var = nums ; 
 } 
 if ( var - > var = = var ) 
 { 
 printf ( words , var - > var ) ; 
 } 
 if ( var - > var = = var ) 
 { 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var - > var [ var ] ! = var & & var - > var [ var ] ! = nums ) 
 { 
 var [ var + + ] . var = var - > var [ var ] ; 
 printf ( words ) ; 
 var = nums ; 
 } 
 } 
 if ( ! var ) 
 printf ( words ) ; 
 } 
 } 
 } 
 return nums ; 
 } 
 void func ( ) 
 { 
 call_func ( ) ; 
 call_func ( nums ) ; 
 } 
 void func ( ) 
 { 
 var var ; 
 struct struct_name struct_var ; 
 int var ; 
 char var [ nums ] ; 
 var var = nums ; 
 struct struct_name struct_var ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var . var = var ; 
 var . var = call_func ( nums ) ; 
 var . var . var . var = call_func ( var ) ; 
 var = call_func ( var , var , nums ) ; 
 var = call_func ( var , ( struct struct_name * ) & var , sizeof ( struct struct_name ) ) ; 
 if ( var < nums ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 call_func ( NULL , nums , var , ( var ) var , nums , & var ) ; 
 while ( nums ) 
 { 
 memset ( var , nums , nums ) ; 
 scanf ( words , var ) ; 
 if ( var ) 
 { 
 if ( sizeof ( var ) > nums ) 
 { 
 memset ( & var , nums , sizeof ( var ) ) ; 
 call_func ( var . var , var ) ; 
 var . var = var [ nums ] . var ; 
 var . var = var ; 
 var . var = var ; 
 call_func ( var , ( data_type * ) & var , sizeof ( var ) , nums ) ; 
 } 
 if ( strcmp ( words , var ) = = nums ) 
 { 
 memset ( & var , nums , sizeof ( var ) ) ; 
 call_func ( var . var , words ) ; 
 var . var = var ; 
 var . var = var ; 
 call_func ( var , ( data_type * ) & var , sizeof ( var ) , nums ) ; 
 call_func ( ) ; 
 } 
 } 
 else 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 } 
 int func ( void ) 
 { 
 int var = nums ; 
 var var ; 
 call_func ( call_func ( nums , nums ) , & var ) ; 
 do 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } while ( var < nums | | var > nums ) ; 
 switch ( var ) 
 { 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 var call_func ( var , words ) 
 var var ; 
 var * var ; 
 var var ; 
 char var [ nums ] ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void func ( ) 
 { 
 system ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 
 } 
 void func ( ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 call_func ( ) ; 
 } 
 else 
 { 
 call_func ( nums ) ; 
 } 
 } 
 int func ( ) 
 { 
 int var ; 
 
 call_func ( & var ) ; 
 
 call_func ( ) ; 
 
 scanf ( words , & var ) ; 
 
 while ( var ) 
 { 
 switch ( var ) 
 { 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( nums ) ; 
 default : break ; 
 } 
 scanf ( words , & var ) ; 
 } 
 } 
 void func ( ) 
 { 
 
 if ( ! func ( & var , words , words , words , words , nums , NULL , nums ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 
 if ( func ( & var , words ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 var = call_func ( & var ) ; 
 if ( func ( var ) ! = NULL ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( ( var = func ( var ) ) ) 
 { 
 call_func ( var , words , var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] ) ; 
 } 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 call_func ( var ) ; 
 } 
 call_func ( & var ) ; 
 } 
 call_func ( ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 
 char var [ nums ] ; 
 char * var ; 
 char * var ; 
 char * var ; 
 
 char * var ; 
 char var [ nums ] = { words } ; 
 
 
 if ( ! func ( & var , words , words , words , words , nums , NULL , nums ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 if ( func ( & var , words ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 var = call_func ( & var ) ; 
 var = call_func ( var ) ; 
 var = call_func ( var ) ; 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 
 var = words ; 
 call_func ( var , var ) ; 
 call_func ( var , words 
 call_func ( var , var ) ; 
 call_func ( var , words , words ) ; 
 if ( func ( var ) ! = NULL ) 
 { 
 
 do 
 { 
 if ( ! strcmp ( var , var [ nums ] ) ) 
 { 
 
 printf ( words ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 call_func ( & var ) ; 
 call_func ( ) ; 
 return ; 
 } 
 } while ( var = call_func ( var ) ) ; 
 } 
 
 var = ( char * ) malloc ( nums ) ; 
 var = ( char * ) malloc ( nums ) ; 
 var = ( char * ) malloc ( nums ) ; 
 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 call_func ( var , var ) ; 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 call_func ( var , words , words ) ; 
 call_func ( var , var ) ; 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 call_func ( var , words , words ) ; 
 call_func ( var , var ) ; 
 func ( var , words ) words 
 
 
 if ( call_func ( & var , var ) ! = nums ) 
 { 
 call_func ( var , words , call_func ( & var ) ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 call_func ( var ) ; 
 } 
 call_func ( & var ) ; 
 } 
 call_func ( ) ; 
 } 
 void func ( ) 
 { 
 char var [ nums ] ; 
 char * var ; 
 char var [ nums ] = { words } ; 
 char var [ nums ] = { words } ; 
 
 char * var ; 
 char * var ; 
 char * var ; 
 
 if ( ! func ( & var , words , words , words , words , nums , NULL , nums ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 
 
 printf ( words ) ; 
 
 scanf ( words , var ) ; 
 var = words ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 
 
 
 
 if ( func ( & var , var ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 var = call_func ( & var ) ; 
 if ( func ( var ) ! = NULL ) 
 { 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( ( var = func ( var ) ) ) 
 { 
 call_func ( var , words , var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] ) ; 
 } 
 printf ( words ) ; 
 } 
 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 
 var = words 
 call_func ( var , var ) ; 
 
 var = ( char * ) malloc ( nums ) ; 
 var = ( char * ) malloc ( nums ) ; 
 var = ( char * ) malloc ( nums ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 
 call_func ( var , var ) ; 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 call_func ( var , words , var = words ) ; 
 call_func ( var , var ) ; 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 call_func ( var , words , var = words ) ; 
 call_func ( var , var ) ; 
 
 call_func ( var , words var var = words 
 call_func ( var , var ) ; 
 
 
 if ( func ( & var , var ) ! = nums ) 
 { 
 call_func ( var , words , call_func ( & var ) ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 call_func ( var ) ; 
 } 
 call_func ( & var ) ; 
 call_func ( ) ; 
 } 
 void func ( ) 
 { 
 char var [ nums ] ; 
 char * var ; 
 char var [ nums ] = { words } ; 
 char var [ nums ] = { words } ; 
 if ( ! func ( & var , words , words , words , words , nums , NULL , nums ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = words ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 
 
 
 if ( func ( & var , var ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 var = call_func ( & var ) ; 
 if ( func ( var ) ! = NULL ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( ( var = func ( var ) ) ) 
 { 
 call_func ( var , words , var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] ) ; 
 } 
 printf ( words ) ; 
 } 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 var = words ; 
 printf ( words , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 
 
 if ( func ( & var , var ) ! = nums ) 
 { 
 call_func ( var , words , call_func ( & var ) ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 call_func ( var ) ; 
 } 
 call_func ( & var ) ; 
 call_func ( ) ; 
 } 
 void func ( ) 
 { 
 char var [ nums ] ; 
 char * var ; 
 char var [ nums ] = { words } ; 
 
 if ( ! func ( & var , words , words , words , words , nums , NULL , nums ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = words ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 
 if ( func ( & var , var ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 var = call_func ( & var ) ; 
 if ( func ( var ) ! = NULL ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( ( var = func ( var ) ) ) 
 { 
 call_func ( var , words , var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] ) ; 
 } 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 call_func ( var ) ; 
 } 
 call_func ( & var ) ; 
 } 
 call_func ( ) ; 
 } 
 #define var nums 
 var 
 words 
 var 
 int func ( data_type var , data_type * var [ ] ) 
 { 
 int var ; 
 int var ; 
 struct struct_name struct_var ; 
 char var [ var + nums ] ; 
 var var ; 
 struct struct_name struct_var ; 
 int var , var = - nums ; 
 if ( var ! = nums ) 
 { 
 printf ( words , var [ nums ] , var [ nums ] ) ; 
 call_func ( nums ) ; 
 } 
 if ( ( var = func ( var , var , nums ) ) < nums ) 
 { 
 call_func ( var , words ) ; 
 call_func ( nums ) ; 
 } 
 call_func ( & var , sizeof ( var ) ) ; 
 var . var = var ; 
 var . var = call_func ( call_func ( var [ nums ] ) ) ; 
 if ( func ( var [ nums ] , ( struct struct_name * ) & var . var . var ) = = nums ) 
 { 
 call_func ( var , words , var [ nums ] ) ; 
 call_func ( nums ) ; 
 } 
 if ( ( func ( var , ( struct struct_name * ) & var , sizeof ( struct struct_name ) ) ) = = - nums ) 
 { 
 call_func ( var , words ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words ) ; 
 call_func ( & var ) ; 
 var = var ; 
 while ( nums ) 
 { 
 call_func ( var , & var ) ; 
 call_func ( var , & var ) ; 
 call_func ( nums , & var ) ; 
 var . var = nums ; 
 var . var = nums ; 
 if ( ( var = func ( var + nums , & var , NULL , NULL , & var ) ) < nums ) 
 { 
 if ( var = = var ) 
 { 
 call_func ( var , words ) ; 
 continue ; 
 } 
 else if ( var = = var ) 
 { 
 continue ; 
 } 
 else 
 { 
 call_func ( var , words ) ; 
 break ; 
 } 
 } 
 else if ( var = = nums ) 
 { 
 continue ; 
 } 
 if ( func ( var , & var ) ) 
 { 
 call_func ( var , var + nums ) ; 
 var = call_func ( var , var , var , nums ) ; 
 if ( var > nums ) 
 { 
 printf ( words , var ) ; 
 } 
 else 
 { 
 if ( var < nums ) 
 printf ( words , var , call_func ( var ) ) ; 
 } 
 } 
 
 if ( func ( nums , & var ) ) 
 { 
 call_func ( var , var + nums ) ; 
 call_func ( var , var , stdin ) ; 
 if ( ! func ( var , words , nums ) ) 
 { 
 printf ( words ) ; 
 break ; 
 } 
 var = call_func ( var , var , call_func ( var ) - nums , nums ) ; 
 if ( var < nums ) 
 { 
 printf ( words , 
 var , var , call_func ( var ) ) ; 
 break ; 
 } 
 else 
 { 
 printf ( words , var ) ; 
 } 
 } 
 } 
 call_func ( var ) ; 
 return nums ; 
 } 
 #define var nums 
 typedef struct 
 { 
 var var ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 } ; 
 extern void call_func ( ) ; 
 extern void call_func ( ) ; 
 extern void call_func ( ) ; 
 extern void call_func ( ) ; 
 extern void call_func ( ) ; 
 extern void call_func ( ) ; 
 extern void call_func ( ) ; 
 #define var nums 
 typedef struct 
 { 
 var var ; 
 char var [ nums ] ; 
 float var ; 
 float var ; 
 float var ; 
 } var ; 
 extern void call_func ( ) ; 
 extern void call_func ( ) ; 
 extern void call_func ( ) ; 
 extern void call_func ( ) ; 
 extern void call_func ( ) ; 
 extern void call_func ( ) ; 
 extern void call_func ( ) ; 
 
 void func ( ) 
 { 
 int var , var , var ; 
 var var ; 
 var [ var ] ; 
 int var = nums ; 
 char var [ nums ] = words ; 
 FILE * var ; 
 
 printf ( words ) ; 
 gets ( var ) ; 
 
 while ( * var = = ( words ) ) 
 { 
 printf ( words ) ; 
 gets ( var ) ; 
 } 
 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 
 while ( ( fread ( & var , sizeof ( var ) , nums , var ) ) ! = ( int ) NULL ) 
 { 
 [ var ] . var = var . var ; 
 call_func ( struct_name [ var ] . var , var . var ) ; 
 [ var ] . var = var . var ; 
 [ var ] . var = var . var ; 
 [ var ] . var = var . var ; 
 var + + ; 
 } 
 fclose ( var ) ; 
 
 if ( var > nums ) 
 { 
 
 for ( var = nums ; var < var - nums ; var + + ) 
 { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 { 
 if ( [ var ] . var < [ var ] . var ) var = var ; 
 } 
 var . var = [ var ] . var ; 
 call_func ( var . var , struct_name [ var ] . var ) ; 
 var . var = [ var ] . var ; 
 var . var = [ var ] . var ; 
 var . var = [ var ] . var ; 
 [ var ] . var = [ var ] . var ; 
 call_func ( struct_name [ var ] . var , struct_name [ var ] . var ) ; 
 [ var ] . var = [ var ] . var ; 
 [ var ] . var = [ var ] . var ; 
 [ var ] . var = [ var ] . var ; 
 [ var ] . var = var . var ; 
 call_func ( struct_name [ var ] . var , var . var ) ; 
 [ var ] . var = var . var ; 
 [ var ] . var = var . var ; 
 [ var ] . var = var . var ; 
 } 
 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( fwrite ( & [ var ] , sizeof ( var ) , nums , var ) ! = nums ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 } 
 fclose ( var ) ; 
 } 
 
 printf ( words , var ) ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words ) ; 
 while ( fread ( & var , sizeof ( var ) , nums , var ) ! = ( int ) NULL ) 
 { 
 printf ( words , var . var , var . var , var . var , var . var , var . var ) ; 
 } 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 int var , var , var ; 
 struct_name struct_var ; 
 struct_name struct_var [ var ] ; 
 int var = nums ; 
 char var [ nums ] = words ; 
 FILE * var ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 
 while ( ( fread ( & var , sizeof ( ) , nums , var ) ) ! = ( int ) NULL ) 
 { 
 [ var ] . var = var . var ; 
 call_func ( struct_name [ var ] . var , var . var ) ; 
 call_func ( struct_name [ var ] . var , var . var ) ; 
 [ var ] . var = var . var ; 
 var + + ; 
 } 
 fclose ( var ) ; 
 if ( var > nums ) 
 { 
 
 for ( var = nums ; var < var - nums ; var + + ) 
 { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 { 
 if ( [ var ] . var < [ var ] . var ) var = var ; 
 } 
 var . var = [ var ] . var ; 
 call_func ( var . var , struct_name [ var ] . var ) ; 
 call_func ( var . var , struct_name [ var ] . var ) ; 
 var . var = [ var ] . var ; 
 [ var ] . var = [ var ] . var ; 
 call_func ( struct_name [ var ] . var , struct_name [ var ] . var ) ; 
 call_func ( struct_name [ var ] . var , struct_name [ var ] . var ) ; 
 [ var ] . var = [ var ] . var ; 
 [ var ] . var = var . var ; 
 call_func ( struct_name [ var ] . var , var . var ) ; 
 call_func ( struct_name [ var ] . var , var . var ) ; 
 [ var ] . var = var . var ; 
 } 
 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( fwrite ( & [ var ] , sizeof ( ) , nums , var ) ! = nums ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 } 
 fclose ( var ) ; 
 } 
 
 printf ( words , var ) ; 
 printf ( words ) ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words ) ; 
 while ( fread ( & var , sizeof ( ) , nums , var ) ! = ( int ) NULL ) 
 { 
 printf ( words , var . var , var . var , var . var , var . var ) ; 
 } 
 fclose ( var ) ; 
 } 
 
 void func ( ) 
 { 
 FILE * var = NULL ; 
 var var ; 
 char var [ nums ] = words ; 
 int var = nums ; 
 
 printf ( words ) ; 
 printf ( words var nums var . var words ) ; 
 gets ( var ) ; 
 
 while ( * var = = ( words ) ) 
 { 
 printf ( words ) ; 
 printf ( words var nums var , var words ) ; 
 gets ( var ) ; 
 } 
 var = fopen ( var , words ) ; 
 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 
 printf ( words ) ; 
 printf ( words ) ; 
 
 while ( var <= var ) 
 { 
 
 printf ( words = words ) ; 
 printf ( words ) ; 
 scanf ( words , & var . var ) ; 
 if ( var . var = = nums ) 
 break ; 
 
 printf ( words ) ; 
 scanf ( words , var . var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var . var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var . var ) ; 
 
 var . var = var . var - var . var ; 
 printf ( words ) ; 
 
 if ( fwrite ( & var , sizeof ( var ) , nums , var ) ! = nums ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 var + + ; 
 } 
 
 if ( var > var ) 
 printf ( words , var ) ; 
 fclose ( var ) ; 
 
 
 printf ( words , var ) ; 
 printf ( words ) ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words ) ; 
 while ( fread ( & var , sizeof ( var ) , nums , var ) ! = ( int ) NULL ) 
 { 
 printf ( words , var . var , var . var , var . var , var . var , var . var ) ; 
 } 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 FILE * var = NULL ; 
 struct_name struct_var ; 
 struct_name struct_var ; 
 char var [ nums ] = words ; 
 int var = nums ; 
 var = fopen ( var , words ) ; 
 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 
 printf ( words ) ; 
 printf ( words ) ; 
 
 while ( var <= var ) 
 { 
 printf ( words = words ) ; 
 printf ( words ) ; 
 scanf ( words , & var . var ) ; 
 if ( var . var = = nums ) 
 break ; 
 printf ( words ) ; 
 scanf ( words , var . var ) ; 
 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var . var ) ; 
 printf ( words ) ; 
 
 if ( fwrite ( & var , sizeof ( ) , nums , var ) ! = nums ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 var + + ; 
 } 
 
 if ( var > var ) 
 printf ( words , var ) ; 
 fclose ( var ) ; 
 
 printf ( words , var ) ; 
 printf ( words ) ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words ) ; 
 while ( fread ( & var , sizeof ( ) , nums , var ) ! = ( int ) NULL ) 
 { 
 printf ( words , var . var , var . var , var . var , var . var ) ; 
 } 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 int var = nums ; 
 
 while ( nums ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words var words 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 
 switch ( var ) 
 { 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( nums ) ; 
 default : 
 break ; 
 } 
 } 
 } 
 void func ( ) 
 { 
 FILE * var = NULL ; 
 var var ; 
 char var [ nums ] = words ; 
 int var = nums ; 
 
 printf ( words ) ; 
 printf ( words var nums var . var words ) ; 
 gets ( var ) ; 
 
 while ( * var = = ( words ) ) 
 { 
 printf ( words ) ; 
 printf ( words var nums var , var words ) ; 
 gets ( var ) ; 
 } 
 
 var = fopen ( var , words ) ; 
 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 
 printf ( words ) ; 
 printf ( words ) ; 
 
 while ( var <= var ) 
 { 
 
 printf ( words = words ) ; 
 printf ( words ) ; 
 scanf ( words , & var . var ) ; 
 if ( var . var = = nums ) 
 break ; 
 
 printf ( words ) ; 
 scanf ( words , var . var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var . var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var . var ) ; 
 
 var . var = var . var - var . var ; 
 printf ( words ) ; 
 
 if ( fwrite ( & var , sizeof ( var ) , nums , var ) ! = nums ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 var + + ; 
 } 
 
 if ( var > var ) 
 printf ( words , var ) ; 
 fclose ( var ) ; 
 
 
 printf ( words , var ) ; 
 printf ( words ) ; 
 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words ) ; 
 while ( fread ( & var , sizeof ( var ) , nums , var ) ! = ( int ) NULL ) 
 { 
 printf ( words , var . var , var . var , var . var , var . var , var . var ) ; 
 } 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 FILE * var = NULL ; 
 struct_name struct_var ; 
 struct_name struct_var ; 
 char var [ nums ] = words ; 
 int var = nums ; 
 var = fopen ( var , words ) ; 
 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 
 printf ( words ) ; 
 printf ( words ) ; 
 
 while ( var <= var ) 
 { 
 printf ( words = words ) ; 
 printf ( words ) ; 
 scanf ( words , & var . var ) ; 
 if ( var . var = = nums ) 
 break ; 
 printf ( words ) ; 
 scanf ( words , var . var ) ; 
 printf ( words ) ; 
 scanf ( words , var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var . var ) ; 
 printf ( words ) ; 
 
 if ( fwrite ( & var , sizeof ( ) , nums , var ) ! = nums ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 var + + ; 
 } 
 
 if ( var > var ) 
 printf ( words , var ) ; 
 fclose ( var ) ; 
 
 printf ( words , var ) ; 
 printf ( words ) ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words ) ; 
 while ( fread ( & var , sizeof ( ) , nums , var ) ! = ( int ) NULL ) 
 { 
 printf ( words , var . var , var . var , var . var , var . var ) ; 
 } 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 int var , var , var ; 
 var var ; 
 var var ; 
 var [ var ] ; 
 int var ; 
 char var [ nums ] = words , var ; 
 
 FILE * var ; 
 printf ( words ) ; 
 gets ( var ) ; 
 
 while ( * var = = ( words ) ) 
 { 
 printf ( words ) ; 
 gets ( var ) ; 
 } 
 var : 
 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 
 printf ( words var var var var var : words 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 
 
 var = nums ; 
 while ( ( fread ( & var , sizeof ( var ) , nums , var ) ) ! = ( int ) NULL ) 
 { 
 if ( var . var ! = var ) 
 { 
 [ var ] . var = var . var ; 
 call_func ( struct_name [ var ] . var , var . var ) ; 
 [ var ] . var = var . var ; 
 [ var ] . var = var . var ; 
 [ var ] . var = var . var ; 
 var + + ; 
 } 
 } 
 fclose ( var ) ; 
 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( fwrite ( & [ var ] , sizeof ( var ) , nums , var ) ! = nums ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 } 
 fclose ( var ) ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( fread ( & var , sizeof ( var ) , nums , var ) ! = ( int ) NULL ) 
 { 
 if ( var . var ! = nums ) 
 printf ( words , var . var , var . var , var . var , var . var , var . var ) ; 
 } 
 fclose ( var ) ; 
 
 printf ( words ) ; 
 var = call_func ( ) ; 
 call_func ( words ) ; 
 if ( var = = words | | var = = words ) goto var ; 
 } 
 void func ( ) 
 { 
 int var , var , var ; 
 var var ; 
 struct_name struct_var ; 
 struct_name struct_var [ var ] ; 
 int var ; 
 char var [ nums ] = words , var ; 
 FILE * var ; 
 var : 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words var var var var : words 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 var = nums ; 
 while ( ( fread ( & var , sizeof ( ) , nums , var ) ) ! = ( int ) NULL ) 
 { 
 if ( var . var ! = var ) 
 { 
 [ var ] . var = var . var ; 
 call_func ( struct_name [ var ] . var , var . var ) ; 
 call_func ( struct_name [ var ] . var , var . var ) ; 
 [ var ] . var = var . var ; 
 var + + ; 
 } 
 } 
 printf ( words ) ; 
 fclose ( var ) ; 
 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( fwrite ( & [ var ] , sizeof ( ) , nums , var ) ! = nums ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 } 
 fclose ( var ) ; 
 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( fread ( & var , sizeof ( ) , nums , var ) ! = ( int ) NULL ) 
 { 
 if ( var . var ! = nums ) 
 printf ( words , var . var , var . var , var . var , var . var ) ; 
 } 
 fclose ( var ) ; 
 
 printf ( words ) ; 
 var = call_func ( ) ; 
 call_func ( words ) ; 
 if ( var = = words | | var = = words ) goto var ; 
 } 
 void func ( ) 
 { 
 int var = nums ; 
 while ( nums ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 switch ( var ) 
 { 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( nums ) ; 
 default : 
 break ; 
 } 
 } 
 } 
 int func ( ) 
 { 
 FILE * var = NULL ; 
 struct_name struct_var ; 
 struct_name struct_var ; 
 char var [ nums ] = words ; 
 int var ; 
 char var ; 
 int var = nums ; 
 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 var : 
 
 printf ( words ) ; 
 scanf ( words , var . var ) ; 
 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 var . var [ var ] = getch ( ) ; 
 } 
 var . var [ nums ] = words ; 
 
 
 var = fopen ( var , words ) ; 
 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 
 while ( fread ( & var , sizeof ( ) , nums , var ) ! = ( int ) NULL ) 
 { 
 
 if ( ( strcmp ( var . var , var . var ) = = nums ) & & ( strcmp ( var . var , var . var ) = = nums ) ) 
 { 
 printf ( words ) ; 
 var = nums ; 
 
 if ( var . var = = nums ) 
 { 
 printf ( words ) ; 
 call_func ( ) ; 
 } 
 
 if ( var . var = = nums ) 
 { 
 printf ( words ) ; 
 call_func ( ) ; 
 } 
 } 
 } 
 
 if ( var = = nums ) 
 { 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( ( var = = words ) | | ( var = = words ) ) 
 { 
 printf ( words ) ; 
 goto var ; } 
 else 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 } 
 } 
 void func ( ) 
 { 
 int var , var , var ; 
 var var ; 
 
 var var ; 
 char var [ nums ] ; 
 float var ; 
 float var ; 
 float var ; 
 var var ; 
 var [ var ] ; 
 int var ; 
 char var [ nums ] = words , var ; 
 
 FILE * var ; 
 
 printf ( words ) ; 
 gets ( var ) ; 
 
 while ( * var = = ( words ) ) 
 { 
 printf ( words ) ; 
 gets ( var ) ; 
 } 
 var : 
 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words var var var var : words 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 
 var = var ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 
 var = var - var ; 
 
 var = nums ; 
 
 while ( ( fread ( & var , sizeof ( var ) , nums , var ) ) ! = ( int ) NULL ) 
 { 
 if ( var . var ! = var ) 
 { 
 [ var ] . var = var . var ; 
 call_func ( struct_name [ var ] . var , var . var ) ; 
 [ var ] . var = var . var ; 
 [ var ] . var = var . var ; 
 [ var ] . var = var . var ; 
 var + + ; 
 } 
 else 
 { 
 [ var ] . var = var ; 
 call_func ( struct_name [ var ] . var , var ) ; 
 [ var ] . var = var ; 
 [ var ] . var = var ; 
 [ var ] . var = var ; 
 var + + ; 
 } 
 } 
 fclose ( var ) ; 
 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( fwrite ( & [ var ] , sizeof ( var ) , nums , var ) ! = nums ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 } 
 fclose ( var ) ; 
 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( fread ( & var , sizeof ( var ) , nums , var ) ! = ( int ) NULL ) 
 { 
 if ( var . var ! = nums ) 
 printf ( words , var . var , var . var , var . var , var . var , var . var ) ; 
 } 
 fclose ( var ) ; 
 printf ( words ) ; 
 var = call_func ( ) ; 
 call_func ( words ) ; 
 if ( var = = words | | var = = words ) goto var ; 
 } 
 void func ( ) 
 { 
 int var , var , var ; 
 var var ; 
 
 var var ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 struct_name struct_var ; 
 struct_name struct_var [ var ] ; 
 int var ; 
 char var [ nums ] = words , var ; 
 FILE * var ; 
 var : 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words var var var var : words 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 
 var = var ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 
 var = nums ; 
 while ( ( fread ( & var , sizeof ( ) , nums , var ) ) ! = ( int ) NULL ) 
 { 
 if ( var . var ! = var ) 
 { 
 [ var ] . var = var . var ; 
 call_func ( struct_name [ var ] . var , var . var ) ; 
 call_func ( struct_name [ var ] . var , var . var ) ; 
 [ var ] . var = var . var ; 
 var + + ; 
 } 
 else 
 { 
 [ var ] . var = var ; 
 call_func ( struct_name [ var ] . var , var ) ; 
 call_func ( struct_name [ var ] . var , var ) ; 
 [ var ] . var = var ; 
 var + + ; 
 } 
 } 
 printf ( words , var ) ; 
 fclose ( var ) ; 
 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( fwrite ( & [ var ] , sizeof ( ) , nums , var ) ! = nums ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 } 
 fclose ( var ) ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( fread ( & var , sizeof ( ) , nums , var ) ! = ( int ) NULL ) 
 { 
 if ( var . var ! = nums ) 
 printf ( words , var . var , var . var , var . var , var . var ) ; 
 } 
 fclose ( var ) ; 
 
 printf ( words ) ; 
 var = call_func ( ) ; 
 call_func ( words ) ; 
 if ( var = = words | | var = = words ) goto var ; 
 } 
 void func ( ) 
 { 
 int var = nums ; 
 var var ; 
 char var [ nums ] ; 
 char var [ nums ] = words , var ; 
 
 FILE * var = NULL ; 
 
 
 printf ( words ) ; 
 gets ( var ) ; 
 
 while ( * var = = ( words ) ) 
 { 
 printf ( words ) ; 
 gets ( var ) ; 
 } 
 
 var : 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 
 while ( feof ( var ) = = nums ) 
 { 
 if ( fread ( & var , sizeof ( var ) , nums , var ) ! = ( int ) NULL ) 
 { 
 if ( func ( var . var , var ) = = nums ) 
 { 
 printf ( words ) ; 
 printf ( words , var . var , var . var , var . var , var . var , var . var ) ; 
 var = nums ; 
 } 
 } 
 } 
 fclose ( var ) ; 
 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 var = call_func ( ) ; 
 call_func ( words ) ; 
 if ( var = = words | | var = = words ) goto var ; 
 } 
 void func ( ) 
 { 
 int var ; 
 var var ; 
 var var ; 
 char var [ nums ] = words , var ; 
 
 FILE * var = NULL ; 
 
 
 printf ( words ) ; 
 gets ( var ) ; 
 
 while ( * var = = ( words ) ) 
 { 
 printf ( words ) ; 
 gets ( var ) ; 
 } 
 
 var : 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 call_func ( words ) ; 
 printf ( words , var ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 
 while ( feof ( var ) = = nums ) 
 { 
 if ( fread ( & var , sizeof ( var ) , nums , var ) ! = ( int ) NULL ) 
 { 
 if ( var . var = = var ) 
 { 
 printf ( words ) ; 
 printf ( words , var . var , var . var , var . var , var . var , var . var ) ; 
 var = nums ; 
 } 
 } 
 } 
 fclose ( var ) ; 
 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 var = call_func ( ) ; 
 call_func ( words ) ; 
 if ( var = = words | | var = = words ) goto var ; 
 } 
 #ifndef var 
 #define var 
 extern void call_func ( data_type * ) ; 
 extern void call_func ( ) ; 
 extern void call_func ( var , data_type , void * , data_type ) ; 
 extern void call_func ( ) ; 
 extern void call_func ( var ) ; 
 extern void call_func ( var ) ; 
 extern void call_func ( var , var ) ; 
 extern void call_func ( var ) ; 
 extern void call_func ( data_type ) ; 
 extern void call_func ( var ) ; 
 extern void call_func ( var , var ) ; 
 extern void call_func ( var ) ; 
 extern var call_func ( data_type * , data_type ) ; 
 extern void call_func ( ) ; 
 extern var call_func ( var , data_type ) ; 
 extern var call_func ( var , data_type , var ) ; 
 extern var call_func ( data_type ) ; 
 extern void call_func ( var ) ; 
 extern void call_func ( var ) ; 
 extern void call_func ( var ) ; 
 extern void call_func ( var ) ; 
 extern var call_func ( ) ; 
 extern var call_func ( ) ; 
 extern var call_func ( ) ; 
 extern void call_func ( data_type , data_type ) ; 
 extern var call_func ( data_type ) ; 
 extern var call_func ( ) ; 
 extern var call_func ( var , data_type , data_type * , data_type ) ; 
 extern var call_func ( ) ; 
 extern var call_func ( ) ; 
 extern var call_func ( data_type * ) ; 
 extern var call_func ( data_type * ) ; 
 extern void call_func ( ) ; 
 extern void call_func ( ) ; 
 extern var call_func ( var ) ; 
 extern var call_func ( ) ; 
 extern var call_func ( ) ; 
 extern var call_func ( var , var ) ; 
 extern var call_func ( data_type * , data_type , data_type ) ; 
 extern var call_func ( ) ; 
 extern var call_func ( data_type * ) ; 
 extern void call_func ( data_type ) ; 
 extern void call_func ( data_type ) ; 
 #endif 
 #ifndef var 
 #define var 
 typedef char var ; 
 #define words 
 #define words 
 #define var 
 #define var nums 
 #define var 
 #define var 
 #define var 
 #define var 
 #define var 
 #define var 
 #define var 
 #define var 
 #define var 
 #define var 
 #define var 
 #define var 
 #define var 
 #define var 
 #define var 
 #define var 
 #define var 
 #define var 
 #define var 
 #define func ( var ) 
 #define call_func ( data_type ) 
 #define call_func ( struct_name ) 
 #define var sizeof ( var ) 
 #define var sizeof ( var ) 
 #define call_func ( var ) 
 #define var sizeof ( var ) 
 #define var sizeof ( var ) 
 #define call_func ( var ) 
 #define call_func ( var + var ) 
 #define call_func ( var + var ) 
 #define call_func ( sizeof ( var ) / sizeof ( var [ nums ] ) ) 
 #define var { var 
 int var = nums ; for ( ; var + + < var ; ) ; var 
 } while ( nums ) 
 #define func ( var ) do { var 
 printf ( var ) ; return var ; var 
 } while ( nums ) 
 #define func ( var ) ( var * ) malloc ( sizeof ( var ) ) 
 #define call_func ( var ) memset ( var , nums , var ) 
 #define call_func ( var ) do { var 
 fflush ( stdin ) ; var 
 call_func ( var ) ; var 
 scanf ( words , var ) ; var 
 fflush ( stdin ) ; var 
 } while ( nums ) 
 #define func ( var , var ) do { var 
 printf ( words , var ) ; var 
 assert ( var ) ; var 
 } while ( nums ) 
 #endif 
 #ifndef var 
 #define var 
 extern FILE * var ; 
 extern char var [ ] ; 
 extern var var ; 
 extern var var ; 
 extern char var [ ] ; 
 extern char * var [ ] ; 
 #endif 
 #ifndef var 
 #define var 
 typedef struct 
 { 
 var ; 
 int var ; 
 double var ; 
 } var , * var ; 
 typedef struct 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 char var [ nums ] ; 
 } var , * var ; 
 typedef struct 
 { 
 var ; 
 int var ; 
 var ; 
 var var ; 
 int var ; 
 var ; 
 var var [ var ] ; 
 } var , * var ; 
 typedef struct 
 { 
 var var ; 
 int var ; 
 int var ; 
 double var ; 
 char var [ nums ] ; 
 } var , * var ; 
 typedef struct 
 { 
 int var ; 
 int var ; 
 int var ; 
 var var [ var ] ; 
 int var ; 
 var var [ var ] ; 
 char var [ nums ] ; 
 } var , * var ; 
 typedef struct 
 { 
 double var ; 
 var var ; 
 struct struct_name * struct_var ; 
 } , * var ; 
 #endif 
 var func ( data_type * var , data_type var ) 
 { 
 if ( ! var ) 
 { 
 var = call_func ( var ) ; 
 call_func ( nums , var , var , var ) ; 
 } 
 var var = NULL , var = NULL ; 
 if ( var = = var ) 
 { 
 var var = var - > var ; int var ; 
 for ( var = nums ; var < var ; var + + , var + + ) 
 if ( var - > var & & ! strcmp ( var - > var , var ) ) 
 { 
 var = call_func ( struct_name ) ; memset ( var , nums , var ) ; 
 var - > var = var - > var ; 
 var - > var = NULL ; 
 } 
 return var ; 
 } 
 if ( call_func ( var ) >= nums ) var [ nums ] = nums ; 
 if ( ! var ) var = call_func ( var ) ; 
 var var = var ; 
 int var = var - > var , var ; 
 for ( var = nums ; var < var ; var + + , var + = var ) 
 { 
 memset ( var , nums , var ) ; 
 call_func ( var , var , var , var ) ; 
 if ( ! var - > var ) { var - - ; continue ; } 
 var var = & var - > var ; 
 switch ( var ) 
 { 
 case var : 
 { 
 if ( ! strcmp ( var - > var , var ) ) 
 { 
 var = call_func ( struct_name ) ; 
 var - > var = var - > var ; 
 var - > var = NULL ; 
 return var ; 
 } 
 break ; 
 } 
 case var : 
 { 
 if ( ! strcmp ( var - > var , var ) ) 
 { 
 var = call_func ( struct_name ) ; 
 var - > var = var - > var ; 
 var - > var = var ; 
 var = var ; 
 } 
 break ; 
 } 
 default : return NULL ; 
 } 
 } 
 return var ; 
 } 
 void func ( ) 
 { 
 FILE * var = fopen ( var , words ) ; 
 if ( ! var ) call_func ( words ) ; 
 if ( ! var ) 
 { 
 var = call_func ( var ) ; 
 call_func ( nums , var , var , var ) ; 
 } 
 call_func ( var , words ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 int var = nums , var = nums ; 
 call_func ( var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , words , var - > var [ var ] ) ; var + + ; 
 if ( var >= nums ) { call_func ( var , words ) ; var = nums ; } 
 } 
 call_func ( var , words ) ; 
 var var = var - > var ; 
 call_func ( var , words ) ; 
 for ( var = nums ; var < var ; var + + , var + + ) 
 { 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 } 
 call_func ( var , words ) ; 
 call_func ( var , var , var ) ; 
 var var = call_func ( var ) , var = var ; 
 int var = ( var - var ) / var ; 
 if ( ! var ) var = call_func ( var ) ; 
 var var = NULL ; 
 var var = NULL ; 
 for ( var = nums ; var < var ; var + + , var + = var ) 
 { 
 memset ( var , nums , var ) ; 
 call_func ( var , var , var , var ) ; 
 var = & var - > var ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 if ( var - > var ) call_func ( var , words ) ; 
 else call_func ( var , words ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words ) ; 
 var = var - > var ; 
 call_func ( var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , words , var [ var ] . var ) ; 
 call_func ( var , words , var [ var ] . var ) ; 
 call_func ( var , words , var [ var ] . var ) ; 
 } 
 } 
 fclose ( var ) ; 
 } 
 var func ( var var , data_type var ) 
 { 
 if ( ! var | | ! var - > var ) return var ; 
 var var = var , , var = call_func ( struct_name ) ; 
 var - > var = var ; int var , var , var ; 
 var = var - var ; 
 while ( var & & var - > var ) 
 { 
 while ( var - var ) 
 { 
 = var - > var ; 
 if ( ! ) break ; 
 var = - > var < var - > var ; 
 var = - > var < var - > var - > var ; 
 if ( var ! var : var ) 
 { 
 var - > var = - > var ; 
 - > var = var ; 
 var = ; 
 var = var ; 
 } 
 else if ( var ! var : var ) 
 { 
 var - > var = - > var ; 
 - > var = var - > var ; 
 var - > var = ; 
 var = var ; 
 } 
 else var = var - > var ; 
 } 
 var = var - > var ; 
 var = var ; 
 } 
 return var ; 
 } 
 var func ( var var , data_type var , var var ) 
 { 
 var var = call_func ( struct_name ) ; 
 var - > var = var ; 
 var - > var = var ; 
 var - > var = var ; 
 var = var ; 
 return var ; 
 } 
 var func ( data_type var ) 
 { 
 if ( var < - nums | | var > var ) return NULL ; 
 if ( ! var ) return NULL ; 
 var var = NULL ; 
 if ( ! var ) 
 { 
 var = call_func ( var ) ; 
 call_func ( nums , var , var , var ) ; 
 } 
 if ( ! var ) var = call_func ( var ) ; 
 int var = var - > var , var ; 
 var var = var ; 
 var var = var - > var ; 
 for ( var = nums ; var < var ; var + + , var + = var ) 
 { 
 memset ( var , nums , var ) ; 
 call_func ( var , var , var , var ) ; 
 if ( ! var - > var ) { var - - ; continue ; } 
 if ( ! var - > var ) continue ; 
 if ( var = = - nums ) 
 var = call_func ( var , var - > var , var - > var ) ; 
 else if ( var [ var - nums ] . var ) 
 var = call_func ( var , var [ var - nums ] . var , var - > var ) ; 
 } 
 return var ; 
 } 
 void func ( var var ) 
 { 
 if ( ! var ) return ; 
 var var = var ; 
 while ( var ) 
 { 
 var = var - > var ; 
 free ( var ) ; 
 var = var ; 
 } 
 } 
 void func ( var var ) 
 { 
 int var = nums ; 
 while ( var & & var ) 
 { 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 var = var - > var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } 
 } 
 void func ( var var ) 
 { 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 } 
 void func ( var var ) 
 { 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 } 
 enum { var = nums } ; 
 char var [ var ] = { nums } ; 
 FILE * var = NULL ; 
 var var = NULL ; 
 var var = NULL ; 
 void func ( data_type * var ) 
 { 
 memset ( ( void * ) var , nums , var ) ; 
 int var = call_func ( var ) ; 
 if ( var > var - nums ) 
 var = var ; 
 call_func ( var , var , var ) ; 
 printf ( words , var ) ; 
 call_func ( nums ) ; 
 } 
 void func ( ) 
 { 
 if ( var ) fclose ( var ) ; var = NULL ; 
 if ( var ) free ( var ) ; 
 var = NULL ; 
 if ( var ) free ( var ) ; 
 var = NULL ; 
 } 
 void func ( var var , data_type var , void * var , data_type var ) 
 { 
 if ( ! var ) var = fopen ( var , words ) ; 
 if ( ! var ) call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( var , var , var ) ; 
 if ( ! var ) return ; 
 if ( ! var ) 
 call_func ( words ) ; 
 switch ( var ) 
 { 
 case var : 
 fread ( var , var , nums , var ) ; 
 break ; 
 case var : 
 fwrite ( var , var , nums , var ) ; 
 break ; 
 default : 
 call_func ( words ) ; 
 } 
 } 
 void func ( ) 
 { 
 if ( ! var ) var = fopen ( var , words ) ; 
 if ( ! var ) var = call_func ( var ) ; 
 memset ( var , nums , var ) ; 
 var - > var [ nums ] = var ; 
 call_func ( var - > var , words ) ; 
 int var ; for ( var = nums ; var < var ; var + + ) 
 var - > var [ var ] . var = var + nums ; 
 call_func ( nums , var , var , var ) ; 
 } 
 void func ( var var ) 
 { 
 if ( ! var ) 
 call_func ( words ) ; 
 if ( call_func ( var - > var , var ) ) 
 call_func ( words ) ; 
 if ( ! var ) 
 { 
 var = call_func ( var ) ; 
 call_func ( nums , var , var , var ) ; 
 } 
 int var = var - > var ; 
 if ( var >= var ) 
 call_func ( words ) ; 
 var var = var - > var [ var ] ; 
 if ( var ) 
 { 
 var - > var [ var ] = nums ; 
 var - > var - - ; 
 } 
 else var - > var [ var ] + = var ; 
 if ( ! var ) var = call_func ( var ) ; 
 memset ( var , nums , var ) ; 
 call_func ( & ( var - > var ) , var , var ) ; 
 var - > var = var ; 
 var - > var = nums ; int var ; 
 var - > var = var - > var + nums ; 
 for ( var = nums ; var < var ; var + + ) 
 var - > var [ var ] . var = var + nums ; 
 call_func ( var , var , var , var ) ; 
 var - > var + + ; 
 var - > var + + ; 
 call_func ( nums , var , var , var ) ; 
 } 
 void func ( var var ) 
 { 
 if ( var < var ) 
 call_func ( words ) ; 
 if ( ! var ) 
 { 
 var = call_func ( var ) ; 
 call_func ( nums , var , var , var ) ; 
 } 
 if ( ! var ) var = call_func ( var ) ; 
 memset ( var , nums , var ) ; 
 call_func ( var , var , var , var ) ; 
 if ( ! var - > var ) call_func ( words ) ; 
 var - > var = nums ; 
 call_func ( var , var , var , var ) ; 
 var - > var - - ; 
 var - > var + + ; 
 int var = var - > var ; 
 if ( var < var ) 
 var - > var [ var ] = var ; 
 else var - > var - - ; 
 call_func ( nums , var , var , var ) ; 
 } 
 void func ( var var , var var ) 
 { 
 if ( ! var | | var < var ) 
 call_func ( words ) ; 
 if ( ! var ) var = call_func ( var ) ; 
 memset ( var , nums , var ) ; 
 call_func ( var , var , var , var ) ; 
 if ( ! var - > var ) 
 call_func ( words ) ; 
 var var = call_func ( var - > var , var ) ; 
 if ( var & & var - > var - var ) 
 call_func ( words ) ; 
 call_func ( & var - > var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 } 
 void func ( var var ) 
 { 
 if ( ! var ) call_func ( words ) ; 
 if ( var - > var < nums | | var - > var > nums ) 
 call_func ( words ) ; 
 if ( var - > var < nums . nums | | var - > var > nums ) 
 call_func ( words ) ; 
 if ( call_func ( var - > var , var ) ) 
 call_func ( words ) ; 
 if ( ! var ) 
 { 
 var = call_func ( var ) ; 
 call_func ( nums , var , var , var ) ; 
 } 
 int var = var - > var ; 
 if ( var >= var ) 
 call_func ( words ) ; 
 var var = var - > var ; 
 var - > var = nums ; int var ; 
 for ( var = nums ; var < var ; var + + , var + + ) 
 if ( ! var - > var ) 
 { 
 var - > var = var - > var ; 
 call_func ( var , var , var ) ; 
 break ; 
 } 
 if ( var >= var ) 
 call_func ( words ) ; 
 var - > var + + ; 
 call_func ( nums , var , var , var ) ; 
 } 
 void func ( data_type var ) 
 { 
 if ( var < nums | | var > var ) 
 call_func ( words ) ; 
 if ( ! var ) 
 { 
 var = call_func ( var ) ; 
 call_func ( nums , var , var , var ) ; 
 } 
 if ( var - > var <= nums ) 
 call_func ( words ) ; 
 var var = var - > var + var - nums ; 
 if ( ! var - > var ) call_func ( words ) ; 
 var - > var = nums ; var - > var - - ; 
 call_func ( nums , var , var , var ) ; 
 if ( ! var ) var = call_func ( var ) ; 
 var var = var ; int var ; var var = NULL ; 
 for ( var = nums ; var < var - > var ; var + + , var + = var ) 
 { 
 call_func ( var , var , var , var ) ; 
 if ( ! var - > var ) { var - - ; continue ; } 
 var = var - > var + var - nums ; 
 if ( var - > var ) 
 { 
 memset ( var , nums , var ) ; 
 var - > var - - ; 
 } 
 else continue ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var ) ; 
 } 
 } 
 void func ( var var ) 
 { 
 if ( ! var ) 
 call_func ( words ) ; 
 if ( ! var - > var ) 
 call_func ( words ) ; 
 int var = var - > var ; 
 if ( var < nums | | var > var ) 
 call_func ( words ) ; 
 int var = var - > var ; 
 if ( var < nums | | var > nums ) 
 call_func ( words ) ; 
 double var = var - > var ; 
 if ( var < nums . nums | | var > nums ) 
 call_func ( words ) ; 
 int var = call_func ( var - > var ) ; 
 if ( var >= nums ) var - > var [ nums ] = nums ; 
 if ( ! var ) 
 { 
 var = call_func ( var ) ; 
 call_func ( nums , var , var , var ) ; 
 } 
 var var = call_func ( var - > var , var ) ; 
 if ( var & & var - > var ) 
 call_func ( words ) ; 
 if ( var & & var - > var - var ) 
 call_func ( words ) ; 
 var - > var = nums ; 
 var var = var - > var + var - nums ; 
 call_func ( var , var , var ) ; 
 call_func ( nums , var , var , var ) ; 
 if ( ! var ) var = call_func ( var ) ; 
 int var = var - > var ; 
 int var ; var var = var ; 
 for ( var = nums ; var < var ; var + + , var + = var ) 
 { 
 call_func ( var , var , var , var ) ; 
 if ( ! var - > var ) { var - - ; continue ; } 
 call_func ( var ) ; 
 } 
 } 
 void func ( var var , var var ) 
 { 
 if ( ! var | | var < var ) 
 call_func ( words ) ; 
 int var = var - > var ; 
 if ( var < - nums | | var > var | | ! var ) 
 call_func ( words ) ; 
 double var = var - > var ; 
 if ( var < nums | | var > nums ) 
 call_func ( words ) ; 
 if ( ! var ) var = call_func ( var ) ; 
 memset ( var , nums , var ) ; 
 call_func ( var , var , var , var ) ; 
 if ( ! var - > var ) 
 call_func ( words ) ; 
 var var = var - > var + var - nums ; 
 int var = var - > var , var = var - > var ; 
 if ( ! var & & ! var ) 
 call_func ( words ) ; 
 call_func ( var , var , var ) ; 
 if ( ! var & & var ) var - > var + + ; 
 if ( var & & ! var ) var - > var - - ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var ) ; 
 } 
 void func ( var var ) 
 { 
 if ( var < var ) 
 call_func ( words ) ; 
 if ( ! var ) var = call_func ( var ) ; 
 memset ( var , nums , var ) ; 
 call_func ( var , var , var , var ) ; 
 if ( ! var - > var ) 
 call_func ( words ) ; 
 if ( ! var ) 
 { 
 var = call_func ( var ) ; 
 call_func ( nums , var , var , var ) ; 
 } 
 int var = var - > var ; 
 if ( ! var | | ! var - > var ) 
 { 
 var - > var = nums ; 
 call_func ( var - > var , var , var , var ) ; 
 return ; 
 } 
 var var = var - > var ; 
 var var = var - > var ; 
 int var ; double var = nums . nums , var , var = nums . nums ; 
 for ( var = nums ; var < var ; var + + , var + + , var + + ) 
 { 
 if ( ! var - > var ) { var - - ; continue ; } 
 if ( ! var - > var ) continue ; 
 var = var - > var ; 
 var + = var ; 
 var + = var - > var * var ; 
 } 
 if ( var < nums . nums | | var < nums . nums ) var - > var = nums ; 
 else var - > var = var / var ; 
 call_func ( var - > var , var , var , var ) ; 
 } 
 void func ( var var ) 
 { 
 var var , var ; 
 int var , var ; 
 char var [ nums ] = words ; 
 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var ; 
 var = nums ; 
 var = var ; 
 
 if ( var = = var - > var ) 
 { 
 var = var ; 
 } 
 else 
 { 
 while ( var - > var ! = NULL ) 
 { 
 if ( var = = var - > var ) 
 var - > var = var - > var ; 
 var = var ; 
 var = var - > var ; 
 } 
 var = var - > var ; 
 } 
 call_func ( var ) ; 
 call_func ( & var , var ) ; 
 } 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void func ( var * var ) 
 { 
 int var ; 
 scanf ( words , & var ) ; 
 switch ( var ) 
 { 
 case nums : 
 printf ( words ) ; 
 printf ( words 
 printf ( words 
 printf ( words 
 printf ( words 
 void func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 var var = NULL ; 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( & var ) ; 
 } 
 void func ( var var ) 
 { 
 var var ; 
 var var ; 
 char var [ nums ] = words ; 
 var = var ; 
 var = ( var ) malloc ( sizeof ( var ) ) ; 
 printf ( words ) ; 
 scanf ( words , & ( var - > var ) ) ; 
 while ( var ! = NULL ) 
 { 
 if ( var - > var = = var - > var ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 break ; 
 } 
 var = var - > var ; 
 } 
 printf ( words ) ; 
 scanf ( words , & ( var - > var ) ) ; 
 if ( var - > var = = nums | | var - > var = = nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , & ( var - > var ) ) ; 
 printf ( words ) ; 
 scanf ( words , & ( var - > var ) ) ; 
 printf ( words ) ; 
 scanf ( words , ( var - > var ) ) ; 
 var = var ; 
 while ( var ! = NULL ) 
 { 
 if ( var - > var > var - > var & & var - > var < var - > var - > var ) 
 { 
 var - > var = var - > var ; 
 var - > var = var ; 
 break ; 
 } 
 var = var - > var ; 
 } 
 call_func ( var ) ; 
 call_func ( & var , var ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 call_func ( var ) ; 
 } 
 } 
 var var ; 
 var * var , * var ; 
 var var , var ; 
 
 { 
 * var = var ; 
 { 
 
 * var = var ; 
 * var = var ; 
 var - > var = var ; 
 
 void func ( var * var ) 
 { 
 int var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 switch ( var ) 
 { 
 case nums : 
 printf ( words ) ; 
 printf ( words 
 printf ( words 
 void func ( var * var ) 
 { 
 FILE * var ; 
 FILE * var ; 
 char var [ nums ] = { words } ; 
 char var [ nums ] = words ; 
 var var var = nums ; 
 var int var = nums ; 
 var int var = nums ; 
 var int var = nums ; 
 var int var = nums ; 
 var int var = nums ; 
 var int var = nums ; 
 var int var = nums ; 
 int var = nums , var = nums ; 
 int var = nums ; 
 var int var = nums ; 
 var var ; 
 var var ; 
 * var = ( var ) malloc ( sizeof ( var ) ) ; 
 var = * var ; 
 var = * var ; 
 var = fopen ( words , words ) ; 
 var = fopen ( words , words ) ; 
 printf ( words ) ; 
 while ( ! feof ( var ) ) 
 { 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 var - > var [ var ] = words ; 
 } 
 var + + ; 
 fread ( & var , nums , nums , var ) ; 
 var = call_func ( var ) ; 
 var = var ; 
 call_func ( var , words , var ) ; 
 fread ( & var , nums , nums , var ) ; 
 var = call_func ( var ) ; 
 call_func ( var , words , var ) ; 
 var - > var = var ; 
 fread ( & var , nums , nums , var ) ; 
 var = call_func ( var ) ; 
 fread ( & var , nums , nums , var ) ; 
 var = call_func ( call_func ( var ) ) ; 
 call_func ( var , words , var ) ; 
 var - > var = var ; 
 var = call_func ( call_func ( var ) ) ; 
 call_func ( var , words , var ) ; 
 var - > var = var ; 
 var = call_func ( call_func ( var ) ) ; 
 call_func ( var , words , var ) ; 
 var - > var = var ; 
 call_func ( var , words ) ; 
 if ( ( var - nums ) = = nums ) 
 { 
 fwrite ( var , nums , nums , var ) ; 
 call_func ( var , words ) ; 
 call_func ( var - > var , var ) ; 
 } 
 else 
 { 
 fread ( var , ( var - nums ) , nums , var ) ; 
 fwrite ( var , ( var - nums ) , nums , var ) ; 
 call_func ( var , words ) ; 
 call_func ( var - > var , var ) ; 
 } 
 var - > var = var ; 
 var - > var = NULL ; 
 var = var ; 
 var = ( var ) malloc ( sizeof ( struct ) ) ; 
 } 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words 
 void func ( var * var ) 
 { 
 char var [ nums ] = { words } ; 
 FILE * var ; 
 int var = nums ; 
 printf ( words ) ; 
 printf ( words 
 
 
 
 
 extern void call_func ( var var ) ; 
 int call_func ( var var ) ; 
 int call_func ( var var , data_type var ) ; 
 int call_func ( var var ) ; 
 
 
 
 
 
 
 void func ( var var ) 
 { 
 var var ; 
 int var ; 
 int var ; 
 extern void call_func ( ) ; 
 extern void call_func ( ) ; 
 printf ( words ) ; 
 while ( nums ) 
 { 
 var = var ; 
 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words 
 
 
 
 
 int func ( var var ) 
 { 
 var var ; 
 FILE * var ; 
 int var , var ; 
 int var = nums ; 
 int ; 
 int var = nums ; 
 char var [ nums ] ; 
 var = fopen ( words , words ) ; 
 if ( NULL = = var ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 while ( nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , & ) ; 
 var = var ; 
 
 while ( var ! = NULL ) 
 { 
 var = var - > var ; 
 if ( = = var ) 
 { 
 var + + ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( nums = = var ) 
 { 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 
 call_func ( var , words ) ; 
 call_func ( var , var - > var ) ; 
 fwrite ( var , ( call_func ( var ) ) , nums , var ) ; 
 call_func ( var , words ) ; 
 printf ( words ) ; 
 } 
 else if ( nums = = var ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 break ; 
 } 
 else 
 var = var - > var ; 
 } 
 if ( nums = = var ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 
 printf ( words 
 
 
 
 
 int func ( var var , data_type var ) 
 { 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 int var , var ; 
 int var = nums , var = nums ; 
 int ; 
 int var = nums ; 
 FILE * var ; 
 char var [ nums ] ; 
 if ( var = = nums ) 
 { 
 var = fopen ( words , words ) ; 
 } 
 else if ( var = = nums ) 
 { 
 var = fopen ( words , words ) ; 
 } 
 else if ( var = = nums ) 
 { 
 var = fopen ( words , words ) ; 
 } 
 if ( NULL = = var ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 while ( nums ) 
 { 
 var = nums ; 
 var = var ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 scanf ( words , & ) ; 
 var = var ; 
 
 var = ( var ) malloc ( sizeof ( var ) ) ; 
 var = var ; 
 var = var ; 
 var = var ; 
 var = var ; 
 while ( var ! = NULL ) 
 { 
 if ( var = = nums ) 
 { 
 var = var - > var ; 
 } 
 else if ( var = = nums ) 
 { 
 var = var - > var ; 
 } 
 else if ( var = = nums ) 
 { 
 var = var - > var ; 
 } 
 if ( = = var ) 
 { 
 var + + ; 
 var - > var = ( var - > var ) ; 
 var - > var = ( var - > var ) ; 
 var - > var = ( var - > var ) ; 
 var - > var = ( var - > var ) ; 
 call_func ( var - > var , ( var - > var ) ) ; 
 var - > var = var ; 
 var - > var = NULL ; 
 var = var ; 
 var = ( var ) malloc ( sizeof ( struct ) ) ; 
 var = var - > var ; 
 } 
 else 
 { 
 var = var - > var ; 
 } 
 } 
 if ( nums = = var ) 
 { 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 } 
 
 else if ( ( nums < var ) & & ( var < nums ) ) 
 { 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 if ( var ! = NULL ) 
 { 
 do 
 { 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words ) ; 
 var + + ; 
 var = var - > var ; 
 } while ( ( var ! = NULL ) & & ( var < nums ) ) ; 
 } 
 } 
 
 else 
 { 
 printf ( words , var ) ; 
 printf ( words ) ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 printf ( words ) ; 
 if ( var ! = NULL ) 
 { 
 do 
 { 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 
 call_func ( var , words ) ; 
 call_func ( var , var - > var ) ; 
 fwrite ( var , ( call_func ( var ) ) , nums , var ) ; 
 call_func ( var , words ) ; 
 var = var - > var ; 
 } while ( var ! = NULL ) ; 
 } 
 printf ( words ) ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 } 
 
 printf ( words ) ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var = = nums ) 
 { 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( nums = = var ) 
 continue ; 
 else if ( nums = = var ) 
 return nums ; 
 else if ( nums = = var ) 
 return nums ; 
 else 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 } 
 } 
 
 
 
 
 int func ( var * var ) 
 { 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 int var ; 
 char var [ nums ] ; 
 int var = nums , var = nums ; 
 char [ nums ] = { nums } ; 
 FILE * var ; 
 char var [ nums ] = words ; 
 char var [ nums ] = { nums } ; 
 char var [ nums ] ; 
 var = fopen ( words , words ) ; 
 if ( NULL = = var ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 while ( nums ) 
 { 
 var = nums ; 
 var = nums ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 
 scanf ( words , ) ; 
 call_func ( var , struct_name ) ; 
 var = var ; 
 
 var = ( var ) malloc ( sizeof ( var ) ) ; 
 var = var ; 
 var = var ; 
 var = var ; 
 var = var ; 
 while ( var ! = NULL ) 
 { 
 call_func ( var , var - > var ) ; 
 
 if ( strcmp ( var , var ) = = nums ) 
 { 
 var + + ; 
 var - > var = ( var - > var ) ; 
 var - > var = ( var - > var ) ; 
 var - > var = ( var - > var ) ; 
 var - > var = ( var - > var ) ; 
 call_func ( var - > var , ( var - > var ) ) ; 
 var - > var = var ; 
 var - > var = NULL ; 
 var = var ; 
 var = ( var ) malloc ( sizeof ( struct ) ) ; 
 var = var - > var ; 
 } 
 else 
 { 
 var = var - > var ; 
 } 
 } 
 if ( nums = = var ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 else if ( ( nums < var ) & & ( var < nums ) ) 
 { 
 printf ( words , var ) ; 
 printf ( words ) ; 
 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 if ( var ! = NULL ) 
 { 
 do 
 { 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words ) ; 
 var + + ; 
 var = var - > var ; 
 } while ( ( var ! = NULL ) & & ( var < nums ) ) ; 
 } 
 } 
 else 
 { 
 printf ( words , var ) ; 
 printf ( words ) ; 
 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 if ( var ! = NULL ) 
 { 
 do 
 { 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 
 call_func ( var , words ) ; 
 call_func ( var , var - > var ) ; 
 fwrite ( var , ( call_func ( var ) ) , nums , var ) ; 
 call_func ( var , words ) ; 
 var = var - > var ; 
 } while ( var ! = NULL ) ; 
 } 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( nums = = var ) 
 continue ; 
 else if ( nums = = var ) 
 return nums ; 
 else if ( nums = = var ) 
 return nums ; 
 else 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 } 
 } 
 void func ( var * var ) 
 { 
 int var ; 
 char var [ nums ] = words ; 
 char var [ nums ] = words ; 
 char var [ nums ] = words ; 
 printf ( words ) ; 
 printf ( words 
 printf ( words 
 printf ( words 
 printf ( words 
 void func ( var var ) 
 { 
 var var ; 
 FILE * var , * var ; 
 int var ; 
 var int var , var ; 
 var int var ; 
 int var ; 
 var = var ; 
 var = fopen ( words , words ) ; 
 var = fopen ( words , words ) ; 
 while ( var ! = NULL ) 
 { 
 var = ( var ) call_func ( var - > var ) ; 
 var = var + nums ; 
 var = ( var ) ( nums + call_func ( var - > var ) + nums ) ; 
 var = ( ( var - > var < < nums ) | ( var - > var < < nums ) | var - > var ) ; 
 var = call_func ( var ) ; 
 var = call_func ( var - > var ) ; 
 var = call_func ( var ) ; 
 var = call_func ( var ) ; 
 fwrite ( & var , nums , nums , var ) ; 
 fwrite ( & var , nums , nums , var ) ; 
 fwrite ( & var , nums , nums , var ) ; 
 fwrite ( & var , nums , nums , var ) ; 
 fwrite ( ( var - > var ) , var , nums , var ) ; 
 var = var - > var ; 
 } 
 printf ( words ) ; 
 fclose ( var ) ; 
 fclose ( var ) ; 
 } 
 void func ( var * var , data_type var [ ] ) 
 { 
 FILE * var ; 
 var var ; 
 var = * var ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 while ( var - > var ! = NULL ) 
 { 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words , var - > var ) ; 
 call_func ( var , words ) ; 
 var = var - > var ; 
 } 
 fclose ( var ) ; 
 } 
 int func ( ) 
 { 
 int var = - nums ; 
 printf ( words ) ; 
 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 
 do 
 { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 fflush ( stdin ) ; 
 } while ( ( var < nums ) | | ( var > nums ) ) ; 
 
 return var ; 
 } 
 int * func ( data_type * var ) 
 { 
 int var = nums ; 
 int var = nums ; 
 int * var = NULL ; 
 do 
 { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 fflush ( stdin ) ; 
 if ( ( var > nums ) | | ( var < nums ) ) 
 { 
 printf ( words ) ; 
 } 
 } while ( ( var > nums ) | | ( var < nums ) ) ; 
 * var = var ; 
 var = ( int * ) malloc ( var * sizeof ( int ) ) ; 
 if ( ! var ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = nums ; var < * var ; var + + ) { 
 * ( var + var ) = - nums ; 
 } 
 printf ( words ) ; 
 return var ; 
 } 
 void func ( data_type * var , data_type var ) 
 { 
 
 int var = nums ; 
 int var = nums ; 
 int * var = var ; 
 if ( ! var ) { 
 printf ( words ) ; 
 } 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var + nums ) ; 
 do 
 { 
 scanf ( words , & var ) ; 
 
 fflush ( stdin ) ; 
 if ( ( var > nums ) | | ( var < nums ) ) 
 { 
 printf ( words ) ; 
 } 
 } while ( ( var > nums ) | | ( var < nums ) ) ; 
 * ( var + var ) = var ; 
 printf ( words ) ; 
 } 
 call_func ( var , var ) ; 
 call_func ( ) ; 
 return ; 
 } 
 int func ( data_type * var , data_type var ) 
 { 
 int var = nums ; 
 int * var , * var ; 
 if ( call_func ( var , var ) < nums ) 
 return nums ; 
 var = var + var ; 
 for ( var = var + nums ; var < var ; ) { 
 var + = * var ; 
 var + + ; 
 } 
 printf ( words , var ) ; 
 call_func ( ) ; 
 return var ; 
 } 
 int func ( data_type * var , data_type var ) 
 { 
 int var = nums ; 
 int var = nums ; 
 int * var , * var ; 
 if ( call_func ( var , var ) < nums ) 
 return nums ; 
 var = var + var ; 
 for ( var = var + nums ; var < var ; ) { 
 var + = * var + + ; 
 } 
 printf ( words , var / var ) ; 
 call_func ( ) ; 
 return ( var / var ) ; 
 } 
 void func ( data_type * var , data_type var ) 
 { 
 int var = nums ; 
 if ( var < nums ) 
 return ; 
 printf ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 
 printf ( words ) ; 
 printf ( words , var , * ( var + var ) ) ; 
 } 
 printf ( words ) ; 
 } 
 void func ( data_type * var , data_type var ) 
 { 
 int * var , * var ; 
 int var , var ; 
 if ( call_func ( var , var ) < nums ) 
 return ; 
 var = var + var ; 
 var = * var ; 
 var = * var ; 
 for ( var = var + nums ; var < var ; var + + ) { 
 if ( * var > var ) var = * var ; 
 if ( * var < var ) var = * var ; 
 } 
 printf ( words , var , var ) ; 
 call_func ( ) ; 
 } 
 void func ( data_type * var , data_type var ) 
 { 
 int var , var , var , var ; 
 if ( call_func ( var , var ) < nums ) 
 return ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 if ( * ( var + var ) > * ( var + var ) ) var = var ; 
 if ( var ! = var ) 
 { 
 var = * ( var + var ) ; 
 * ( var + var ) = * ( var + var ) ; 
 * ( var + var ) = var ; 
 } 
 } 
 call_func ( var , var ) ; 
 call_func ( ) ; 
 } 
 int func ( data_type * var , data_type var ) 
 { 
 int * var , * var ; 
 if ( ! var ) { 
 printf ( words ) ; 
 return - nums ; 
 } 
 var = var ; 
 var = var + var ; 
 for ( ; var < var ; var + + ) { 
 if ( * var < nums ) { 
 printf ( words ) ; 
 return - nums ; 
 } 
 } 
 return nums ; 
 } 
 void func ( ) 
 { 
 printf ( words ) ; 
 call_func ( ) ; 
 } 
 char func ( ) 
 { 
 char var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 do 
 { 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 } while ( var < words | | var > words ) ; 
 return var ; 
 } 
 void func ( var var [ ] ) 
 { 
 int var , var , var ; 
 char var ; 
 int var = nums ; 
 fflush ( stdin ) ; 
 for ( var = var ; var < var - nums ; var + + ) 
 { 
 printf ( words , var + nums ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 if ( var > nums ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 if ( strcmp ( var [ var ] . var , var [ var ] . var ) = = nums ) 
 break ; 
 if ( var < var ) 
 { 
 var - - ; 
 printf ( words ) ; 
 continue ; 
 } 
 } 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var + nums ) ; 
 scanf ( words , & var [ var ] . var [ var ] ) ; 
 if ( var [ var ] . var [ var ] > nums | | var [ var ] . var [ var ] < nums ) 
 { 
 printf ( words ) ; 
 var - - ; 
 } 
 } 
 var [ var ] . var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 var [ var ] . var + = var [ var ] . var [ var ] ; 
 var [ var ] . var = ( float ) var [ var ] . var / var ; 
 var + + ; 
 do 
 { 
 var = nums ; 
 fflush ( stdin ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 switch ( var ) 
 { 
 case words : 
 case words : 
 var = nums ; 
 break ; 
 case words : 
 case words : 
 return ; 
 } 
 } while ( var ) ; 
 } 
 } 
 void func ( var var [ ] ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] . var [ var ] ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 } 
 } 
 void func ( var var [ ] ) 
 { 
 char var ; 
 printf ( words ) ; 
 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 
 do 
 { 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 } while ( var < words | | var > words ) ; 
 switch ( var ) 
 { 
 case words : 
 call_func ( var ) ; 
 break ; 
 case words : 
 call_func ( var ) ; 
 break ; 
 } 
 return ; 
 } 
 int func ( var var [ ] ) 
 { 
 char var [ nums ] ; 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( strcmp ( var [ var ] . var , var ) = = nums ) 
 break ; 
 if ( var = = var ) 
 printf ( words ) ; 
 else 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] . var [ var ] ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 } 
 return var ; 
 } 
 void func ( var var [ ] ) 
 { 
 var var [ nums ] ; 
 char var [ nums ] ; 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 for ( var = nums , var = nums ; var < var ; var + + ) 
 if ( strcmp ( var [ var ] . var , var ) = = nums ) 
 { 
 var [ var ] = var [ var ] ; 
 var + + ; 
 } 
 if ( var = = nums ) 
 printf ( words ) ; 
 else 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] . var [ var ] ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 } 
 } 
 } 
 void func ( var var [ ] ) 
 { 
 char var ; 
 int var , var ; 
 var = call_func ( var ) ; 
 if ( var < var ) 
 { 
 do 
 { 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 } while ( var ! = words & & var ! = words & & var ! = words & & var ! = words ) ; 
 if ( var = = words | | var = = words ) 
 { 
 printf ( words ) ; 
 scanf ( words , var [ var ] . var ) ; 
 var [ var ] . var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var + nums ) ; 
 scanf ( words , & var [ var ] . var [ var ] ) ; 
 var [ var ] . var + = var [ var ] . var [ var ] ; 
 } 
 var [ var ] . var = ( float ) var [ var ] . var / var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] . var [ var ] ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 } 
 } 
 } 
 void func ( var var [ ] ) 
 { 
 char var ; 
 int var , var ; 
 var = call_func ( var ) ; 
 if ( var < var ) 
 { 
 do 
 { 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 } while ( var ! = words & & var ! = words & & var ! = words & & var ! = words ) ; 
 if ( var = = words | | var = = words ) 
 { 
 for ( var = var ; var <= var - nums ; var + + ) 
 var [ var ] = var [ var + nums ] ; 
 printf ( words ) ; 
 var - - ; 
 } 
 } 
 } 
 void func ( var var [ ] ) 
 { 
 FILE * var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 if ( fread ( & var [ var ] , sizeof ( var ) , nums , var ) ! = nums ) 
 { 
 if ( feof ( var ) ) 
 { 
 fclose ( var ) ; 
 return ; 
 } 
 printf ( words ) ; 
 } 
 else 
 var + + ; 
 } 
 fclose ( var ) ; 
 } 
 void func ( var var [ ] ) 
 { 
 FILE * var ; 
 int var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( fwrite ( & var [ var ] , sizeof ( var ) , nums , var ) ! = nums ) 
 { 
 printf ( words ) ; 
 break ; 
 } 
 } 
 fclose ( var ) ; 
 } 
 char func ( ) 
 { 
 char var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 do 
 { 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 } while ( var < words | | var > words ) ; 
 return var ; 
 } 
 void func ( var var [ ] ) 
 { 
 int var , var , var ; 
 char var ; 
 int var = nums ; 
 fflush ( stdin ) ; 
 for ( var = var ; var < var - nums ; var + + ) 
 { 
 printf ( words , var + nums ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 if ( var > nums ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 if ( strcmp ( var [ var ] . var , var [ var ] . var ) = = nums ) 
 break ; 
 if ( var < var ) 
 { 
 var - - ; 
 printf ( words ) ; 
 continue ; 
 } 
 } 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var + nums ) ; 
 scanf ( words , & var [ var ] . var [ var ] ) ; 
 if ( var [ var ] . var [ var ] > nums | | var [ var ] . var [ var ] < nums ) 
 { 
 printf ( words ) ; 
 var - - ; 
 } 
 } 
 var [ var ] . var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 var [ var ] . var + = var [ var ] . var [ var ] ; 
 var [ var ] . var = ( float ) var [ var ] . var / var ; 
 var + + ; 
 do 
 { 
 var = nums ; 
 fflush ( stdin ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 switch ( var ) 
 { 
 case words : 
 case words : 
 var = nums ; 
 break ; 
 case words : 
 case words : 
 return ; 
 } 
 } while ( var ) ; 
 } 
 } 
 void func ( var var [ ] ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] . var [ var ] ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 } 
 } 
 void func ( var var [ ] ) 
 { 
 char var ; 
 printf ( words ) ; 
 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 
 do 
 { 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 } while ( var < words | | var > words ) ; 
 switch ( var ) 
 { 
 case words : 
 call_func ( var ) ; 
 break ; 
 case words : 
 call_func ( var ) ; 
 break ; 
 } 
 return ; 
 } 
 int func ( var var [ ] ) 
 { 
 char var [ nums ] ; 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( strcmp ( var [ var ] . var , var ) = = nums ) 
 break ; 
 if ( var = = var ) 
 printf ( words ) ; 
 else 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] . var [ var ] ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 } 
 return var ; 
 } 
 void func ( var var [ ] ) 
 { 
 var var [ nums ] ; 
 char var [ nums ] ; 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 for ( var = nums , var = nums ; var < var ; var + + ) 
 if ( strcmp ( var [ var ] . var , var ) = = nums ) 
 { 
 var [ var ] = var [ var ] ; 
 var + + ; 
 } 
 if ( var = = nums ) 
 printf ( words ) ; 
 else 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] . var [ var ] ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 } 
 } 
 } 
 void func ( var var [ ] ) 
 { 
 char var ; 
 int var , var ; 
 var = call_func ( var ) ; 
 if ( var < var ) 
 { 
 do 
 { 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 } while ( var ! = words & & var ! = words & & var ! = words & & var ! = words ) ; 
 if ( var = = words | | var = = words ) 
 { 
 printf ( words ) ; 
 scanf ( words , var [ var ] . var ) ; 
 var [ var ] . var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var + nums ) ; 
 scanf ( words , & var [ var ] . var [ var ] ) ; 
 var [ var ] . var + = var [ var ] . var [ var ] ; 
 } 
 var [ var ] . var = ( float ) var [ var ] . var / var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] . var [ var ] ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 } 
 } 
 } 
 void func ( var var [ ] ) 
 { 
 char var ; 
 int var , var ; 
 var = call_func ( var ) ; 
 if ( var < var ) 
 { 
 do 
 { 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 } while ( var ! = words & & var ! = words & & var ! = words & & var ! = words ) ; 
 if ( var = = words | | var = = words ) 
 { 
 for ( var = var ; var <= var - nums ; var + + ) 
 var [ var ] = var [ var + nums ] ; 
 printf ( words ) ; 
 var - - ; 
 } 
 } 
 } 
 #define var nums 
 var 
 var 
 var 
 int var = nums ; 
 int var = nums ; 
 struct 
 { 
 int var , var , var ; 
 } ; 
 int func ( ) 
 { 
 int var = nums ; 
 if ( call_func ( var ) & nums ) var | = var ; 
 if ( call_func ( var ) & nums ) var | = var ; 
 if ( call_func ( var ) & nums ) var | = var ; 
 return var ; 
 } 
 int func ( data_type var ) 
 { 
 char var [ nums ] ; 
 int var = nums - ( call_func ( ) - var ) / nums ; 
 call_func ( var , var , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , call_func ( var , words ) ) ; 
 return var ; 
 } 
 void func ( ) 
 { 
 call_func ( nums , nums , nums , nums ) ; 
 char var [ ] = words , 
 var [ ] = words , var [ ] = words , 
 var [ ] = words , 
 var [ ] = words , var [ ] = words ; 
 call_func ( var ) ; 
 call_func ( nums , nums , var ) ; 
 call_func ( nums , nums , var ) ; 
 call_func ( nums , nums , var ) ; 
 call_func ( nums , nums , var ) ; 
 call_func ( nums , nums , var ) ; 
 call_func ( nums , nums , var ) ; 
 } 
 void func ( var var [ ] , data_type var ) 
 { 
 var [ var ] . var = nums + nums * var ; 
 var [ var ] . var = nums + call_func ( ) % nums ; 
 var [ var ] . var = nums + call_func ( ) % nums ; 
 } 
 void func ( var var [ ] , data_type & var ) 
 { 
 for ( int var = nums ; var < var ; var + + ) 
 { 
 call_func ( var [ var ] . var , var [ var ] . var , nums ) ; 
 if ( var [ var ] . var >= nums ) 
 { 
 call_func ( var , var ) ; 
 continue ; 
 } 
 if ( var + nums <= var [ var ] . var & & var [ var ] . var <= var + nums & & var [ var ] . var >= nums ) 
 { 
 var + + ; 
 call_func ( var , var ) ; 
 } 
 } 
 } 
 int func ( ) 
 { 
 call_func ( nums , nums ) ; 
 call_func ( struct_name ( NULL ) ) ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( var ) ; 
 call_func ( ) ; 
 struct_name struct_var [ var ] ; 
 int var , var , var , var = nums ; 
 var var = var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , var ) ; 
 } 
 int var = call_func ( ) ; 
 char var [ nums ] , var [ ] = words ; 
 while ( var ) 
 { 
 var = nums ; 
 char var [ nums ] ; 
 call_func ( var , var , nums ) ; 
 call_func ( nums , nums , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var , var + nums , var + nums ) ; 
 call_func ( ) ; 
 var = call_func ( ) ; 
 if ( var & var ) var = - nums ; 
 if ( var & var ) var = nums ; 
 if ( var & var ) var = var ; 
 if ( ! call_func ( var ) ) var = var ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var + = var [ var ] . var ; 
 } 
 var + = var ; 
 if ( var < nums ) var = nums ; 
 if ( var > nums ) var = nums ; 
 } 
 call_func ( call_func ( var ) ) ; 
 call_func ( var , var , nums ) ; 
 call_func ( nums , nums , call_func ( var , var ) ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 getch ( ) ; 
 call_func ( ) ; 
 return nums ; 
 } 
 #ifndef var 
 #define var 
 var var 
 extern words { 
 #endif 
 static int func ( 
 var * var , 
 data_type * * var , 
 data_type var 
 ) { 
 int var = var ; 
 char * var = nums ; 
 int var ; 
 int var = nums ; 
 assert ( var - > var . var = = nums ) ; 
 memset ( & var - > var , nums , sizeof ( var ) ) ; 
 for ( var = nums ; var = = var & & var < var ; var + + ) { 
 char * var = var [ var ] ; 
 int var ; 
 if ( var [ nums ] = = words & & var [ nums ] = = words ) var + + ; 
 var = call_func ( var ) ; 
 if ( var >= nums & & nums = = func ( var , words , var ) ) { 
 var - > var . var = nums ; 
 } 
 else if ( var >= nums & & nums = = func ( var , words , var ) ) { 
 if ( var = = ( var - nums ) ) { 
 call_func ( var , words , var ) ; 
 var = var ; 
 } else { 
 var = ( int ) call_func ( var [ + + var ] ) ; 
 if ( var < nums | | var > nums ) { 
 call_func ( var , words , var [ var ] ) ; 
 var = var ; 
 } 
 } 
 } 
 else { 
 call_func ( var , words , var ) ; 
 var = var ; 
 } 
 } 
 if ( var = = var ) { 
 var - > var . var = call_func ( var - > struct_name , & var ) ; 
 if ( var - > var . var = = nums ) { 
 call_func ( var , words , var var var : words ) ; 
 var = var ; 
 } else { 
 call_func ( 
 var - > var . var , var , var 
 ) ; 
 } 
 } 
 call_func ( var ) ; 
 return var ; 
 } 
 #endif 
 static int func ( 
 var * var , 
 var data_type * var , 
 data_type * * var 
 ) { 
 var * var = NULL ; 
 int var = var ; 
 int var ; 
 var char * var ; 
 var * = var - > ; 
 if ( var ) { 
 * var = NULL ; 
 } 
 #ifndef var 
 if ( var - > var . var ) { 
 var = call_func ( var , var , var ) ; 
 return call_func ( var , ( var ! = var ) , var ) ; 
 } 
 #endif 
 while ( var [ nums ] & & ( var = = var ) ) { 
 static var char * var ; 
 var = call_func ( struct_name , var , - nums , & var , & var ) ; 
 if ( var ! = var ) { 
 if ( var ) { 
 * var = call_func ( struct_name , words , var , var ) ; 
 } 
 } else { 
 if ( ! var ) { 
 
 var = var ; 
 while ( call_func ( var [ nums ] ) ) var + + ; 
 continue ; 
 } 
 var = call_func ( var ) ; 
 if ( var = = nums ) var = words ; 
 while ( call_func ( var [ nums ] ) ) var + + ; 
 
 if ( var ) { 
 var - > var = var ; 
 var - > var = nums ; 
 } 
 
 if ( var & & func ( var , var ) ) { 
 call_func ( var - > var , words , var var var : var ) ; 
 } 
 
 if ( var & & var - > var & & func ( var ) = = nums ) { 
 var * var ; 
 char * var ; 
 int var = nums ; 
 call_func ( ) ; 
 call_func ( struct_name , var , - nums , & var ) ; 
 if ( var - > var >= var ) { 
 call_func ( struct_name , var , nums , nums ) ; 
 } 
 var = call_func ( words , var ) ; 
 call_func ( var ) ; 
 var = call_func ( struct_name , var , - nums , & var , nums ) ; 
 if ( var = = var ) { 
 while ( func ( var ) = = var ) { 
 var char * var = ( var char * ) call_func ( var , nums ) ; 
 int var = call_func ( var , nums ) ; 
 int var = call_func ( var , nums ) ; 
 if ( var = = nums ) var = words ; 
 if ( var [ nums ] = = words ) call_func ( var ) ; 
 call_func ( var , var , var , var ) ; 
 } 
 call_func ( var ) ; 
 } 
 call_func ( var ) ; 
 call_func ( var ) ; 
 if ( var - > var >= var ) { 
 
 var = call_func ( words , var ) ; 
 call_func ( var ) ; 
 var = call_func ( struct_name , var , - nums , & var , nums ) ; 
 if ( var = = var ) { 
 var - > var = var ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var ) ; 
 } 
 call_func ( var ) ; 
 call_func ( var ) ; 
 } 
 if ( var - > var >= var & & var = = nums ) { 
 call_func ( struct_name , var , nums , nums ) ; 
 
 call_func ( var ) ; 
 call_func ( struct_name , var , - nums , & var , nums ) ; 
 if ( var ) var - > var = var ; 
 } 
 call_func ( ) ; 
 } 
 if ( var ) { 
 var - > var = var - > var ; 
 if ( var - > var ) { 
 if ( func ( var ) = = nums ) { 
 var - > var = var ; 
 } 
 if ( func ( var ) = = nums ) { 
 var - > var = var ; 
 } 
 } 
 
 if ( var - > var = = var ) { 
 call_func ( var , var ) ; 
 } 
 } 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var ) ; 
 call_func ( var ) ; 
 
 if ( var & & var - > var ) { 
 call_func ( struct_name , var , nums ) ; 
 } 
 
 if ( var & & var - > var ) { 
 call_func ( struct_name , var ) ; 
 } 
 
 var = call_func ( var ) ; 
 if ( var ! = var ) var = var ; 
 if ( var = = var ) { 
 var = var ; 
 while ( call_func ( var [ nums ] ) ) var + + ; 
 } else if ( var ) { 
 * var = call_func ( struct_name , words , var , nums ) ; 
 } 
 
 if ( var ) { 
 var - > var = NULL ; 
 } 
 } 
 } 
 return var ; 
 } 
 static void func ( data_type * * var ) { 
 int var ; 
 for ( var = nums ; var [ var ] ; var + + ) { 
 call_func ( var [ var ] ) ; 
 } 
 
 call_func ( var ) ; 
 } 
 static char * * func ( var * var , var data_type * var ) { 
 char * * var = nums ; 
 var * var ; 
 char * var ; 
 int var = nums ; 
 int var = nums ; 
 int var = nums ; 
 int var = nums ; 
 int var = call_func ( var , var ) ; 
 int var ; 
 var = call_func ( words , var ) ; 
 call_func ( var ) ; 
 var = call_func ( var - > struct_name , var , - nums , & var , nums ) ; 
 call_func ( var ) ; 
 if ( var ) return nums ; 
 while ( func ( var ) = = var ) { 
 if ( var >= var - nums ) { 
 var = var * nums + var + nums ; 
 var = call_func ( var , var * sizeof ( var [ nums ] ) ) ; 
 call_func ( var ) ; 
 } 
 var [ + + var ] = call_func ( words , call_func ( var , nums ) ) ; 
 call_func ( var [ var ] ) ; 
 if ( func ( var , nums ) ) { 
 var + + ; 
 if ( var = = nums 
 & & func ( ( var data_type * ) call_func ( var , nums ) , 
 words ) = = nums 
 ) { 
 var = nums ; 
 } else { 
 var = nums ; 
 } 
 } 
 } 
 call_func ( var ) ; 
 if ( var = = nums ) return nums ; 
 var [ nums ] = nums ; 
 var [ var + nums ] = nums ; 
 
 if ( var & & var ) { 
 
 var = call_func ( words 
 words , var ) ; 
 call_func ( var ) ; 
 var = call_func ( var - > struct_name , var , - nums , & var , nums ) ; 
 call_func ( var ) ; 
 if ( var ) { 
 call_func ( var ) ; 
 return nums ; 
 } 
 var = call_func ( var ) ; 
 call_func ( var ) ; 
 var = var = = var ; 
 } 
 if ( var ) { 
 
 static char * var [ ] = { words , words , words } ; 
 int var , var ; 
 for ( var = nums ; var < nums ; var + + ) { 
 for ( var = nums ; var <= var ; var + + ) { 
 if ( call_func ( var [ var ] , var [ var ] ) = = nums ) break ; 
 } 
 if ( var > var ) { 
 
 var = call_func ( var - > struct_name , nums , var , var [ var ] , nums , nums , nums , nums , nums ) ; 
 if ( var = = var ) var [ nums ] = var [ var ] ; 
 break ; 
 } 
 } 
 } 
 return var ; 
 } 
 static void func ( var * struct_name ) { 
 var * var = nums ; 
 int var = nums ; 
 char var [ nums ] ; 
 call_func ( struct_name , words , - nums , & var , nums ) ; 
 if ( func ( var ) = = var ) { 
 var = call_func ( var , nums ) ; 
 } 
 call_func ( var ) ; 
 call_func ( sizeof ( var ) , var , 
 words , ! var ) ; 
 call_func ( struct_name , var , nums , nums , nums ) ; 
 } 
 void func ( ) 
 { 
 int var , var , var , var , var ; 
 var = nums ; 
 var = var / nums ; 
 var = ( var - var * nums ) / nums ; 
 var = var % nums ; 
 var = var + var + var ; 
 printf ( words , var , var , var , var ) ; 
 } 
 void func ( ) 
 { 
 double var = nums . nums ; 
 double var ; 
 double var ; 
 var = nums * nums . nums * var ; 
 var = nums . nums * var * var ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 double var ; 
 double var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums * nums . nums * var ; 
 var = nums . nums * var * var ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 } 
 #define var nums . nums 
 void func ( ) 
 { 
 double var ; 
 double var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums * var * var ; 
 var = var * var * var ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 var double var = nums . nums ; 
 double var ; 
 double var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums * var * var ; 
 var = var * var * var ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 var double var = nums . nums ; 
 double var ; 
 double var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums * var * var ; 
 var = var * var * var ; 
 printf ( words ) ; 
 printf ( words , var , var ) ; 
 printf ( words ) ; 
 printf ( words , var , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , var , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , var , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , var , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , var , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var ; 
 scanf ( words , & var , & var ) ; 
 printf ( words % words % words , var , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , var , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , var , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var ; 
 scanf ( words , var , var ) ; 
 printf ( words , var , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var ; 
 char var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 printf ( words , var , var , var , var + var ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 char var ; 
 float var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 char var ; 
 float var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 char var ; 
 float var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 char var ; 
 printf ( words ) ; 
 var = call_func ( ) ; 
 var = var + nums ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 } 
 void func ( ) 
 { 
 char var ; 
 printf ( words ) ; 
 var = call_func ( ) ; 
 var = var + nums ; 
 printf ( words , var , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 if ( var > var ) var = var ; 
 if ( var <= var ) var = var ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 if ( var > var ) var = var ; 
 else var = var ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = var > var var var : var ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 int var ; 
 var = call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var > var ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var < var ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 printf ( words , var ) ; 
 } 
 } 
 void func ( ) 
 { 
 int var , var ; 
 char var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 switch ( var ) 
 { 
 case words : 
 printf ( words , var , var , var + var ) ; 
 break ; 
 case words : 
 printf ( words , var , var , var - var ) ; 
 break ; 
 case words : 
 printf ( words , var , var , var * var ) ; 
 break ; 
 case words : 
 if ( nums = = var ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words , var , var , var / var ) ; 
 } 
 break ; 
 default : 
 printf ( words ) ; 
 } 
 } 
 void func ( ) 
 { 
 float var , var ; 
 char var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 switch ( var ) 
 { 
 case words : 
 printf ( words , var , var , var + var ) ; 
 break ; 
 case words : 
 printf ( words , var , var , var - var ) ; 
 break ; 
 case words : 
 case words : 
 case words : 
 printf ( words , var , var , var * var ) ; 
 break ; 
 case words : 
 if ( func ( var ) <= var - nums ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words , var , var , var / var ) ; 
 } 
 break ; 
 default : 
 printf ( words ) ; 
 } 
 } 
 #define var var - nums 
 void func ( ) 
 { 
 float var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 if ( var + var > var & & var + var > var & & var + var > var ) 
 { 
 if ( func ( var - var ) <= var | | call_func ( var - var ) <= var | | call_func ( var - var ) <= var ) 
 { 
 printf ( words ) ; 
 } 
 else if ( func ( var * var + var * var - var * var ) <= var | | call_func ( var * var + var * var - var * var ) <= var 
 | | call_func ( var * var + var * var - var * var ) <= var ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 #define var var - nums 
 void func ( ) 
 { 
 float var , var , var ; 
 int var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 if ( var + var > var & & var + var > var & & var + var > var ) 
 { 
 if ( func ( var - var ) <= var | | call_func ( var - var ) <= var | | call_func ( var - var ) <= var ) 
 { 
 printf ( words ) ; 
 var = nums ; 
 } 
 if ( func ( var * var + var * var - var * var ) <= var | | call_func ( var * var + var * var - var * var ) <= var 
 | | call_func ( var * var + var * var - var * var ) <= var ) 
 { 
 printf ( words ) ; 
 var = nums ; 
 } 
 if ( var ) 
 { 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 #define var var - nums 
 void func ( ) 
 { 
 float var , var , var ; 
 int var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 if ( var + var > var & & var + var > var & & var + var > var ) 
 { 
 if ( func ( var - var ) <= var | | call_func ( var - var ) <= var | | call_func ( var - var ) <= var ) 
 { 
 printf ( words ) ; 
 var = nums ; 
 } 
 else if ( func ( var - var ) <= var & & call_func ( var - var ) <= var & & call_func ( var - var ) <= var ) 
 { 
 printf ( words ) ; 
 var = nums ; 
 } 
 if ( func ( var * var + var * var - var * var ) <= var | | call_func ( var * var + var * var - var * var ) <= var 
 | | call_func ( var * var + var * var - var * var ) <= var ) 
 { 
 printf ( words ) ; 
 var = nums ; 
 } 
 if ( var ) 
 { 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 #define var var - nums 
 void func ( ) 
 { 
 float var , var , var ; 
 int var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 if ( var + var > var & & var + var > var & & var + var > var ) 
 { 
 if ( func ( var - var ) <= var & & call_func ( var - var ) <= var & & call_func ( var - var ) <= var ) 
 { 
 printf ( words ) ; 
 var = nums ; 
 } 
 else if ( func ( var - var ) <= var | | call_func ( var - var ) <= var | | call_func ( var - var ) <= var ) 
 { 
 printf ( words ) ; 
 var = nums ; 
 } 
 if ( func ( var * var + var * var - var * var ) <= var | | call_func ( var * var + var * var - var * var ) <= var 
 | | call_func ( var * var + var * var - var * var ) <= var ) 
 { 
 printf ( words ) ; 
 var = nums ; 
 } 
 if ( var ) 
 { 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 void func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var / nums ; 
 switch ( var ) 
 { 
 case nums : 
 case nums : 
 printf ( words , var ) ; 
 break ; 
 case nums : 
 printf ( words , var ) ; 
 break ; 
 case nums : 
 printf ( words , var ) ; 
 break ; 
 case nums : 
 printf ( words , var ) ; 
 break ; 
 case nums : 
 case nums : 
 case nums : 
 case nums : 
 case nums : 
 case nums : 
 printf ( words , var ) ; 
 break ; 
 default : 
 printf ( words ) ; 
 } 
 } 
 void func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < nums | | var > nums ) 
 { 
 var = - nums ; 
 } 
 else 
 { 
 var = var / nums ; 
 } 
 switch ( var ) 
 { 
 case nums : 
 case nums : 
 printf ( words , var ) ; 
 break ; 
 case nums : 
 printf ( words , var ) ; 
 break ; 
 case nums : 
 printf ( words , var ) ; 
 break ; 
 case nums : 
 printf ( words , var ) ; 
 break ; 
 case nums : 
 case nums : 
 case nums : 
 case nums : 
 case nums : 
 case nums : 
 printf ( words , var ) ; 
 break ; 
 default : 
 printf ( words ) ; 
 } 
 } 
 void func ( ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = var > var var var : var ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var , var , var ; 
 printf ( words ) ; 
 var = scanf ( words , & var , & var ) ; 
 if ( var ! = nums ) 
 { 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 } 
 else 
 { 
 var = var > var var var : var ; 
 printf ( words , var ) ; 
 } 
 } 
 void func ( ) 
 { 
 int var = nums , var = nums ; 
 printf ( words , ! var , var | | var , var & & var ) ; 
 printf ( words , var , var | var , var & var ) ; 
 printf ( words , var , var | var , var & var ) ; 
 } 
 void func ( ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var = var + var ; 
 } 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 var = nums ; 
 while ( var <= var ) 
 { 
 var = var + var ; 
 var + + ; 
 } 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 var = nums ; 
 do { 
 var = var + var ; 
 var + + ; 
 } while ( var <= var ) ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var , var , var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums , var = var ; var <= var ; var + + , var - - ) 
 { 
 var = var + var + var ; 
 } 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 int var = nums ; 
 do { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var + var ; 
 printf ( words , var ) ; 
 } while ( var ! = nums ) ; 
 } 
 void func ( ) 
 { 
 int var = nums ; 
 int var = nums ; 
 while ( var ! = nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var + var ; 
 printf ( words , var ) ; 
 } 
 } 
 void func ( ) 
 { 
 int var , var ; 
 var var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var = var * var ; 
 } 
 printf ( words , var , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var ; 
 var var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var = var * var ; 
 printf ( words , var , var ) ; 
 } 
 } 
 void func ( ) 
 { 
 int var , var , var , var ; 
 do { 
 fflush ( stdin ) ; 
 printf ( words ) ; 
 var = scanf ( words , & var , & var ) ; 
 } while ( var ! = nums ) ; 
 var = var > var var var : var ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 int var ; 
 int var ; 
 var = call_func ( ) % nums + nums ; 
 var = nums ; 
 do { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var + + ; 
 if ( var > var ) 
 printf ( words ) ; 
 else if ( var < var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 } while ( var ! = var ) ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 int var ; 
 call_func ( nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 var = call_func ( ) % nums + nums ; 
 printf ( words , var ) ; 
 } 
 printf ( words ) ; 
 call_func ( nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 var = call_func ( ) % nums + nums ; 
 printf ( words , var ) ; 
 } 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 int var ; 
 int var ; 
 var int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var ) ; 
 var = call_func ( ) % nums + nums ; 
 var = nums ; 
 do { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var + + ; 
 if ( var > var ) 
 printf ( words ) ; 
 else if ( var < var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 } while ( var ! = var ) ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 int var ; 
 int var ; 
 call_func ( struct_name ( NULL ) ) ; 
 var = call_func ( ) % nums + nums ; 
 var = nums ; 
 do { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var + + ; 
 if ( var > var ) 
 printf ( words ) ; 
 else if ( var < var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 } while ( var ! = var ) ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 int var ; 
 int var ; 
 call_func ( struct_name ( NULL ) ) ; 
 var = call_func ( ) % nums + nums ; 
 var = nums ; 
 do { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var + + ; 
 if ( var > var ) 
 printf ( words ) ; 
 else if ( var < var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 } while ( var ! = var & & var < nums ) ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 float var , var ; 
 char var ; 
 char var ; 
 do { 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 switch ( var ) 
 { 
 case words : 
 printf ( words , var , var , var + var ) ; 
 break ; 
 case words : 
 printf ( words , var , var , var - var ) ; 
 break ; 
 case words : 
 case words : 
 case words : 
 printf ( words , var , var , var * var ) ; 
 break ; 
 case words : 
 if ( func ( var ) <= var - nums ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words , var , var , var / var ) ; 
 } 
 break ; 
 default : 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } while ( var = = words | | var = = words ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 int var , var , var ; 
 var var , var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var = var * var ; 
 } 
 var = var + var ; 
 } 
 printf ( words , var , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var ; 
 var var = nums , var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var = var * var ; 
 var = var + var ; 
 } 
 printf ( words , var , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 printf ( words , var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 printf ( words , var ) ; 
 } 
 printf ( words ) ; 
 } 
 } 
 void func ( ) 
 { 
 int var ; 
 int var ; 
 int var ; 
 int var ; 
 call_func ( struct_name ( NULL ) ) ; 
 var = call_func ( ) % nums + nums ; 
 var = nums ; 
 do { 
 do { 
 fflush ( stdin ) ; 
 printf ( words ) ; 
 var = scanf ( words , & var ) ; 
 } while ( var ! = nums ) ; 
 var + + ; 
 if ( var > var ) 
 printf ( words ) ; 
 else if ( var < var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 } while ( var ! = var & & var < nums ) ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 int var ; 
 int var ; 
 char var ; 
 call_func ( struct_name ( NULL ) ) ; 
 do { 
 var = call_func ( ) % nums + nums ; 
 var = nums ; 
 do { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var + + ; 
 if ( var > var ) 
 printf ( words ) ; 
 else if ( var < var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 } while ( var ! = var & & var < nums ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } while ( var = = words | | var = = words ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 int var ; 
 int var ; 
 char var ; 
 int var ; 
 call_func ( struct_name ( NULL ) ) ; 
 do { 
 var = call_func ( ) % nums + nums ; 
 var = nums ; 
 do { 
 do { 
 fflush ( stdin ) ; 
 printf ( words ) ; 
 var = scanf ( words , & var ) ; 
 } while ( var ! = nums ) ; 
 var + + ; 
 if ( var > var ) 
 printf ( words ) ; 
 else if ( var < var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 } while ( var ! = var & & var < nums ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } while ( var = = words | | var = = words ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 int var , var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < nums ) goto var ; 
 printf ( words , var ) ; 
 } 
 var : printf ( words ) ; 
 } 
 void func ( ) 
 { 
 int var , var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < nums ) break ; 
 printf ( words , var ) ; 
 } 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 int var , var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < nums ) continue ; 
 printf ( words , var ) ; 
 } 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var % nums = = nums & & var % nums = = nums & & var % nums = = nums & & var % nums = = nums ) 
 { 
 printf ( words , var ) ; 
 } 
 } 
 } 
 void func ( ) 
 { 
 int var ; 
 for ( var = nums ; ; var + + ) 
 { 
 if ( var % nums = = nums & & var % nums = = nums & & var % nums = = nums & & var % nums = = nums ) 
 { 
 printf ( words , var ) ; 
 break ; 
 } 
 } 
 } 
 void func ( ) 
 { 
 int var ; 
 for ( var = nums ; ; var + + ) 
 { 
 if ( var % nums = = nums & & var % nums = = nums & & var % nums = = nums & & var % nums = = nums ) 
 { 
 printf ( words , var ) ; 
 call_func ( nums ) ; 
 } 
 } 
 } 
 void func ( ) 
 { 
 int var ; 
 for ( var = nums ; ; var + + ) 
 { 
 if ( var % nums = = nums & & var % nums = = nums & & var % nums = = nums & & var % nums = = nums ) 
 { 
 break ; 
 } 
 } 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 int var = nums ; 
 for ( var = nums ; ! var ; var + + ) 
 { 
 if ( var % nums = = nums & & var % nums = = nums & & var % nums = = nums & & var % nums = = nums ) 
 { 
 printf ( words , var ) ; 
 var = nums ; 
 } 
 } 
 } 
 void func ( ) 
 { 
 var var , var , var = nums ; 
 for ( var = nums ; ; var + + ) 
 { 
 var = var + var * var * var ; 
 if ( var >= nums ) break ; 
 } 
 var = var - nums ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var , var , var = nums ; 
 for ( var = nums ; ; var + + ) 
 { 
 var = var + var * var * var ; 
 if ( var >= nums ) break ; 
 } 
 var = var - nums ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 double var , var = nums ; 
 int var ; 
 for ( var = nums ; var <= nums ; var = var + nums ) 
 { 
 var = ( double ) ( var * var ) / ( ( double ) ( var - nums ) * ( var + nums ) ) ; 
 var = var * var ; 
 } 
 printf ( words , nums * var ) ; 
 } 
 void func ( ) 
 { 
 float var , var = nums ; 
 int var ; 
 for ( var = nums ; var <= nums ; var = var + nums ) 
 { 
 var = ( var * var ) / ( ( var - nums ) * ( var + nums ) ) ; 
 var = var * var ; 
 } 
 printf ( words , nums * var ) ; 
 } 
 var func ( data_type var ) 
 { 
 int var ; 
 var var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var * = var ; 
 } 
 return var ; 
 } 
 void func ( ) 
 { 
 int var ; 
 var var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var ) ; 
 printf ( words , var , var ) ; 
 var func ( data_type var ) 
 { 
 int var ; 
 var var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var * = var ; 
 } 
 return var ; 
 } 
 void func ( ) 
 { 
 int var ; 
 var var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var ) ; 
 printf ( words , var , var ) ; 
 } 
 var call_func ( data_type var ) ; 
 void func ( ) 
 { 
 int var ; 
 var var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var ) ; 
 printf ( words , var , var ) ; 
 } 
 var func ( data_type var ) 
 { 
 int var ; 
 var var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var * = var ; 
 } 
 return var ; 
 } 
 var call_func ( data_type var ) ; 
 void func ( ) 
 { 
 int var ; 
 var var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var ) ; 
 if ( var = = - nums ) 
 printf ( words ) ; 
 else 
 printf ( words , var , var ) ; 
 } 
 var func ( data_type var ) 
 { 
 int var ; 
 var var = nums ; 
 if ( var < nums ) 
 { 
 return - nums ; 
 } 
 else 
 { 
 for ( var = nums ; var <= var ; var + + ) 
 var * = var ; 
 return var ; 
 } 
 } 
 var call_func ( data_type var ) ; 
 void func ( ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var , call_func ( var ) ) ; 
 } 
 var func ( data_type var ) 
 { 
 int var ; 
 var var = nums ; 
 assert ( var >= nums ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 var * = var ; 
 return var ; 
 } 
 var call_func ( data_type var ) ; 
 void func ( ) 
 { 
 int var ; 
 var var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var ) ; 
 printf ( words , var , var ) ; 
 } 
 var func ( data_type var ) 
 { 
 int var ; 
 var var = nums ; 
 if ( var < nums ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 for ( var = nums ; var <= var ; var + + ) 
 var * = var ; 
 return var ; 
 } 
 } 
 var var call_func ( var data_type var ) ; 
 void func ( ) 
 { 
 int var ; 
 do { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } while ( var < nums ) ; 
 printf ( words , var , call_func ( var ) ) ; 
 } 
 var var func ( var data_type var ) 
 { 
 var int var ; 
 var var var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 var * = var ; 
 return var ; 
 } 
 var var call_func ( var data_type var ) ; 
 void func ( ) 
 { 
 int var ; 
 var var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var ) ; 
 if ( var = = - nums ) 
 printf ( words ) ; 
 else 
 printf ( words , var , var ) ; 
 } 
 var var func ( var data_type var ) 
 { 
 var int var ; 
 var var var = nums ; 
 if ( var < nums ) 
 { 
 return - nums ; 
 } 
 else 
 { 
 for ( var = nums ; var <= var ; var + + ) 
 var * = var ; 
 return var ; 
 } 
 } 
 var var call_func ( var data_type var ) ; 
 void func ( ) 
 { 
 int var , var ; 
 double var ; 
 do { 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 } while ( var < var | | var < nums | | var < nums ) ; 
 var = ( double ) call_func ( var ) / ( call_func ( var ) * call_func ( var - var ) ) ; 
 printf ( words , var ) ; 
 } 
 var var func ( var data_type var ) 
 { 
 var int var ; 
 var var var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 var * = var ; 
 return var ; 
 } 
 void call_func ( data_type var , data_type var , data_type var , data_type var ) ; 
 void call_func ( data_type var , data_type var , data_type var ) ; 
 void func ( ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 call_func ( var , words , words , words ) ; 
 } 
 void func ( data_type var , data_type var , data_type var , data_type var ) 
 { 
 if ( var = = nums ) 
 { 
 call_func ( var , var , var ) ; 
 } 
 else 
 { 
 call_func ( var - nums , var , var , var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var - nums , var , var , var ) ; 
 } 
 } 
 void func ( data_type var , data_type var , data_type var ) 
 { 
 printf ( words , var , var , var ) ; 
 } 
 var call_func ( data_type var ) ; 
 void func ( ) 
 { 
 int var ; 
 var var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var ) ; 
 if ( var = = - nums ) 
 printf ( words ) ; 
 else 
 printf ( words , var , var ) ; 
 } 
 var func ( data_type var ) 
 { 
 var var = nums ; 
 if ( var < nums ) 
 return - nums ; 
 else if ( var = = nums | | var = = nums ) 
 return nums ; 
 else 
 return ( var * call_func ( var - nums ) ) ; 
 } 
 var call_func ( data_type var ) ; 
 void func ( ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var = call_func ( var ) ; 
 printf ( words , var , var ) ; 
 } 
 } 
 var func ( data_type var ) 
 { 
 var var ; 
 if ( var = = nums ) var = nums ; 
 else if ( var = = nums ) var = nums ; 
 else var = call_func ( var - nums ) + call_func ( var - nums ) ; 
 return var ; 
 } 
 var call_func ( data_type var ) ; 
 int var ; 
 void func ( ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var = nums ; 
 var = call_func ( var ) ; 
 printf ( words , var , var , var ) ; 
 } 
 } 
 var func ( data_type var ) 
 { 
 var var ; 
 var + + ; 
 if ( var = = nums ) var = nums ; 
 else if ( var = = nums ) var = nums ; 
 else var = call_func ( var - nums ) + call_func ( var - nums ) ; 
 return var ; 
 } 
 void call_func ( data_type var , data_type var ) ; 
 void func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 call_func ( var , var ) ; 
 printf ( words , var , var ) ; 
 } 
 void func ( data_type var , data_type var ) 
 { 
 int var ; 
 var = var ; 
 var = var ; 
 var = var ; 
 printf ( words , var , var ) ; 
 } 
 void call_func ( data_type var , data_type var ) ; 
 void func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 call_func ( var , var ) ; 
 printf ( words , var , var ) ; 
 } 
 void func ( data_type var , data_type var ) 
 { 
 int var ; 
 var = var ; 
 var = var ; 
 var = var ; 
 } 
 void call_func ( data_type var , data_type var ) ; 
 void func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 call_func ( var , var ) ; 
 printf ( words , var , var ) ; 
 call_func ( var , var ) ; 
 } 
 void func ( data_type var , data_type var ) 
 { 
 int var ; 
 printf ( words , var ) ; 
 var = var ; 
 var = var ; 
 var = var ; 
 printf ( words , var ) ; 
 printf ( words , var , var ) ; 
 } 
 void call_func ( data_type var , data_type var ) ; 
 void func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 call_func ( var , var ) ; 
 printf ( words , var , var ) ; 
 call_func ( var , var ) ; 
 } 
 void func ( data_type var , data_type var ) 
 { 
 static int var ; 
 printf ( words , var ) ; 
 var = var ; 
 var = var ; 
 var = var ; 
 printf ( words , var ) ; 
 printf ( words , var , var ) ; 
 } 
 var call_func ( data_type var ) ; 
 void func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 printf ( words , var , call_func ( var ) ) ; 
 } 
 } 
 var func ( data_type var ) 
 { 
 static var var = nums ; 
 var = var * var ; 
 return var ; 
 } 
 var call_func ( data_type var ) ; 
 void func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 printf ( words , var , call_func ( var ) ) ; 
 } 
 } 
 var func ( data_type var ) 
 { 
 var var = nums ; 
 var = var * var ; 
 return var ; 
 } 
 #define var nums 
 #define var nums 
 #define var nums 
 int call_func ( void ) ; 
 void call_func ( var data_type var ) ; 
 int call_func ( var data_type var ) ; 
 int call_func ( var data_type var , var data_type var ) ; 
 void func ( ) 
 { 
 int var ; 
 char var ; 
 call_func ( struct_name ( NULL ) ) ; 
 do { 
 var = call_func ( ) ; 
 call_func ( var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } while ( var = = words | | var = = words ) ; 
 } 
 void func ( var data_type var ) 
 { 
 int var ; 
 int var = nums ; 
 int var = nums ; 
 int var ; 
 do { 
 printf ( words , var ) ; 
 var = scanf ( words , & var ) ; 
 
 if ( var ! = nums | | ! func ( var ) ) 
 { 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 continue ; 
 } 
 var + + ; 
 var = call_func ( var , var ) ; 
 } while ( ! var & & var <= var ) ; 
 if ( var ) 
 { 
 printf ( words var var ! words 
 } 
 else 
 { 
 printf ( words , var ) ; 
 } 
 } 
 int func ( void ) 
 { 
 int var ; 
 var = ( call_func ( ) % ( var - var + nums ) ) + var ; 
 return var ; 
 } 
 int func ( var data_type var ) 
 { 
 if ( var >= var & & var <= var ) 
 return nums ; 
 else 
 return nums ; 
 } 
 int func ( var data_type var , var data_type var ) 
 { 
 if ( var < var ) 
 { 
 printf ( words ) ; 
 return nums ; 
 } 
 else if ( var > var ) 
 { 
 printf ( words ) ; 
 return nums ; 
 } 
 else return nums ; 
 } 
 void func ( ) 
 { 
 int var , var , var , var , var , 
 var , var , var , var , var ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 scanf ( words , & var ) ; 
 scanf ( words , & var ) ; 
 scanf ( words , & var ) ; 
 scanf ( words , & var ) ; 
 scanf ( words , & var ) ; 
 scanf ( words , & var ) ; 
 scanf ( words , & var ) ; 
 scanf ( words , & var ) ; 
 scanf ( words , & var ) ; 
 var = var + var + var + var + var + 
 var + var + var + var + var ; 
 printf ( words , var / nums . nums ) ; 
 } 
 void func ( ) 
 { 
 int var [ nums ] ; 
 int var = nums ; 
 int var ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 scanf ( words , & var [ var ] ) ; 
 var = var + var [ var ] ; 
 } 
 printf ( words , var / nums . nums ) ; 
 } 
 #define var nums 
 void func ( ) 
 { 
 int var [ var ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } ; 
 int var ; 
 do { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } while ( var < nums | | var > nums ) ; 
 printf ( words , var [ var - nums ] ) ; 
 } 
 void func ( ) 
 { 
 int var = nums , var = nums , var [ nums ] , var ; 
 printf ( words , var , & var , & var ) ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 var [ var ] = var ; 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words , var , var ) ; 
 } 
 #define var nums 
 void func ( ) 
 { 
 int var [ nums ] [ var ] = { { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } , { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } } ; 
 int var , var ; 
 do { 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 } while ( var < nums | | var > nums ) ; 
 if ( ( ( var % nums = = nums ) & & ( var % nums ! = nums ) ) | | ( var % nums = = nums ) ) 
 printf ( words , var [ nums ] [ var - nums ] ) ; 
 else 
 printf ( words , var [ nums ] [ var - nums ] ) ; 
 } 
 #define var nums 
 int call_func ( data_type var [ ] , data_type var ) ; 
 void call_func ( data_type var [ ] , data_type var ) ; 
 void func ( ) 
 { 
 int var [ var ] , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var , var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 } 
 int func ( data_type var [ ] , data_type var ) 
 { 
 int var , var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var + = var [ var ] ; 
 } 
 return var / var ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] ) ; 
 } 
 } 
 #define var nums 
 int call_func ( data_type var [ ] , data_type var ) ; 
 int call_func ( data_type var [ ] ) ; 
 void func ( ) 
 { 
 int var [ var ] , var , var ; 
 var = call_func ( var ) ; 
 printf ( words , var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 } 
 int func ( data_type var [ ] , data_type var ) 
 { 
 int var , var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var + = var [ var ] ; 
 } 
 return var / var ; 
 } 
 int func ( data_type var [ ] ) 
 { 
 int var = - nums ; 
 do { 
 var + + ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] ) ; 
 } while ( var [ var ] >= nums ) ; 
 return var ; 
 } 
 #define var nums 
 int call_func ( data_type var [ ] ) ; 
 int call_func ( data_type var [ ] , data_type var ) ; 
 void func ( ) 
 { 
 int var [ var ] , var , var ; 
 var = call_func ( var ) ; 
 printf ( words , var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 } 
 int func ( data_type var [ ] ) 
 { 
 int var = - nums ; 
 do { 
 var + + ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] ) ; 
 } while ( var [ var ] >= nums ) ; 
 return var ; 
 } 
 int func ( data_type var [ ] , data_type var ) 
 { 
 int var , var ; 
 var = var [ nums ] ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] > var ) 
 { 
 var = var [ var ] ; 
 } 
 } 
 return var ; 
 } 
 #define var nums 
 int call_func ( data_type var [ ] ) ; 
 void call_func ( data_type var [ ] , data_type var ) ; 
 void call_func ( data_type var [ ] , data_type var ) ; 
 void func ( ) 
 { 
 int var [ var ] , var ; 
 var = call_func ( var ) ; 
 printf ( words , var ) ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var , var ) ; 
 } 
 int func ( data_type var [ ] ) 
 { 
 int var = - nums ; 
 do { 
 var + + ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] ) ; 
 } while ( var [ var ] >= nums ) ; 
 return var ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 { 
 for ( var = var + nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] > var [ var ] ) 
 { 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 } 
 } 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 #define var nums 
 int call_func ( data_type var [ ] ) ; 
 void call_func ( data_type var [ ] , data_type var ) ; 
 void call_func ( data_type var [ ] , data_type var ) ; 
 void func ( ) 
 { 
 int var [ var ] , var ; 
 var = call_func ( var ) ; 
 printf ( words , var ) ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var , var ) ; 
 } 
 int func ( data_type var [ ] ) 
 { 
 int var = - nums ; 
 do { 
 var + + ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] ) ; 
 } while ( var [ var ] >= nums ) ; 
 return var ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var , var , var , var ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] > var [ var ] ) 
 { 
 var = var ; 
 } 
 } 
 if ( var ! = var ) 
 { 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 } 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 #define var nums 
 int call_func ( data_type var [ ] , var var [ ] ) ; 
 void call_func ( data_type var [ ] , var var [ ] , data_type var ) ; 
 void call_func ( data_type var [ ] , var var [ ] , data_type var ) ; 
 void func ( ) 
 { 
 int var [ var ] , var ; 
 var var [ var ] ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 call_func ( var , var , var ) ; 
 printf ( words ) ; 
 call_func ( var , var , var ) ; 
 } 
 int func ( data_type var [ ] , var var [ ] ) 
 { 
 int var = - nums ; 
 do { 
 var + + ; 
 printf ( words var var var : words 
 scanf ( words , & var [ var ] , & var [ var ] ) ; 
 } while ( var [ var ] > nums & & var [ var ] >= nums ) ; 
 return var ; 
 } 
 void func ( data_type var [ ] , var var [ ] , data_type var ) 
 { 
 int var , var , var , var ; 
 var var ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] > var [ var ] ) 
 { 
 var = var ; 
 } 
 } 
 if ( var ! = var ) 
 { 
 var = var [ var ] ; var [ var ] = var [ var ] ; var [ var ] = var ; 
 var = var [ var ] ; var [ var ] = var [ var ] ; var [ var ] = var ; 
 } 
 } 
 } 
 void func ( data_type var [ ] , var var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] , var [ var ] ) ; 
 } 
 } 
 #define var nums 
 int call_func ( data_type var [ ] , var var [ ] ) ; 
 int call_func ( var var [ ] , var var , data_type var ) ; 
 void func ( ) 
 { 
 int var [ var ] , var , var ; 
 var var [ var ] , var ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var , var , var ) ; 
 if ( var ! = - nums ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 int func ( data_type var [ ] , var var [ ] ) 
 { 
 int var = - nums ; 
 do { 
 var + + ; 
 printf ( words var var var : words 
 scanf ( words , & var [ var ] , & var [ var ] ) ; 
 } while ( var [ var ] > nums & & var [ var ] >= nums ) ; 
 return var ; 
 } 
 int func ( var var [ ] , var var , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] = = var ) return ( var ) ; 
 } 
 return ( - nums ) ; 
 } 
 #define var nums 
 int call_func ( data_type var [ ] , var var [ ] ) ; 
 int call_func ( var var [ ] , var var , data_type var ) ; 
 void func ( ) 
 { 
 int var [ var ] , var , var ; 
 var var [ var ] , var ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var , var , var ) ; 
 if ( var ! = - nums ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 int func ( data_type var [ ] , var var [ ] ) 
 { 
 int var = - nums ; 
 do { 
 var + + ; 
 printf ( words var var var : words 
 scanf ( words , & var [ var ] , & var [ var ] ) ; 
 } while ( var [ var ] > nums & & var [ var ] >= nums ) ; 
 return var ; 
 } 
 int func ( var var [ ] , var var , data_type var ) 
 { 
 int var , var , var ; 
 var = nums ; 
 var = var - nums ; 
 while ( var <= var ) 
 { 
 var = ( var + var ) / nums ; 
 if ( var > var [ var ] ) 
 { 
 var = var + nums ; 
 } 
 else if ( var < var [ var ] ) 
 { 
 var = var - nums ; 
 } 
 else 
 { 
 return ( var ) ; 
 } 
 } 
 return ( - nums ) ; 
 } 
 #define var nums 
 int call_func ( data_type var [ ] , var var [ ] ) ; 
 int call_func ( var var [ ] , var var , data_type var ) ; 
 void func ( ) 
 { 
 int var [ var ] , var , var ; 
 var var [ var ] , var ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var , var , var ) ; 
 if ( var ! = - nums ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 int func ( data_type var [ ] , var var [ ] ) 
 { 
 int var = - nums ; 
 do { 
 var + + ; 
 printf ( words var var var : words 
 scanf ( words , & var [ var ] , & var [ var ] ) ; 
 } while ( var [ var ] > nums & & var [ var ] >= nums ) ; 
 return var ; 
 } 
 int func ( var var [ ] , var var , data_type var ) 
 { 
 int var , var , var ; 
 int var = - nums ; 
 int var = nums ; 
 var = nums ; 
 var = var - nums ; 
 while ( ! var & & var <= var ) 
 { 
 var = ( var + var ) / nums ; 
 if ( var > var [ var ] ) 
 { 
 var = var + nums ; 
 } 
 else if ( var < var [ var ] ) 
 { 
 var = var - nums ; 
 } 
 else 
 { 
 var = var ; 
 var = nums ; 
 } 
 } 
 return var ; 
 } 
 #define var nums 
 int call_func ( data_type var [ ] , var var [ ] ) ; 
 int call_func ( var var [ ] , var var , data_type var ) ; 
 void call_func ( data_type var [ ] , var var [ ] , data_type var ) ; 
 void call_func ( data_type var [ ] , var var [ ] , data_type var ) ; 
 void func ( ) 
 { 
 int var [ var ] , var , var ; 
 var var [ var ] , var ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 call_func ( var , var , var ) ; 
 printf ( words ) ; 
 call_func ( var , var , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var , var , var ) ; 
 if ( var ! = - nums ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 int func ( data_type var [ ] , var var [ ] ) 
 { 
 int var = - nums ; 
 do { 
 var + + ; 
 printf ( words var var var : words 
 scanf ( words , & var [ var ] , & var [ var ] ) ; 
 } while ( var [ var ] > nums & & var [ var ] >= nums ) ; 
 return var ; 
 } 
 int func ( var var [ ] , var var , data_type var ) 
 { 
 int var , var , var ; 
 int var = - nums ; 
 int var = nums ; 
 var = nums ; 
 var = var - nums ; 
 while ( ! var & & var <= var ) 
 { 
 var = ( var + var ) / nums ; 
 if ( var > var [ var ] ) 
 { 
 var = var + nums ; 
 } 
 else if ( var < var [ var ] ) 
 { 
 var = var - nums ; 
 } 
 else 
 { 
 var = var ; 
 var = nums ; 
 } 
 } 
 return var ; 
 } 
 void func ( data_type var [ ] , var var [ ] , data_type var ) 
 { 
 int var , var , var , var ; 
 var var ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] < var [ var ] ) 
 { 
 var = var ; 
 } 
 } 
 if ( var ! = var ) 
 { 
 var = var [ var ] ; var [ var ] = var [ var ] ; var [ var ] = var ; 
 var = var [ var ] ; var [ var ] = var [ var ] ; var [ var ] = var ; 
 } 
 } 
 } 
 void func ( data_type var [ ] , var var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] , var [ var ] ) ; 
 } 
 } 
 #define var nums 
 #define var nums 
 int call_func ( data_type var [ ] [ var ] , var var [ ] ) ; 
 void call_func ( data_type var [ ] [ var ] , data_type var [ ] , data_type var [ ] , data_type var ) ; 
 void call_func ( data_type var [ ] [ var ] , data_type var [ ] , data_type var [ ] , data_type var ) ; 
 void call_func ( data_type var [ ] [ var ] , var var [ ] , data_type var [ ] , data_type var [ ] , 
 data_type var [ ] , data_type var [ ] , data_type var ) ; 
 void func ( ) 
 { 
 int var [ var ] [ var ] , var [ var ] , var [ var ] , var ; 
 var var [ var ] ; 
 float var [ var ] , var [ var ] ; 
 var = call_func ( var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var , var , var , var ) ; 
 } 
 int func ( data_type var [ ] [ var ] , var var [ ] ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words var var var var : var var var : words 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] [ var ] ) ; 
 } 
 } 
 return var ; 
 } 
 void func ( data_type var [ ] [ var ] , data_type var [ ] , data_type var [ ] , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] = var [ var ] + var [ var ] [ var ] ; 
 } 
 var [ var ] = ( float ) var [ var ] / var ; 
 } 
 } 
 void func ( data_type var [ ] [ var ] , data_type var [ ] , data_type var [ ] , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] = var [ var ] + var [ var ] [ var ] ; 
 } 
 var [ var ] = ( float ) var [ var ] / var ; 
 } 
 } 
 void func ( data_type var [ ] [ var ] , var var [ ] , data_type var [ ] , data_type var [ ] , 
 data_type var [ ] , data_type var [ ] , data_type var ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 printf ( words var var var var var var var var var words 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] [ var ] ) ; 
 } 
 printf ( words , var [ var ] , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 int var = nums , var = nums ; 
 char var = words ; 
 printf ( words , var , & var ) ; 
 printf ( words , var , & var ) ; 
 printf ( words , var , & var ) ; 
 } 
 void func ( ) 
 { 
 int var = nums , var = nums ; 
 char var = words ; 
 int * var , * var ; 
 char * var ; 
 printf ( words , var , & var , var ) ; 
 printf ( words , var , & var , var ) ; 
 printf ( words , var , & var , var ) ; 
 } 
 void func ( ) 
 { 
 int var = nums , var = nums ; 
 char var = words ; 
 int * var = NULL , * var = NULL ; 
 char * var = NULL ; 
 printf ( words , var , & var , var ) ; 
 printf ( words , var , & var , var ) ; 
 printf ( words , var , & var , var ) ; 
 } 
 void func ( ) 
 { 
 int var = nums , var = nums ; 
 char var = words ; 
 int * var , * var ; 
 char * var ; 
 var = & var ; 
 var = & var ; 
 var = & var ; 
 printf ( words , var , & var , var , & var ) ; 
 printf ( words , var , & var , var , & var ) ; 
 printf ( words , var , & var , var , & var ) ; 
 } 
 void func ( ) 
 { 
 int var = nums , var = nums ; 
 char var = words ; 
 int * var = & var , * var = & var ; 
 char * var = & var ; 
 printf ( words , var , & var , var , * var ) ; 
 printf ( words , var , & var , var , * var ) ; 
 printf ( words , var , & var , var , * var ) ; 
 } 
 void func ( ) 
 { 
 int var = nums , var = nums ; 
 char var = words ; 
 int * var = & var , * var = & var ; 
 char * var = & var ; 
 * var = nums ; 
 printf ( words , var , & var , var , * var ) ; 
 printf ( words , var , & var , var , * var ) ; 
 printf ( words , var , & var , var , * var ) ; 
 } 
 void call_func ( data_type var ) ; 
 void func ( ) 
 { 
 int var = nums ; 
 printf ( words , var ) ; 
 call_func ( var ) ; 
 printf ( words , var ) ; 
 } 
 void func ( data_type var ) 
 { 
 printf ( words , var ) ; 
 var = nums ; 
 } 
 void call_func ( data_type * var ) ; 
 void func ( ) 
 { 
 int var = nums ; 
 printf ( words , var ) ; 
 call_func ( & var ) ; 
 printf ( words , var ) ; 
 } 
 void func ( data_type * var ) 
 { 
 printf ( words , * var ) ; 
 * var = nums ; 
 } 
 int call_func ( data_type var ) ; 
 void func ( ) 
 { 
 int var = nums ; 
 printf ( words , var ) ; 
 var = call_func ( var ) ; 
 printf ( words , var ) ; 
 } 
 int func ( data_type var ) 
 { 
 printf ( words , var ) ; 
 var = nums ; 
 return var ; 
 } 
 void call_func ( data_type * var , data_type * var ) ; 
 void func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , var , var ) ; 
 call_func ( & var , & var ) ; 
 printf ( words , var , var ) ; 
 } 
 void func ( data_type * var , data_type * var ) 
 { 
 int var ; 
 var = * var ; 
 * var = * var ; 
 * var = var ; 
 } 
 void call_func ( data_type var , data_type var ) ; 
 void func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , var , var ) ; 
 call_func ( var , var ) ; 
 printf ( words , var , var ) ; 
 } 
 void func ( data_type var , data_type var ) 
 { 
 int var ; 
 var = var ; 
 var = var ; 
 var = var ; 
 } 
 #define var nums 
 void call_func ( data_type var [ ] , var var [ ] , data_type var , data_type * var , var * var ) ; 
 void func ( ) 
 { 
 int var [ var ] , var ; 
 int var , var ; 
 var var [ var ] , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words var var var : words 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] , & var [ var ] ) ; 
 } 
 call_func ( var , var , var , & var , & var ) ; 
 printf ( words , var , var ) ; 
 } 
 void func ( data_type var [ ] , var var [ ] , data_type var , data_type * var , var * var ) 
 { 
 int var ; 
 * var = var [ nums ] ; 
 * var = var [ nums ] ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] > * var ) 
 { 
 * var = var [ var ] ; 
 * var = var [ var ] ; 
 } 
 } 
 } 
 #define var nums 
 void call_func ( data_type var [ ] , var var [ ] , data_type var , data_type var , var var ) ; 
 void func ( ) 
 { 
 int var [ var ] , var ; 
 int var , var ; 
 var var [ var ] , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words var var var : words 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] , & var [ var ] ) ; 
 } 
 call_func ( var , var , var , var , var ) ; 
 printf ( words , var , var ) ; 
 } 
 void func ( data_type var [ ] , var var [ ] , data_type var , data_type var , var var ) 
 { 
 int var ; 
 var = var [ nums ] ; 
 var = var [ nums ] ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] > var ) 
 { 
 var = var [ var ] ; 
 var = var [ var ] ; 
 } 
 } 
 } 
 #define var nums 
 int call_func ( data_type var [ ] ) ; 
 void call_func ( data_type var [ ] , data_type var ) ; 
 void call_func ( data_type var [ ] , data_type var ) ; 
 void call_func ( data_type var [ ] , data_type var ) ; 
 void func ( ) 
 { 
 int var [ var ] , var ; 
 int var ; 
 var = call_func ( var ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 call_func ( var , var ) ; 
 if ( var = = nums ) 
 { 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 } 
 else 
 { 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 } 
 call_func ( var , var ) ; 
 } 
 int func ( data_type var [ ] ) 
 { 
 int var = - nums ; 
 do { 
 var + + ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] ) ; 
 } while ( var [ var ] >= nums ) ; 
 return var ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var , var , var , var ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] < var [ var ] ) 
 { 
 var = var ; 
 } 
 } 
 if ( var ! = var ) 
 { 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 } 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var , var , var , var ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] > var [ var ] ) 
 { 
 var = var ; 
 } 
 } 
 if ( var ! = var ) 
 { 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 } 
 } 
 #define var nums 
 int call_func ( data_type var [ ] ) ; 
 void call_func ( data_type var [ ] , data_type var ) ; 
 void call_func ( data_type var [ ] , data_type var , data_type ( * var ) ( data_type var , data_type var ) ) ; 
 int call_func ( data_type var , data_type var ) ; 
 int call_func ( data_type var , data_type var ) ; 
 void func ( ) 
 { 
 int var [ var ] , var ; 
 int var ; 
 var = call_func ( var ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 call_func ( var , var ) ; 
 if ( var = = nums ) 
 { 
 call_func ( var , var , var ) ; 
 printf ( words ) ; 
 } 
 else 
 { 
 call_func ( var , var , var ) ; 
 printf ( words ) ; 
 } 
 call_func ( var , var ) ; 
 } 
 int func ( data_type var [ ] ) 
 { 
 int var = - nums ; 
 do { 
 var + + ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] ) ; 
 } while ( var [ var ] >= nums ) ; 
 return var ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 void func ( data_type var [ ] , data_type var , data_type ( * var ) ( data_type var , data_type var ) ) 
 { 
 int var , var , var , var ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 { 
 if ( ( * var ) ( var [ var ] , var [ var ] ) ) 
 { 
 var = var ; 
 } 
 } 
 if ( var ! = var ) 
 { 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 } 
 } 
 
 int func ( data_type var , data_type var ) 
 { 
 return var < var ; 
 } 
 
 int func ( data_type var , data_type var ) 
 { 
 return var > var ; 
 } 
 #define var nums 
 int call_func ( data_type var [ ] ) ; 
 void call_func ( data_type var [ ] , data_type var ) ; 
 void call_func ( data_type * var , data_type * var ) ; 
 void call_func ( data_type var [ ] , data_type var , data_type ( * var ) ( data_type var , data_type var ) ) ; 
 int call_func ( data_type var , data_type var ) ; 
 int call_func ( data_type var , data_type var ) ; 
 void func ( ) 
 { 
 int var [ var ] , var ; 
 int var ; 
 var = call_func ( var ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 call_func ( var , var ) ; 
 if ( var = = nums ) 
 { 
 call_func ( var , var , var ) ; 
 printf ( words ) ; 
 } 
 else 
 { 
 call_func ( var , var , var ) ; 
 printf ( words ) ; 
 } 
 call_func ( var , var ) ; 
 } 
 int func ( data_type var [ ] ) 
 { 
 int var = - nums ; 
 do { 
 var + + ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] ) ; 
 } while ( var [ var ] >= nums ) ; 
 return var ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 void func ( data_type * var , data_type * var ) 
 { 
 int var ; 
 var = * var ; 
 * var = * var ; 
 * var = var ; 
 } 
 void func ( data_type var [ ] , data_type var , data_type ( * var ) ( data_type var , data_type var ) ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 { 
 if ( ( * var ) ( var [ var ] , var [ var ] ) ) 
 { 
 var = var ; 
 } 
 } 
 if ( var ! = var ) 
 { 
 call_func ( & var [ var ] , & var [ var ] ) ; 
 } 
 } 
 } 
 
 int func ( data_type var , data_type var ) 
 { 
 return var < var ; 
 } 
 
 int func ( data_type var , data_type var ) 
 { 
 return var > var ; 
 } 
 #define var nums 
 void func ( ) 
 { 
 char var [ var ] ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 printf ( words , var ) ; 
 scanf ( words , var ) ; 
 printf ( words , var ) ; 
 } 
 #define var nums 
 void func ( ) 
 { 
 char var [ var ] ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 printf ( words , var ) ; 
 } 
 #define var nums 
 void func ( ) 
 { 
 char var [ var ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 printf ( words , var ) ; 
 } 
 #define var nums 
 void func ( ) 
 { 
 char var [ var ] ; 
 char * var = var ; 
 printf ( words ) ; 
 gets ( var ) ; 
 printf ( words , var ) ; 
 } 
 #define var nums 
 void func ( ) 
 { 
 char var [ var ] ; 
 printf ( words ) ; 
 call_func ( var , sizeof ( var ) , stdin ) ; 
 printf ( words , var ) ; 
 } 
 #define var nums 
 void func ( ) 
 { 
 char var [ var ] ; 
 char var [ ] = words ; 
 printf ( words ) ; 
 call_func ( var , sizeof ( var ) , stdin ) ; 
 printf ( words , var , var ) ; 
 } 
 #define var nums 
 void func ( ) 
 { 
 char var [ var ] ; 
 char * var = words ; 
 printf ( words ) ; 
 call_func ( var , sizeof ( var ) , stdin ) ; 
 printf ( words , var , var ) ; 
 } 
 #define var nums 
 #define var nums 
 void call_func ( data_type var [ ] [ var ] , data_type var ) ; 
 void func ( ) 
 { 
 int var , var ; 
 char var [ var ] [ var ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 gets ( var [ var ] ) ; 
 } 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var [ var ] ) ; 
 } 
 } 
 void func ( data_type var [ ] [ var ] , data_type var ) 
 { 
 int var , var ; 
 char var [ var ] ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 { 
 for ( var = var + nums ; var < var ; var + + ) 
 { 
 if ( strcmp ( var [ var ] , var [ var ] ) < nums ) 
 { 
 call_func ( var , var [ var ] ) ; 
 call_func ( var [ var ] , var [ var ] ) ; 
 call_func ( var [ var ] , var ) ; 
 } 
 } 
 } 
 } 
 #define var nums 
 void call_func ( data_type var [ ] , data_type var [ ] ) ; 
 void func ( ) 
 { 
 char var [ var ] , var [ var ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 } 
 void func ( data_type var [ ] , data_type var [ ] ) 
 { 
 int var = nums ; 
 while ( var [ var ] ! = words ) 
 { 
 var [ var ] = var [ var ] ; 
 var + + ; 
 } 
 var [ var ] = words ; 
 } 
 #define var nums 
 void call_func ( data_type var [ ] , data_type var [ ] ) ; 
 void func ( ) 
 { 
 char var [ var ] , var [ var ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 } 
 void func ( data_type * var , data_type * var ) 
 { 
 while ( * var ! = words ) 
 { 
 * var = * var ; 
 var + + ; 
 var + + ; 
 } 
 * var = words ; 
 } 
 var int call_func ( data_type var [ ] ) ; 
 void func ( ) 
 { 
 char var [ nums ] ; 
 var int var ; 
 printf ( words ) ; 
 gets ( var ) ; 
 var = call_func ( var ) ; 
 printf ( words , var ) ; 
 } 
 var int func ( data_type var [ ] ) 
 { 
 int var ; 
 var int var = nums ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 { 
 var + + ; 
 } 
 return ( var ) ; 
 } 
 var int call_func ( data_type * var ) ; 
 void func ( ) 
 { 
 char var [ nums ] ; 
 var int var ; 
 printf ( words ) ; 
 gets ( var ) ; 
 var = call_func ( var ) ; 
 printf ( words , var ) ; 
 } 
 var int func ( data_type * var ) 
 { 
 var int var = nums ; 
 for ( ; * var ! = words ; var + + ) 
 { 
 var + + ; 
 } 
 return ( var ) ; 
 } 
 #define var nums 
 char * call_func ( data_type * var , data_type * var ) ; 
 void func ( ) 
 { 
 char var [ nums * var ] ; 
 char var [ var ] ; 
 char * var = NULL ; 
 printf ( words ) ; 
 gets ( var ) ; 
 printf ( words ) ; 
 gets ( var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 } 
 char * func ( data_type * var , data_type * var ) 
 { 
 char * var = var ; 
 while ( * var ! = words ) 
 { 
 var + + ; 
 } 
 for ( ; * var ! = words ; var + + , var + + ) 
 { 
 * var = * var ; 
 } 
 * var = words ; 
 return var ; 
 } 
 #define var nums 
 void func ( ) 
 { 
 char var [ var ] ; 
 int var , var = nums , var = nums , var = nums , var = nums ; 
 printf ( words ) ; 
 gets ( var ) ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 { 
 if ( var [ var ] >= words & & var [ var ] <= words | | var [ var ] >= words & & var [ var ] <= words ) 
 var + + ; 
 else if ( var [ var ] >= words & & var [ var ] <= words ) 
 var + + ; 
 else if ( var [ var ] = = words ) 
 var + + ; 
 else 
 var + + ; 
 } 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 } 
 #define var nums 
 void func ( ) 
 { 
 char var [ var ] ; 
 int var , var = nums , var = nums , var = nums , var = nums ; 
 printf ( words ) ; 
 gets ( var ) ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 { 
 if ( call_func ( var [ var ] ) ) 
 var + + ; 
 else if ( call_func ( var [ var ] ) ) 
 var + + ; 
 else if ( call_func ( var [ var ] ) ) 
 var + + ; 
 else 
 var + + ; 
 } 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 } 
 #define var nums 
 void func ( ) 
 { 
 char var [ var ] ; 
 int var ; 
 printf ( words ) ; 
 gets ( var ) ; 
 var = nums ; 
 while ( ! func ( var [ var ] ) ) 
 { 
 var + + ; 
 } 
 var [ var ] = call_func ( var [ var ] ) ; 
 while ( ! func ( var [ var ] ) ) 
 { 
 var + + ; 
 } 
 while ( ! func ( var [ var ] ) ) 
 { 
 var + + ; 
 } 
 var [ var ] = call_func ( var [ var ] ) ; 
 printf ( words , var ) ; 
 } 
 #define var nums 
 void func ( ) 
 { 
 char var [ var ] ; 
 int var ; 
 printf ( words ) ; 
 gets ( var ) ; 
 var [ nums ] = call_func ( var [ nums ] ) ; 
 var = nums ; 
 while ( ! func ( var [ var ] ) ) 
 { 
 var + + ; 
 } 
 while ( ! func ( var [ var ] ) ) 
 { 
 var + + ; 
 } 
 var [ var ] = call_func ( var [ var ] ) ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 char var [ ] = { words } ; 
 int var ; 
 var var ; 
 double var ; 
 var = call_func ( var ) ; 
 var = call_func ( var ) ; 
 var = call_func ( var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 } 
 void func ( ) 
 { 
 int var [ nums ] , var ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 scanf ( words , & var [ var ] ) ; 
 } 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 int var [ nums ] , var ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 scanf ( words , var + var ) ; 
 } 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 printf ( words , * ( var + var ) ) ; 
 } 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 int var [ nums ] , * var ; 
 printf ( words ) ; 
 for ( var = var ; var < var + nums ; var + + ) 
 { 
 scanf ( words , var ) ; 
 } 
 for ( var = var ; var < var + nums ; var + + ) 
 { 
 printf ( words , * var ) ; 
 } 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 int var [ nums ] , * var = NULL , var ; 
 printf ( words ) ; 
 var = var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 scanf ( words , & var [ var ] ) ; 
 } 
 var = var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 void call_func ( data_type var [ ] , data_type var ) ; 
 void call_func ( data_type var [ ] , data_type var ) ; 
 void func ( ) 
 { 
 int var [ nums ] ; 
 int * var = var ; 
 printf ( words ) ; 
 call_func ( var , nums ) ; 
 call_func ( var , nums ) ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] ) ; 
 } 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 void call_func ( data_type * var , data_type var ) ; 
 void call_func ( data_type * var , data_type var ) ; 
 void func ( ) 
 { 
 int var [ nums ] ; 
 int * var = var ; 
 printf ( words ) ; 
 call_func ( var , nums ) ; 
 call_func ( var , nums ) ; 
 } 
 void func ( data_type * var , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + , var + + ) 
 { 
 scanf ( words , var ) ; 
 } 
 } 
 void func ( data_type * var , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + , var + + ) 
 { 
 printf ( words , * var ) ; 
 } 
 printf ( words ) ; 
 } 
 void call_func ( data_type var [ ] , data_type var ) ; 
 void call_func ( data_type var [ ] , data_type var ) ; 
 void func ( ) 
 { 
 int var [ nums ] ; 
 int * var = var ; 
 printf ( words ) ; 
 call_func ( var , nums ) ; 
 call_func ( var , nums ) ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , var + var ) ; 
 } 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , * ( var + var ) ) ; 
 } 
 printf ( words ) ; 
 } 
 void call_func ( data_type * var , data_type var ) ; 
 void call_func ( data_type * var , data_type var ) ; 
 void func ( ) 
 { 
 int var [ nums ] ; 
 int * var = var ; 
 printf ( words ) ; 
 call_func ( var , nums ) ; 
 call_func ( var , nums ) ; 
 } 
 void func ( data_type * var , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] ) ; 
 } 
 } 
 void func ( data_type * var , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 #define var nums 
 void call_func ( data_type var [ ] [ var ] , data_type var , data_type var ) ; 
 void call_func ( data_type var [ ] [ var ] , data_type var , data_type var ) ; 
 void func ( ) 
 { 
 int var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 call_func ( var , nums , nums ) ; 
 call_func ( var , nums , nums ) ; 
 } 
 void func ( data_type var [ ] [ var ] , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] [ var ] ) ; 
 } 
 } 
 } 
 void func ( data_type var [ ] [ var ] , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 } 
 #define var nums 
 void call_func ( data_type ( * var ) [ var ] , data_type var , data_type var ) ; 
 void call_func ( data_type ( * var ) [ var ] , data_type var , data_type var ) ; 
 void func ( ) 
 { 
 int var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 call_func ( var , nums , nums ) ; 
 call_func ( var , nums , nums ) ; 
 } 
 void func ( data_type ( * var ) [ var ] , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , * ( var + var ) + var ) ; 
 } 
 } 
 } 
 void func ( data_type ( * var ) [ var ] , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , * ( * ( var + var ) + var ) ) ; 
 } 
 printf ( words ) ; 
 } 
 } 
 void call_func ( data_type * var , data_type var , data_type var ) ; 
 void call_func ( data_type * var , data_type var , data_type var ) ; 
 void func ( ) 
 { 
 int var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 call_func ( * var , nums , nums ) ; 
 call_func ( * var , nums , nums ) ; 
 } 
 void func ( data_type * var , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var * var + var ] ) ; 
 } 
 } 
 } 
 void func ( data_type * var , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var * var + var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 } 
 #define var nums 
 #define var nums 
 void call_func ( data_type * var [ ] , data_type var ) ; 
 void func ( ) 
 { 
 int var , var ; 
 char var [ var ] [ var ] ; 
 char * var [ var ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 gets ( var [ var ] ) ; 
 var [ var ] = var [ var ] ; 
 } 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var [ var ] ) ; 
 } 
 } 
 void func ( data_type * var [ ] , data_type var ) 
 { 
 int var , var ; 
 char * var = NULL ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 { 
 for ( var = var + nums ; var < var ; var + + ) 
 { 
 if ( strcmp ( var [ var ] , var [ var ] ) < nums ) 
 { 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 } 
 } 
 } 
 #define var nums 
 #define var nums 
 void call_func ( data_type * var [ ] , data_type var ) ; 
 void func ( ) 
 { 
 int var , var ; 
 char var [ var ] [ var ] ; 
 char * var [ var ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 gets ( var [ var ] ) ; 
 var [ var ] = var [ var ] ; 
 } 
 printf ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 printf ( words , var [ var ] , var [ var ] ) ; 
 } 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 printf ( words , var [ var ] , var [ var ] ) ; 
 } 
 } 
 void func ( data_type * var [ ] , data_type var ) 
 { 
 int var , var ; 
 char * var = NULL ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 { 
 for ( var = var + nums ; var < var ; var + + ) 
 { 
 if ( strcmp ( var [ var ] , var [ var ] ) < nums ) 
 { 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 } 
 } 
 } 
 void func ( data_type var , data_type * var [ ] ) 
 { 
 int var ; 
 printf ( words , var ) ; 
 printf ( words , var [ nums ] ) ; 
 if ( var > nums ) 
 { 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 } 
 } 
 void call_func ( data_type * var , data_type var ) ; 
 double call_func ( data_type * var , data_type var ) ; 
 void func ( ) 
 { 
 int * var = NULL , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = ( int * ) malloc ( var * sizeof ( int ) ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words , var ) ; 
 call_func ( var , var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 free ( var ) ; 
 } 
 void func ( data_type * var , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] ) ; 
 } 
 } 
 double func ( data_type * var , data_type var ) 
 { 
 int var , var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var = var + var [ var ] ; 
 } 
 return ( double ) var / var ; 
 } 
 void call_func ( data_type * var , data_type var , data_type var ) ; 
 double call_func ( data_type * var , data_type var , data_type var ) ; 
 void func ( ) 
 { 
 int * var = NULL , var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = ( int * ) call_func ( var * var , sizeof ( data_type ) ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 call_func ( var , var , var ) ; 
 var = call_func ( var , var , var ) ; 
 printf ( words , var ) ; 
 free ( var ) ; 
 } 
 void func ( data_type * var , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var + nums ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var * var + var ] ) ; 
 } 
 } 
 } 
 double func ( data_type * var , data_type var , data_type var ) 
 { 
 int var , var , var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var = var + var [ var * var + var ] ; 
 } 
 } 
 return ( double ) var / ( var * var ) ; 
 } 
 char * call_func ( void ) ; 
 void func ( ) 
 { 
 char * var = NULL ; 
 var = call_func ( ) ; 
 call_func ( var ) ; 
 } 
 char * func ( void ) 
 { 
 char [ nums ] ; 
 scanf ( words , ) ; 
 return ; 
 } 
 char * call_func ( void ) ; 
 void func ( ) 
 { 
 char * var = NULL ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 var = call_func ( ) ; 
 printf ( words , var ) ; 
 call_func ( var ) ; 
 } 
 char * func ( void ) 
 { 
 char [ nums ] ; 
 scanf ( words , ) ; 
 printf ( words , ) ; 
 return ; 
 } 
 void call_func ( data_type * ) ; 
 void func ( ) 
 { 
 char [ nums ] ; 
 char * var = ; 
 call_func ( var ) ; 
 call_func ( var ) ; 
 } 
 void func ( data_type * struct_name ) 
 { 
 scanf ( words , ) ; 
 } 
 void call_func ( data_type * ) ; 
 void func ( ) 
 { 
 char * var = NULL ; 
 call_func ( var ) ; 
 call_func ( var ) ; 
 } 
 void func ( data_type * struct_name ) 
 { 
 scanf ( words , ) ; 
 } 
 void call_func ( data_type * ) ; 
 void func ( ) 
 { 
 char * var = NULL ; 
 call_func ( var ) ; 
 if ( var ! = NULL ) 
 { 
 call_func ( var ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 void func ( data_type * struct_name ) 
 { 
 if ( ! = NULL ) 
 { 
 scanf ( words , ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 void call_func ( data_type * ) ; 
 void func ( ) 
 { 
 char * var = NULL ; 
 call_func ( var ) ; 
 call_func ( var ) ; 
 } 
 void func ( data_type * struct_name ) 
 { 
 = ( char * ) malloc ( nums ) ; 
 scanf ( words , ) ; 
 } 
 char * call_func ( data_type * struct_name ) ; 
 void func ( ) 
 { 
 char * var = NULL ; 
 var = call_func ( var ) ; 
 call_func ( var ) ; 
 free ( var ) ; 
 } 
 char * func ( data_type * struct_name ) 
 { 
 = ( char * ) malloc ( nums ) ; 
 scanf ( words , ) ; 
 return ; 
 } 
 char * call_func ( ) ; 
 void func ( ) 
 { 
 char * var = NULL ; 
 var = call_func ( ) ; 
 call_func ( var ) ; 
 free ( var ) ; 
 } 
 char * func ( ) 
 { 
 char * = NULL ; 
 = ( char * ) malloc ( nums ) ; 
 scanf ( words , ) ; 
 return ; 
 } 
 #define var nums 
 void func ( ) 
 { 
 char var [ var ] ; 
 call_func ( var , var * sizeof ( data_type ) , stdin ) ; 
 call_func ( var ) ; 
 } 
 #define var nums 
 void func ( ) 
 { 
 char var [ var ] ; 
 gets ( var ) ; 
 call_func ( var ) ; 
 } 
 #define var nums 
 void func ( data_type var , data_type * var [ ] ) 
 { 
 char var [ var ] ; 
 if ( var > nums ) 
 { 
 call_func ( var , var [ nums ] , var - nums ) ; 
 } 
 } 
 #define var nums 
 void func ( data_type var , data_type * var [ ] ) 
 { 
 char var [ var ] ; 
 if ( var > nums ) 
 { 
 call_func ( var , var [ nums ] ) ; 
 } 
 } 
 typedef struct 
 { 
 int var ; 
 int var ; 
 int var ; 
 } var ; 
 typedef struct 
 { 
 var var ; 
 char var [ nums ] ; 
 char var ; 
 var ; 
 var [ nums ] ; 
 } var ; 
 void func ( ) 
 { 
 var var = { nums , words , words , { nums , nums , nums } , { nums , nums , nums , nums } } ; 
 var var ; 
 var = var ; 
 printf ( words , 
 var . var , var . var , var . var , 
 var . . var , var . . var , var . . var , 
 var . var [ nums ] , var . var [ nums ] , var . var [ nums ] , var . var [ nums ] ) ; 
 } 
 typedef struct 
 { 
 int var ; 
 int var ; 
 int var ; 
 } var ; 
 typedef struct 
 { 
 var var ; 
 char var [ nums ] ; 
 char var ; 
 var ; 
 var [ nums ] ; 
 } var ; 
 void func ( ) 
 { 
 var var , var ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var . var ) ; 
 scanf ( words , var . var ) ; 
 scanf ( words , & var . var ) ; 
 scanf ( words , & var . . var ) ; 
 scanf ( words , & var . . var ) ; 
 scanf ( words , & var . . var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 scanf ( words , & var . var [ var ] ) ; 
 } 
 var = var ; 
 printf ( words , & var ) ; 
 printf ( words , 
 var . var , var . var , var . var , 
 var . . var , var . . var , var . . var , 
 var . var [ nums ] , var . var [ nums ] , var . var [ nums ] , var . var [ nums ] ) ; 
 } 
 typedef struct 
 { 
 char var ; 
 int var ; 
 char var ; 
 } var ; 
 void func ( ) 
 { 
 var = { words , nums , words } ; 
 printf ( words , sizeof ( ) ) ; 
 } 
 typedef struct 
 { 
 int var ; 
 int var ; 
 int var ; 
 } var ; 
 typedef struct 
 { 
 var var ; 
 char var [ nums ] ; 
 char var ; 
 var ; 
 var [ nums ] ; 
 } var ; 
 void func ( ) 
 { 
 int var , var , var [ nums ] ; 
 var var [ nums ] = { { nums , words , words , { nums , nums , nums } , { nums , nums , nums , nums } } , 
 { nums , words , words , { nums , nums , nums } , { nums , nums , nums , nums } } , 
 { nums , words , words , { nums , nums , nums } , { nums , nums , nums , nums } } , 
 { nums , words , words , { nums , nums , nums } , { nums , nums , nums , nums } } 
 } ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 var [ var ] = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 var [ var ] = var [ var ] + var [ var ] . var [ var ] ; 
 } 
 printf ( words , 
 var [ var ] . var , 
 var [ var ] . var , 
 var [ var ] . var , 
 var [ var ] . . var , 
 var [ var ] . . var , 
 var [ var ] . . var , 
 var [ var ] . var [ nums ] , 
 var [ var ] . var [ nums ] , 
 var [ var ] . var [ nums ] , 
 var [ var ] . var [ nums ] , 
 var [ var ] / nums . nums ) ; 
 } 
 } 
 struct 
 { 
 int var ; 
 int var ; 
 int var ; 
 } ; 
 void func ( struct var var ) 
 { 
 var . var = nums ; 
 var . var = nums ; 
 var . var = nums ; 
 } 
 void func ( ) 
 { 
 struct struct_name struct_var ; 
 var . var = nums ; 
 var . var = nums ; 
 var . var = nums ; 
 printf ( words , var . var , var . var , var . var ) ; 
 call_func ( var ) ; 
 printf ( words , var . var , var . var , var . var ) ; 
 } 
 struct 
 { 
 int var ; 
 int var ; 
 int var ; 
 } ; 
 void func ( struct struct_name * var ) 
 { 
 var - > var = nums ; 
 var - > var = nums ; 
 var - > var = nums ; 
 } 
 void func ( ) 
 { 
 struct struct_name struct_var ; 
 var . var = nums ; 
 var . var = nums ; 
 var . var = nums ; 
 printf ( words , var . var , var . var , var . var ) ; 
 call_func ( & var ) ; 
 printf ( words , var . var , var . var , var . var ) ; 
 } 
 struct 
 { 
 int var ; 
 int var ; 
 int var ; 
 } ; 
 struct struct_name struct_var ( struct struct_name struct_var ) 
 { 
 var . var = nums ; 
 var . var = nums ; 
 var . var = nums ; 
 return var ; 
 } 
 void func ( ) 
 { 
 struct struct_name struct_var ; 
 var . var = nums ; 
 var . var = nums ; 
 var . var = nums ; 
 printf ( words , var . var , var . var , var . var ) ; 
 var = call_func ( var ) ; 
 printf ( words , var . var , var . var , var . var ) ; 
 } 
 #define var nums 
 typedef struct 
 { 
 int var ; 
 int var ; 
 int var ; 
 } var ; 
 typedef struct 
 { 
 var var ; 
 char var [ nums ] ; 
 char var ; 
 var ; 
 var [ nums ] ; 
 } var ; 
 void call_func ( var var [ ] , data_type var , data_type var ) ; 
 void call_func ( var var [ ] , data_type var [ ] , data_type var , data_type var ) ; 
 void call_func ( var var [ ] , data_type var [ ] , data_type var , data_type var ) ; 
 void func ( ) 
 { 
 float var [ var ] ; 
 var var [ var ] ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var , var , nums ) ; 
 call_func ( var , var , var , nums ) ; 
 call_func ( var , var , var , nums ) ; 
 } 
 void func ( var var [ ] , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var + nums ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 scanf ( words , var [ var ] . var ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 scanf ( words , & var [ var ] . . var ) ; 
 scanf ( words , & var [ var ] . . var ) ; 
 scanf ( words , & var [ var ] . . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] . var [ var ] ) ; 
 } 
 } 
 } 
 void func ( var var [ ] , data_type var [ ] , data_type var , data_type var ) 
 { 
 int var , var , var [ var ] ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] = var [ var ] + var [ var ] . var [ var ] ; 
 } 
 var [ var ] = ( float ) var [ var ] / var ; 
 } 
 } 
 void func ( var var [ ] , data_type var [ ] , data_type var , data_type var ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] . var , 
 var [ var ] . var , 
 var [ var ] . var , 
 var [ var ] . . var , 
 var [ var ] . . var , 
 var [ var ] . . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] . var [ var ] ) ; 
 } 
 printf ( words , var [ var ] ) ; 
 } 
 } 
 union 
 { 
 var var ; 
 char var ; 
 float var ; 
 } ; 
 typedef union struct_name struct_var ; 
 void func ( ) 
 { 
 printf ( words , sizeof ( var ) ) ; 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var ) ; 
 void call_func ( struct struct_name * var ) ; 
 void call_func ( struct struct_name * var ) ; 
 struct struct_name * struct_var ( struct struct_name * struct_var , int var ) ; 
 struct 
 { 
 int var ; 
 struct struct_name * struct_var ; 
 } ; 
 func ( ) 
 { 
 var = nums ; 
 var ; 
 struct struct_name * struct_var = NULL ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( var = = words | | var = = words ) 
 { 
 var = call_func ( var ) ; 
 call_func ( var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var + + ; 
 } 
 printf ( words , var ) ; 
 var = call_func ( var , nums ) ; 
 call_func ( var ) ; 
 call_func ( var ) ; 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var ) 
 { 
 struct struct_name * struct_var = NULL ; 
 struct struct_name * struct_var = var ; 
 var ; 
 var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 if ( var = = NULL ) 
 { 
 var = var ; 
 } 
 else 
 { 
 while ( var - > var ! = NULL ) 
 { 
 var = var - > var ; 
 } 
 var - > var = var ; 
 } 
 var = var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var - > var = var ; 
 var - > var = NULL ; 
 return var ; 
 } 
 void func ( struct struct_name * var ) 
 { 
 struct struct_name * struct_var = var ; 
 var = nums ; 
 while ( var ! = NULL ) 
 { 
 printf ( words , var , var - > var ) ; 
 var = var - > var ; 
 var + + ; 
 } 
 } 
 void func ( struct struct_name * var ) 
 { 
 struct struct_name * struct_var = var , * var = NULL ; 
 while ( var ! = NULL ) 
 { 
 var = var ; 
 var = var - > var ; 
 free ( var ) ; 
 } 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var , int var ) 
 { 
 struct struct_name * struct_var = var , * var = var , * var = NULL ; 
 var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 var - > var = NULL ; 
 var - > var = var ; 
 if ( var = = NULL ) 
 { 
 var = var ; 
 } 
 else 
 { 
 while ( var - > var < var & & var - > var ! = NULL ) 
 { 
 var = var ; 
 var = var - > var ; 
 } 
 if ( var - > var >= var ) 
 { 
 if ( var = = var ) 
 { 
 var - > var = var ; 
 var = var ; 
 } 
 else 
 { 
 var = var ; 
 var - > var = var - > var ; 
 var - > var = var ; 
 } 
 } 
 else 
 { 
 var - > var = var ; 
 } 
 } 
 return var ; 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var ) ; 
 void call_func ( struct struct_name * var ) ; 
 void call_func ( struct struct_name * var ) ; 
 struct struct_name * struct_var ( struct struct_name * struct_var , int var ) ; 
 struct 
 { 
 int var ; 
 struct struct_name * struct_var ; 
 } ; 
 func ( ) 
 { 
 var = nums ; 
 var ; 
 struct struct_name * struct_var = NULL ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( var = = words | | var = = words ) 
 { 
 var = call_func ( var ) ; 
 call_func ( var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var + + ; 
 } 
 printf ( words , var ) ; 
 var = call_func ( var , nums ) ; 
 call_func ( var ) ; 
 call_func ( var ) ; 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var ) 
 { 
 struct struct_name * struct_var = NULL ; 
 struct struct_name * struct_var = var ; 
 var ; 
 var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 if ( var = = NULL ) 
 { 
 var = var ; 
 } 
 else 
 { 
 while ( var - > var ! = NULL ) 
 { 
 var = var - > var ; 
 } 
 var - > var = var ; 
 } 
 var = var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var - > var = var ; 
 var - > var = NULL ; 
 return var ; 
 } 
 void func ( struct struct_name * var ) 
 { 
 struct struct_name * struct_var = var ; 
 var = nums ; 
 while ( var ! = NULL ) 
 { 
 printf ( words , var , var - > var ) ; 
 var = var - > var ; 
 var + + ; 
 } 
 } 
 void func ( struct struct_name * var ) 
 { 
 struct struct_name * struct_var = var , * var = NULL ; 
 while ( var ! = NULL ) 
 { 
 var = var ; 
 var = var - > var ; 
 free ( var ) ; 
 } 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var , int var ) 
 { 
 struct struct_name * struct_var = var , * var = var ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 return ( var ) ; 
 } 
 while ( var ! = var - > var & & var - > var ! = NULL ) 
 { 
 var = var ; 
 var = var - > var ; 
 } 
 if ( var = = var - > var ) 
 { 
 if ( var = = var ) 
 { 
 var = var - > var ; 
 } 
 else 
 { 
 var - > var = var - > var ; 
 } 
 free ( var ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 return var ; 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var ) ; 
 void call_func ( struct struct_name * var ) ; 
 void call_func ( struct struct_name * var ) ; 
 struct 
 { 
 int var ; 
 struct struct_name * struct_var ; 
 } ; 
 func ( ) 
 { 
 var = nums ; 
 var ; 
 struct struct_name * struct_var = NULL ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( var = = words | | var = = words ) 
 { 
 var = call_func ( var ) ; 
 call_func ( var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var + + ; 
 } 
 printf ( words , var ) ; 
 call_func ( var ) ; 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var ) 
 { 
 struct struct_name * struct_var = NULL , * var = var ; 
 var ; 
 var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 if ( var = = NULL ) 
 { 
 var = var ; 
 } 
 else 
 { 
 while ( var - > var ! = NULL ) 
 { 
 var = var - > var ; 
 } 
 var - > var = var ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var - > var = var ; 
 var - > var = NULL ; 
 return var ; 
 } 
 void func ( struct struct_name * var ) 
 { 
 struct struct_name * struct_var = var ; 
 var = nums ; 
 while ( var ! = NULL ) 
 { 
 printf ( words , var , var - > var ) ; 
 var = var - > var ; 
 var + + ; 
 } 
 } 
 void func ( struct struct_name * var ) 
 { 
 struct struct_name * struct_var = var , * var = NULL ; 
 while ( var ! = NULL ) 
 { 
 var = var ; 
 var = var - > var ; 
 free ( var ) ; 
 } 
 } 
 void func ( ) 
 { 
 FILE * var ; 
 char var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 var = call_func ( ) ; 
 while ( var ! = words ) 
 { 
 call_func ( var , var ) ; 
 var = call_func ( ) ; 
 } 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 FILE * var ; 
 char var ; 
 int var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 call_func ( var , var ) ; 
 } 
 fclose ( var ) ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 while ( ( var = call_func ( var ) ) ! = ) 
 { 
 call_func ( var ) ; 
 } 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 FILE * var ; 
 char var ; 
 int var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 call_func ( var , var ) ; 
 } 
 fclose ( var ) ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 while ( ( var = call_func ( var ) ) ! = ) 
 { 
 if ( func ( var ) ) 
 { 
 printf ( words , var ) ; 
 } 
 else 
 { 
 printf ( words , var ) ; 
 } 
 } 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 FILE * var ; 
 char var ; 
 int var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 call_func ( var , var ) ; 
 } 
 fclose ( var ) ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 var = call_func ( var ) ; 
 if ( func ( var ) ) 
 { 
 printf ( words , var ) ; 
 } 
 else 
 { 
 printf ( words , var ) ; 
 } 
 } 
 fclose ( var ) ; 
 } 
 #define var nums 
 void func ( ) 
 { 
 FILE * var ; 
 char var [ var ] ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 gets ( var ) ; 
 call_func ( var , var ) ; 
 fclose ( var ) ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 call_func ( var , var , var ) ; 
 call_func ( var ) ; 
 fclose ( var ) ; 
 } 
 #define var nums 
 typedef struct 
 { 
 int var ; 
 int var ; 
 int var ; 
 } var ; 
 typedef struct 
 { 
 var var ; 
 char var [ nums ] ; 
 char var ; 
 var ; 
 int var [ nums ] ; 
 float var ; 
 } var ; 
 void call_func ( var var [ ] , data_type var , data_type var ) ; 
 void call_func ( var var [ ] , data_type var , data_type var ) ; 
 void call_func ( var var [ ] , data_type var , data_type var ) ; 
 void func ( ) 
 { 
 var var [ var ] ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var , var , nums ) ; 
 call_func ( var , var , nums ) ; 
 call_func ( var , var , nums ) ; 
 } 
 void func ( var var [ ] , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var + nums ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 scanf ( words , var [ var ] . var ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 scanf ( words , & var [ var ] . . var ) ; 
 scanf ( words , & var [ var ] . . var ) ; 
 scanf ( words , & var [ var ] . . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] . var [ var ] ) ; 
 } 
 } 
 } 
 void func ( var var [ ] , data_type var , data_type var ) 
 { 
 int var , var , var [ var ] ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] = var [ var ] + var [ var ] . var [ var ] ; 
 } 
 var [ var ] . var = ( float ) var [ var ] / var ; 
 } 
 } 
 void func ( var var [ ] , data_type var , data_type var ) 
 { 
 FILE * var ; 
 int var , var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , words , var [ var ] . var , 
 var [ var ] . var , 
 var [ var ] . var , 
 var [ var ] . struct_name . var , 
 var [ var ] . struct_name . var , 
 var [ var ] . struct_name . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , words , var [ var ] . var [ var ] ) ; 
 } 
 call_func ( var , words , var [ var ] . var ) ; 
 } 
 fclose ( var ) ; 
 } 
 #define var nums 
 typedef struct 
 { 
 int var ; 
 int var ; 
 int var ; 
 } var ; 
 typedef struct 
 { 
 var var ; 
 char var [ nums ] ; 
 char var ; 
 var ; 
 int var [ nums ] ; 
 float var ; 
 } var ; 
 int call_func ( var var [ ] , data_type var ) ; 
 void call_func ( var var [ ] , data_type var , data_type var ) ; 
 void func ( ) 
 { 
 var var [ var ] ; 
 int var ; 
 var = call_func ( var , nums ) ; 
 call_func ( var , var , nums ) ; 
 } 
 int func ( var var [ ] , data_type var ) 
 { 
 FILE * var ; 
 int var , var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = nums ; ! feof ( var ) ; var + + ) 
 { 
 call_func ( var , words , & var [ var ] . var ) ; 
 call_func ( var , words , var [ var ] . var ) ; 
 call_func ( var , words , & var [ var ] . var ) ; 
 call_func ( var , words , & var [ var ] . struct_name . var , 
 & var [ var ] . struct_name . var , 
 & var [ var ] . struct_name . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , words , & var [ var ] . var [ var ] ) ; 
 } 
 call_func ( var , words , & var [ var ] . var ) ; 
 } 
 fclose ( var ) ; 
 printf ( words , var - nums ) ; 
 return var - nums ; 
 } 
 void func ( var var [ ] , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , 
 var [ var ] . var , var [ var ] . var , var [ var ] . var , 
 var [ var ] . . var , var [ var ] . . var , var [ var ] . . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] . var [ var ] ) ; 
 } 
 printf ( words , var [ var ] . var ) ; 
 } 
 } 
 #define var nums 
 typedef struct 
 { 
 int var ; 
 int var ; 
 int var ; 
 } var ; 
 typedef struct 
 { 
 var var ; 
 char var [ nums ] ; 
 char var ; 
 var ; 
 int var [ nums ] ; 
 float var ; 
 } var ; 
 void call_func ( var var [ ] , data_type var , data_type var ) ; 
 void call_func ( var var [ ] , data_type var , data_type var ) ; 
 void call_func ( var var [ ] , data_type var ) ; 
 int call_func ( var var [ ] ) ; 
 void call_func ( var var [ ] , data_type var , data_type var ) ; 
 void func ( ) 
 { 
 var var [ var ] ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var , var , nums ) ; 
 call_func ( var , var , nums ) ; 
 call_func ( var , var ) ; 
 var = call_func ( var ) ; 
 call_func ( var , var , nums ) ; 
 } 
 void func ( var var [ ] , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var + nums ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 scanf ( words , var [ var ] . var ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 scanf ( words , & var [ var ] . . var ) ; 
 scanf ( words , & var [ var ] . . var ) ; 
 scanf ( words , & var [ var ] . . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] . var [ var ] ) ; 
 } 
 } 
 } 
 void func ( var var [ ] , data_type var , data_type var ) 
 { 
 int var , var , var [ var ] ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] = var [ var ] + var [ var ] . var [ var ] ; 
 } 
 var [ var ] . var = ( float ) var [ var ] / var ; 
 } 
 } 
 void func ( var var [ ] , data_type var ) 
 { 
 FILE * var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 fwrite ( var , sizeof ( var ) , var , var ) ; 
 fclose ( var ) ; 
 } 
 int func ( var var [ ] ) 
 { 
 FILE * var ; 
 int var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = nums ; ! feof ( var ) ; var + + ) 
 { 
 fread ( & var [ var ] , sizeof ( var ) , nums , var ) ; 
 } 
 fclose ( var ) ; 
 printf ( words , var - nums ) ; 
 return var - nums ; 
 } 
 void func ( var var [ ] , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , 
 var [ var ] . var , var [ var ] . var , var [ var ] . var , 
 var [ var ] . . var , var [ var ] . . var , var [ var ] . . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] . var [ var ] ) ; 
 } 
 printf ( words , var [ var ] . var ) ; 
 } 
 } 
 typedef struct 
 { 
 int var ; 
 int var ; 
 int var ; 
 } var ; 
 typedef struct 
 { 
 var var ; 
 char var [ nums ] ; 
 char var ; 
 var ; 
 int var [ nums ] ; 
 float var ; 
 } var ; 
 void call_func ( data_type var [ ] , var var ) ; 
 void func ( ) 
 { 
 var var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( words , var ) ; 
 } 
 void func ( data_type var [ ] , var var ) 
 { 
 FILE * var ; 
 int var ; 
 var var ; 
 if ( ( var = fopen ( var , words ) ) = = NULL ) 
 { 
 printf ( words , var ) ; 
 call_func ( nums ) ; 
 } 
 call_func ( var , ( var - nums ) * sizeof ( var ) , var ) ; 
 fread ( & var , sizeof ( var ) , nums , var ) ; 
 printf ( words , 
 var . var , var . var , var . var , 
 var . . var , var . . var , var . . var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 printf ( words , var . var [ var ] ) ; 
 } 
 printf ( words , var . var ) ; 
 fclose ( var ) ; 
 } 
 int func ( void ) 
 { 
 int var , var = nums ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 if ( var % nums = = nums ) 
 var = var + var ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 scanf ( words , & var ) ; 
 printf ( words , call_func ( var ) ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var , var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 var = var * var ; 
 return var ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var / nums ; var + + ) 
 if ( var % var = = nums ) break ; 
 if ( var > var / nums & & var ! = nums ) 
 printf ( words , var ) ; 
 else 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 var = nums ; 
 var = nums * ( var - nums ) / nums ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 var = var + var ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 var = var * var ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , var + var ) ; 
 printf ( words , var - var ) ; 
 printf ( words , var * var ) ; 
 printf ( words , var / var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var * call_func ( nums + var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var <= nums ) 
 var = nums * var / nums ; 
 else 
 var = nums . nums * var - nums . nums ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var ! = nums ) 
 var = nums / var ; 
 else 
 var = nums ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < nums ) 
 var = call_func ( var , nums ) + nums * var + nums / var ; 
 else 
 var = call_func ( var ) ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = ( nums . nums / nums . nums ) * ( var - nums ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var , var ; 
 var = nums ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var * var * var / nums ; 
 if ( var <= var ) 
 printf ( words , var ) ; 
 else 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < nums ) 
 var = nums ; 
 else if ( var <= nums ) 
 var = nums . nums * var ; 
 else if ( var > nums ) 
 var = nums . nums * nums + ( var - nums ) * ( nums . nums + nums . nums ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 = call_func ( var ) ; 
 var = var + ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var = nums , var = nums ; 
 double , var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 = var * nums . nums / var ; 
 var = var + ; 
 var = - var ; 
 var = var + nums ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var ; 
 double , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var = var = nums ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 = var * nums . nums * var / var ; 
 var = var + ; 
 var = - var ; 
 var = var + nums ; 
 var = var + nums ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var , & var ) ; 
 var = var + var + var + var ; 
 var = var / nums ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 double call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 if ( var <= var ) { 
 var = call_func ( var ) / ( call_func ( var ) * call_func ( var - var ) ) ; 
 printf ( words , var ) ; 
 } 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 double func ( data_type var ) 
 { 
 int var ; 
 double var ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 var = var * var ; 
 return var ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = call_func ( nums , var ) ; 
 printf ( words , var , var ) ; 
 } 
 return nums ; 
 } 
 int func ( void ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 for ( var = nums ; var <= var - nums ; var + + ) 
 printf ( words ) ; 
 for ( var = nums ; var <= var - var + nums ; var + + ) 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var <= var ) { 
 printf ( words ) ; 
 for ( var = var ; var <= var ; var + + ) { 
 var = ( nums . nums / nums . nums ) * ( var - nums ) ; 
 printf ( words , var , var ) ; 
 } 
 } 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var ; 
 double , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = nums ; 
 if ( var <= var & & var > nums ) { 
 for ( var = var ; var <= var ; var + + ) { 
 = var * var + nums . nums / var ; 
 var = var + ; 
 } 
 printf ( words , var ) ; 
 } 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 printf ( words ) ; 
 return nums ; 
 } 
 double call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var , var ; 
 double var , ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 = call_func ( var ) ; 
 var = var + ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type var ) 
 { 
 int var ; 
 double var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 var = var * var ; 
 return var ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = call_func ( nums , var ) ; 
 printf ( words , var , var ) ; 
 } 
 return nums ; 
 } 
 double call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 printf ( words , var , call_func ( var ) ) ; 
 return nums ; 
 } 
 double func ( data_type var ) 
 { 
 int var ; 
 double var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 var = var * var ; 
 return var ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 double , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var = nums ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 = var * nums . nums / var ; 
 var = var + ; 
 var = - var ; 
 var = var + nums ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 break ; 
 switch ( var ) { 
 case nums : var = nums . nums ; break ; 
 case nums : var = nums . nums ; break ; 
 case nums : var = nums . nums ; break ; 
 case nums : var = nums . nums ; break ; 
 default : var = nums . nums ; break ; 
 } 
 printf ( words , var ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var > nums ) 
 printf ( words ) ; 
 else if ( var >= nums ) 
 printf ( words ) ; 
 else if ( var >= nums ) 
 printf ( words ) ; 
 else if ( var >= nums ) 
 printf ( words ) ; 
 else if ( var >= nums ) 
 printf ( words ) ; 
 else if ( var >= nums ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 double , , var ; 
 printf ( words ) ; 
 scanf ( words , & ) ; 
 printf ( words ) ; 
 scanf ( words , & ) ; 
 if ( <= nums ) 
 var = nums ; 
 else if ( <= nums ) 
 var = nums + ( - nums ) * nums ; 
 else 
 var = nums + nums * nums + ( - nums ) * nums ; 
 var = var + call_func ( struct_name / nums ) * nums ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var >= var * nums . nums & & var < var * nums . nums ) 
 printf ( words ) ; 
 else if ( var >= var * nums . nums ) 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < nums ) 
 var = nums ; 
 else if ( var <= nums ) 
 var = nums * var / nums ; 
 else 
 var = nums . nums * var - nums . nums ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < nums ) 
 var = - nums ; 
 else if ( var = = nums ) 
 var = nums ; 
 else 
 var = nums ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var = nums ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = var ) 
 printf ( words ) ; 
 else 
 if ( var > var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 double var , var ; 
 char var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 switch ( var ) { 
 case words : 
 printf ( words , var + var ) ; 
 break ; 
 case words : 
 printf ( words , var - var ) ; 
 break ; 
 case words : 
 printf ( words , var * var ) ; 
 break ; 
 case words : 
 printf ( words , var / var ) ; 
 break ; 
 default : 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var % nums = = nums ) 
 printf ( words , var ) ; 
 else 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 double var , var ; 
 char var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 if ( var = = words ) 
 printf ( words , var + var ) ; 
 else if ( var = = words ) 
 printf ( words , var - var ) ; 
 else if ( var = = words ) 
 printf ( words , var * var ) ; 
 else if ( var = = words ) 
 printf ( words , var / var ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 double var , var ; 
 char var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 if ( var = = words ) 
 printf ( words , var + var ) ; 
 else if ( var = = words ) 
 printf ( words , var - var ) ; 
 else if ( var = = words ) 
 printf ( words , var * var ) ; 
 else if ( var = = words ) 
 if ( var = = nums ) 
 printf ( words ) ; 
 else 
 printf ( words , var / var ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 double var , var , var , var , var , var , var , var , var , var , , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var , & var , & var , & var ) ; 
 if ( ( var - var ) * ( var - var ) ! = ( var - var ) * ( var - var ) ) { 
 var = call_func ( ( var - var ) * ( var - var ) + ( var - var ) * ( var - var ) ) ; 
 var = call_func ( ( var - var ) * ( var - var ) + ( var - var ) * ( var - var ) ) ; 
 var = call_func ( ( var - var ) * ( var - var ) + ( var - var ) * ( var - var ) ) ; 
 var = var + var + var ; 
 = var / nums . nums ; 
 var = call_func ( struct_name * ( struct_name - var ) * ( struct_name - var ) * ( struct_name - var ) ) ; 
 printf ( words , var , var ) ; 
 } 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 if ( ( var % nums = = nums & & var % nums ! = nums ) | | ( var % nums = = nums ) ) 
 printf ( words , var ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var = nums ; 
 double var = nums , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 printf ( words , var ) ; 
 scanf ( words , & var ) ; 
 var = var + var ; 
 if ( var < nums ) 
 var + + ; 
 } 
 printf ( words , var / var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 char var ; 
 var = var = var = nums ; 
 printf ( words ) ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 var = call_func ( ) ; 
 if ( var >= words & & var <= words ) 
 var + + ; 
 else if ( ( var >= words & & var <= words ) | | ( var >= words & & var <= words ) ) 
 var + + ; 
 else 
 var + + ; 
 } 
 printf ( words , var , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var , var , var ; 
 double var ; 
 var = var = var = var = var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 printf ( words , var ) ; 
 scanf ( words , & var ) ; 
 if ( var >= nums ) 
 var + + ; 
 else if ( var >= nums ) 
 var + + ; 
 else if ( var >= nums ) 
 var + + ; 
 else if ( var >= nums ) 
 var + + ; 
 else 
 var + + ; 
 } 
 printf ( words , var , var , var , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var , var , var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var = var = var = var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 printf ( words , var ) ; 
 scanf ( words , & var ) ; 
 var = var / nums ; 
 switch ( var ) { 
 case nums : 
 case nums : 
 var + + ; 
 break ; 
 case nums : 
 var + + ; 
 break ; 
 case nums : 
 var + + ; 
 break ; 
 case nums : 
 var + + ; 
 break ; 
 default : 
 var + + ; 
 break ; 
 } 
 } 
 printf ( words , var , var , var , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var = nums ; 
 double var = nums , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 printf ( words , var ) ; 
 scanf ( words , & var ) ; 
 var = var + var ; 
 if ( var >= nums ) 
 var + + ; 
 } 
 printf ( words , var / var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var , var ; 
 char var ; 
 var = var = var = var = nums ; 
 printf ( words ) ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 var = call_func ( ) ; 
 if ( var >= words & & var <= words ) 
 var + + ; 
 else if ( ( var >= words & & var <= words ) | | ( var >= words & & var <= words ) ) 
 var + + ; 
 else if ( var = = words | | var = = words ) 
 var + + ; 
 else 
 var + + ; 
 } 
 printf ( words , var , var , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 char var ; 
 var = var = var = nums ; 
 printf ( words ) ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 var = call_func ( ) ; 
 switch ( var ) { 
 case words : 
 case words : 
 var + + ; 
 break ; 
 case words : case words : case words : case words : case words : 
 case words : case words : case words : case words : case words : 
 var + + ; 
 break ; 
 default : 
 var + + ; 
 break ; 
 } 
 } 
 printf ( words , var , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 if ( var > var ) { 
 var = var ; 
 var = var ; 
 var = var ; 
 } 
 if ( var > var ) { 
 var = var ; 
 var = var ; 
 var = var ; 
 } 
 if ( var > var ) { 
 var = var ; 
 var = var ; 
 var = var ; 
 } 
 printf ( words , var , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 break ; 
 switch ( var ) { 
 case nums : var = nums . nums ; break ; 
 case nums : var = nums . nums ; break ; 
 case nums : var = nums . nums ; break ; 
 case nums : var = nums . nums ; break ; 
 default : var = nums . nums ; break ; 
 } 
 printf ( words , var ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var = nums , var , var = nums , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( var < var ) { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < nums ) { 
 var = nums ; 
 break ; 
 } 
 var + + ; 
 if ( var = = var ) { 
 var = nums ; 
 break ; 
 } 
 else 
 if ( var > var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 } 
 if ( var = = nums ) 
 printf ( words ) ; 
 else if ( var > nums & & var <= nums ) 
 printf ( words ) ; 
 else if ( var > nums & & var <= var & & var = = nums ) 
 printf ( words ) ; 
 else if ( ( var >= var & & var = = nums ) | | var = = nums ) 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= ( var + nums ) / nums ; var + + ) { 
 for ( var = nums ; var <= ( var + nums ) / nums - var ; var + + ) 
 printf ( words ) ; 
 for ( var = nums ; var <= nums * var - nums ; var + + ) 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 for ( var = ( var + nums ) / nums + nums ; var <= var ; var + + ) { 
 for ( var = nums ; var <= var - ( var + nums ) / nums ; var + + ) 
 printf ( words ) ; 
 for ( var = nums ; var <= var - ( var - ( var + nums ) / nums ) * nums ; var + + ) 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= ( var + nums ) / nums ; var + + ) { 
 for ( var = nums ; var <= ( var + nums ) / nums - var ; var + + ) 
 printf ( words ) ; 
 for ( var = nums ; var <= nums * var - nums ; var + + ) 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 for ( var = nums ; var <= ( var - nums ) / nums ; var + + ) { 
 for ( var = nums ; var <= var ; var + + ) 
 printf ( words ) ; 
 for ( var = nums ; var <= var - nums * var ; var + + ) 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var ; 
 var = var * nums . nums / nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = var + nums * var ; 
 var = var * nums . nums / nums ; 
 } 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var , ; 
 var = nums ; 
 var = nums ; 
 var = nums ; 
 = nums . nums ; 
 while ( func ( struct_name ) >= nums . nums ) { 
 = var * nums . nums / var ; 
 var = var + ; 
 var = - var ; 
 var = var + nums ; 
 } 
 var = var * nums ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 var = ( var + nums ) * nums ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = var - nums ; var > nums ; var - - ) 
 var = nums * ( var + nums ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var , var ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 for ( var = nums ; var <= var / nums ; var + + ) 
 for ( var = nums ; var <= var / nums ; var + + ) 
 if ( var + var * nums + var * nums = = var ) { 
 var + + ; 
 var = var + var + var ; 
 printf ( words , var , var , var ) ; 
 printf ( words , var ) ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 double var = nums ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 var = var + call_func ( var ) ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type var ) 
 { 
 int var ; 
 double var ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 var = var * var ; 
 return var ; 
 } 
 int func ( void ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( var ! = nums ) { 
 printf ( words , var % nums ) ; 
 var = var / nums ; 
 } 
 call_func ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var / nums ; var + + ) 
 if ( var % var = = nums ) 
 break ; 
 if ( var > var / nums & & var ! = nums ) 
 printf ( words , var ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var = nums ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 var = call_func ( var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 if ( var % var = = nums ) 
 break ; 
 } 
 if ( var > var ) { 
 printf ( words , var ) ; 
 var + + ; 
 if ( var % nums = = nums ) 
 printf ( words ) ; 
 } 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var ; 
 double var , ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) { 
 = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 = struct_name * struct_var ; 
 var = var + nums . nums / ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 for ( var = nums ; var <= nums ; var + + ) 
 for ( var = nums ; var <= nums ; var + + ) 
 if ( var + var + var = = nums & & var * nums + var * nums + var * nums . nums = = nums ) 
 printf ( words , var , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 for ( var = nums ; var <= nums ; var + + ) { 
 var = nums - var - var ; 
 if ( var * nums + var * nums + var * nums . nums = = nums ) 
 printf ( words , var , var , var ) ; 
 } 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( var > nums ) { 
 if ( var % nums ! = nums ) 
 var = var + var ; 
 scanf ( words , & var ) ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 if ( var < var ) { 
 var = var ; 
 var = var ; 
 var = var ; 
 } 
 var = var * var ; 
 var = var % var ; 
 while ( var ! = nums ) { 
 var = var ; 
 var = var ; 
 var = var % var ; 
 } 
 printf ( words , var ) ; 
 printf ( words , var / var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 if ( var < var ) { 
 var = var ; 
 var = var ; 
 var = var ; 
 } 
 var = var * var ; 
 var = var % var ; 
 while ( var ! = nums ) { 
 var = var ; 
 var = var ; 
 var = var % var ; 
 } 
 printf ( words , var ) ; 
 printf ( words , var / var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var , ; 
 var = nums ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 = struct_name * struct_var ; 
 var = var + ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = call_func ( nums , ( var - nums ) ) ; var <= call_func ( nums , var ) ; var + + ) { 
 var = nums ; 
 var = var ; 
 while ( var ! = nums ) { 
 var = ( int ) var % nums ; 
 var = var + call_func ( var , var ) ; 
 var = var / nums ; 
 } 
 if ( var = = var ) { 
 printf ( words , var ) ; 
 var = var ; 
 } 
 else 
 var = var ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 var = nums ; 
 var = nums ; 
 printf ( words , var , var ) ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 var = var + var ; 
 printf ( words , var ) ; 
 var = var ; 
 var = var ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var , var , var ; 
 var = nums ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = var ; var <= var ; var + + ) { 
 var = call_func ( var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 if ( var % var = = nums ) break ; 
 if ( var > var & & var ! = nums ) { 
 var + + ; 
 var = var + var ; 
 } 
 } 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 if ( var < nums ) 
 var = - var ; 
 do { 
 var = var / nums ; 
 var + + ; 
 } while ( var ! = nums ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var = nums , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < nums ) 
 var = - var ; 
 if ( var = = nums ) 
 var = nums ; 
 while ( var ! = nums ) { 
 var = var / nums ; 
 var + + ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var , var ; 
 var = nums ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 do { 
 var = var + var ; 
 var + + ; 
 var = var ; 
 var = var ; 
 } while ( var < var ) ; 
 if ( var = = nums ) 
 printf ( words ) ; 
 else 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var ; 
 double , var ; 
 var = nums ; 
 var = nums ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 = var * nums . nums / var ; 
 var = var + ; 
 var = var ; 
 var = var + var ; 
 var = var ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double , var , var ; 
 var = nums ; 
 var = nums ; 
 = nums . nums ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( func ( struct_name ) >= var ) { 
 = var * nums . nums / var ; 
 var = var + ; 
 var = - var ; 
 var = var + nums ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var > nums ) { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) { 
 scanf ( words , & var ) ; 
 if ( var < var ) 
 var = var ; 
 } 
 printf ( words , var ) ; 
 } 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var > nums ) { 
 var = var ; 
 while ( var >= nums ) { 
 scanf ( words , & var ) ; 
 if ( var < var ) 
 var = var ; 
 } 
 printf ( words , var ) ; 
 } 
 return nums ; 
 } 
 double call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 double var , , ; 
 = nums ; 
 = nums . nums ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( func ( struct_name ) >= nums . nums ) { 
 = call_func ( var , var ) / call_func ( var ) ; 
 = + ; 
 var = var + nums ; 
 } 
 printf ( words , ) ; 
 return nums ; 
 } 
 double func ( data_type var ) 
 { 
 int var ; 
 double var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 var = var * var ; 
 return var ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var > nums ) { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) { 
 scanf ( words , & var ) ; 
 if ( var > var ) 
 var = var ; 
 } 
 printf ( words , var ) ; 
 } 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var ; 
 double var , ; 
 var = nums ; 
 = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 = var + struct_name * struct_var ; 
 var = var + ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var = nums , var , var , var ; 
 call_func ( struct_name ( nums ) ) ; 
 var = call_func ( ) % nums + nums ; 
 var = nums ; 
 while ( var < nums ) { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var + + ; 
 if ( var = = var ) { 
 var = nums ; 
 printf ( words ) ; 
 break ; 
 } 
 else 
 if ( var > var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 } 
 if ( var = = nums ) 
 printf ( words ) ; 
 return nums ; 
 } 
 double call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type var ) 
 { 
 int var , var ; 
 double , var ; 
 var = nums ; 
 var = nums ; 
 var = nums ; 
 = nums . nums ; 
 while ( func ( struct_name ) >= var ) { 
 = var * nums . nums / var ; 
 var = var + ; 
 var = - var ; 
 var = var + nums ; 
 } 
 return var * nums ; 
 } 
 double call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 printf ( words , var , call_func ( var ) ) ; 
 return nums ; 
 } 
 double func ( data_type var ) 
 { 
 static double var = nums ; 
 var = var * var ; 
 return ( var ) ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var , var , var , var ; 
 var = nums ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 if ( var > var ) { 
 var = var ; 
 var = var ; 
 var = var ; 
 } 
 for ( var = var ; var <= var ; var + + ) { 
 if ( func ( var ) ) { 
 var + + ; 
 var = var + var ; 
 } 
 } 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var , var ; 
 if ( var = = nums ) return nums ; 
 var = call_func ( var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 if ( var % var = = nums ) 
 return nums ; 
 return nums ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var , var = nums ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 if ( func ( var ) ) { 
 printf ( words , var ) ; 
 var + + ; 
 if ( var % nums = = nums ) 
 printf ( words ) ; 
 } 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var , var ; 
 if ( var = = nums ) return nums ; 
 var = call_func ( var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 if ( var % var = = nums ) 
 return nums ; 
 return nums ; 
 } 
 double call_func ( data_type var , data_type var , data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 double var , var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = call_func ( var , var , var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type var , data_type var , data_type var , data_type var ) 
 { 
 double var ; 
 var = call_func ( ( var - var ) * ( var - var ) + ( var - var ) * ( var - var ) ) ; 
 return var ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , call_func ( var ) ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var , var ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 var = var + var ; 
 return var ; 
 } 
 int call_func ( data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , call_func ( var , var ) ) ; 
 return nums ; 
 } 
 int func ( data_type var , data_type var ) 
 { 
 int var , var ; 
 var = nums ; 
 for ( var = var ; var <= var ; var + + ) 
 var = var + var ; 
 return var ; 
 } 
 double call_func ( data_type var ) ; 
 double call_func ( data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 double var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type var , data_type var ) 
 { 
 int var ; 
 double var , var , var , , var ; 
 var = nums . nums ; 
 = nums . nums ; 
 var = nums ; 
 var = nums ; 
 while ( func ( struct_name ) >= var ) { 
 var = call_func ( var , nums * ( var - nums ) ) ; 
 var = call_func ( nums * ( var - nums ) ) ; 
 = var * var / var ; 
 var = var + ; 
 var = - var ; 
 var = var + nums ; 
 } 
 return var ; 
 } 
 double func ( data_type var ) 
 { 
 int var ; 
 double var ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 var = var * var ; 
 return var ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 if ( var > var ) { 
 var = var ; 
 var = var ; 
 var = var ; 
 } 
 for ( var = var ; var <= var ; var + + ) { 
 if ( call_func ( var ) ) 
 printf ( words , var ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var , var , var ; 
 var = nums ; 
 var = var ; 
 while ( var ! = nums ) { 
 var = var % nums ; 
 var = var + var * var * var ; 
 var = var / nums ; 
 } 
 if ( var = = var ) 
 return nums ; 
 else 
 return nums ; 
 } 
 int call_func ( data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( data_type var , data_type var ) 
 { 
 int var , var ; 
 var = nums ; 
 while ( var ! = nums ) { 
 var = var % nums ; 
 if ( var = = var ) 
 var + + ; 
 var = var / nums ; 
 } 
 return var ; 
 } 
 int call_func ( data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , call_func ( var , var ) ) ; 
 return nums ; 
 } 
 int func ( data_type var , data_type var ) 
 { 
 int var ; 
 if ( var < var ) 
 var = var ; 
 return var ; 
 } 
 void call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var ) ; 
 return nums ; 
 } 
 void func ( data_type var ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var <= var ; var + + ) { 
 for ( var = nums ; var <= var - var ; var + + ) 
 printf ( words ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 printf ( words , var ) ; 
 call_func ( words ) ; 
 } 
 } 
 float var ; 
 void call_func ( data_type var ) , call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 float var ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( var ! = nums ) { 
 if ( var = = nums | | var = = nums ) { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 call_func ( var ) ; 
 else 
 call_func ( var ) ; 
 printf ( words , var ) ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } 
 return nums ; 
 } 
 void func ( data_type var ) 
 { 
 var = var + var ; 
 } 
 void func ( data_type var ) 
 { 
 var = var - var ; 
 } 
 double call_func ( data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 double var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type var , data_type var ) 
 { 
 double var ; 
 var = nums . nums * var * var * var ; 
 return var ; 
 } 
 float var , var ; 
 void call_func ( data_type var , data_type var , data_type var , data_type var ) ; 
 void call_func ( data_type var , data_type var , data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 float var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 call_func ( var , var , var , var ) ; 
 printf ( words , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 void func ( data_type var , data_type var , data_type var , data_type var ) 
 { 
 var = var + var ; 
 var = var + var ; 
 } 
 void func ( data_type var , data_type var , data_type var , data_type var ) 
 { 
 var = var * var - var * var ; 
 var = var * var + var * var ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 char var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var ; 
 var = call_func ( ) ; 
 while ( var ! = words ) { 
 scanf ( words , & var ) ; 
 switch ( var ) { 
 case words : var = var + var ; break ; 
 case words : var = var - var ; break ; 
 case words : var = var * var ; break ; 
 case words : 
 if ( var = = nums ) { 
 printf ( words ) ; 
 return nums ; 
 } 
 else { 
 var = var / var ; 
 break ; 
 } 
 } 
 var = call_func ( ) ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 double call_func ( data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var ; 
 double , var ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 = call_func ( var , var ) ; 
 var = var + ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type var , data_type var ) 
 { 
 int var ; 
 double var ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = var * nums + var ; 
 } 
 return var ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , call_func ( var ) ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var = nums ; 
 while ( var ! = nums ) { 
 var = var * nums + var % nums ; 
 var = var / nums ; 
 } 
 return var ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 for ( var = var ; var <= var ; var + + ) { 
 for ( var = nums ; call_func ( var ) < var ; var + + ) { 
 if ( func ( var + nums ) = = var ) { 
 printf ( words , var ) ; 
 } 
 } 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 if ( var = = nums ) 
 return nums ; 
 else 
 if ( var = = nums | | var = = nums ) 
 return nums ; 
 else 
 return call_func ( var - nums ) + call_func ( var - nums ) ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 if ( var > var ) { 
 var = var ; 
 var = var ; 
 var = var ; 
 } 
 for ( var = var ; var <= var ; var + + ) 
 if ( var = = call_func ( var ) ) 
 printf ( words , var ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var , var ; 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var % var = = nums ) 
 var = var + var ; 
 return var ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var = nums ; 
 for ( var = nums ; var <= nums ; var + = nums ) 
 for ( var = nums ; var <= var / nums ; var = var + nums ) 
 if ( func ( var ) & & call_func ( var - var ) ) { 
 printf ( words , var , var , var - var ) ; 
 var + + ; 
 if ( var % nums = = nums ) 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var % var ! = nums ; var + + ) ; 
 return ( var > var / nums : nums ) ; 
 } 
 int func ( void ) 
 { 
 int var = nums ; 
 char var ; 
 printf ( words ) ; 
 do { 
 var = call_func ( ) ; 
 if ( ( var >= words & & var <= words ) | | ( var >= words & & var <= words ) ) { 
 var + + ; 
 do { 
 var = call_func ( ) ; 
 } while ( ( var >= words & & var <= words ) | | ( var >= words & & var <= words ) ) ; 
 } 
 } while ( var ! = words ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 void call_func ( data_type * var , data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 call_func ( var , var , var ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 void func ( data_type * var , data_type var , data_type var ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = var [ var - nums ] ; 
 for ( var = var - nums ; var > nums ; var - - ) 
 var [ var ] = var [ var - nums ] ; 
 var [ nums ] = var ; 
 } 
 } 
 int func ( void ) 
 { 
 char var ; 
 printf ( words ) ; 
 var = call_func ( ) ; 
 while ( var ! = words ) { 
 if ( var >= words & & var <= words ) 
 var = var - words + words ; 
 else if ( var >= words & & var <= words ) 
 var = var - words + words ; 
 call_func ( var ) ; 
 var = call_func ( ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var ; 
 char var , var ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 scanf ( words , & var ) ; 
 if ( var >= words & & var <= words ) 
 var = var - words + words ; 
 printf ( words , var , var , var % nums ) ; 
 } 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 char var ; 
 var = var = var = var = nums ; 
 printf ( words ) ; 
 var = call_func ( ) ; 
 while ( var ! = words ) { 
 if ( ( var >= words & & var <= words ) | | ( var >= words & & var <= words ) ) 
 var + + ; 
 else if ( var = = words ) 
 var + + ; 
 else if ( var >= words & & var <= words ) 
 var + + ; 
 else 
 var + + ; 
 var = call_func ( ) ; 
 } 
 printf ( words , var , var , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var ; 
 int var [ nums ] [ nums ] , var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var * var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] [ var ] ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var ; var + + ) { 
 var = var + var ; 
 while ( var >= var ) { 
 var = var - var ; 
 } 
 var [ var ] [ var ] = var [ var ] [ var ] ; 
 } 
 } 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 int var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 var [ var ] [ var ] = var * var + var + nums ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 if ( var <= var ) { 
 var = var [ var ] [ var ] ; 
 var [ var ] [ var ] = var [ var ] [ var ] ; 
 var [ var ] [ var ] = var ; 
 } 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var ; 
 int var [ nums ] ; 
 double var , var ; 
 var = nums ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) { 
 scanf ( words , & var [ var ] ) ; 
 var = var + var [ var ] ; 
 } 
 var = var / nums ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) { 
 if ( var [ var ] > var ) 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int call_func ( data_type var , data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 var = call_func ( var , var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( data_type var , data_type var , data_type var ) 
 { 
 int var , var ; 
 int var [ nums ] [ nums ] = { { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } , 
 { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } 
 } ; 
 var = ( ( var % nums = = nums & & var % nums ! = nums ) | | var % nums = = nums ) ; 
 for ( var = nums ; var < var ; var + + ) 
 var = var + var [ var ] [ var ] ; 
 return var ; 
 } 
 int func ( void ) 
 { 
 int var , var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 for ( var = nums ; var < var / nums ; var + + ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var - nums - var ] ; 
 var [ var - nums - var ] = var ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var = nums ; ; 
 int var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var * var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] [ var ] ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 if ( var > var ) 
 if ( var [ var ] [ var ] ! = nums ) { 
 var = nums ; 
 break ; 
 } 
 if ( var = = nums ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 var = nums ; 
 while ( ( var [ var ] = call_func ( ) ) ! = words ) 
 var + + ; 
 var [ var ] = words ; 
 var = nums ; 
 var = var - nums ; 
 while ( var < var ) { 
 if ( var [ var ] ! = var [ var ] ) 
 break ; 
 var + + ; 
 var - - ; 
 } 
 if ( var >= var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var ; 
 int var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , var * var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] [ var ] ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) { 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 var = var + var [ var ] [ var ] ; 
 printf ( words , var , var ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var ; 
 int var [ nums ] , var [ nums ] , var [ nums ] ; 
 for ( var = nums ; var < nums ; var + + ) 
 var [ var ] = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 scanf ( words , & var [ var ] ) ; 
 if ( var [ var ] = = nums ) 
 var [ nums ] + + ; 
 else if ( var [ var ] < nums ) 
 var [ var ] = - var [ var ] ; 
 while ( var [ var ] ! = nums ) { 
 var = var [ var ] % nums ; 
 var [ var ] + + ; 
 var [ var ] = var [ var ] / nums ; 
 } 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , var , var [ var ] ) ; 
 var = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 if ( var [ var ] > var [ var ] ) 
 var = var ; 
 var = nums ; 
 for ( var = nums ; var < nums ; var + + ) { 
 if ( var [ var ] = = var [ var ] ) { 
 var [ var ] = var ; 
 var + + ; 
 } 
 } 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] > var [ var ] ) var = var ; 
 printf ( words , var [ var ] , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var ; 
 int var [ nums ] = { nums , nums } ; 
 for ( var = nums ; var <= nums ; var + + ) 
 var [ var ] = var [ var - nums ] + var [ var - nums ] ; 
 for ( var = nums ; var < nums ; var + + ) { 
 printf ( words , var [ var ] ) ; 
 if ( ( var + nums ) % nums = = nums ) 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 if ( var [ var ] = = var ) { 
 printf ( words , var ) ; 
 var = nums ; 
 break ; 
 } 
 if ( var = = nums ) 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 var = nums ; 
 while ( ( var [ var ] = call_func ( ) ) ! = words ) 
 var + + ; 
 var [ var ] = words ; 
 var = nums ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 if ( var [ var ] >= words & & var [ var ] <= words ) 
 var = nums * var + var [ var ] - words ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var = nums ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 var = nums ; 
 while ( ( var [ var ] = call_func ( ) ) ! = words ) 
 var + + ; 
 var [ var ] = words ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 if ( var [ var ] > words & & var [ var ] <= words & & var [ var ] ! = words & & var [ var ] ! = words & & var [ var ] ! = words & & var [ var ] ! = words ) 
 var + + ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 char var [ nums ] ; 
 var = nums ; 
 while ( ( var [ var ] = call_func ( ) ) ! = words ) 
 var + + ; 
 var [ var ] = words ; 
 var = nums ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 if ( var [ var ] >= words & & var [ var ] <= words ) 
 var + + ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 int var [ nums ] ; 
 for ( var = nums ; var <= nums ; var + + ) 
 var [ var ] = nums ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var > nums & & var < nums ) 
 var [ var ] + + ; 
 else 
 printf ( words , var ) ; 
 } 
 for ( var = nums ; var <= nums ; var + + ) 
 printf ( words , var , var [ var ] ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 
 for ( var = nums ; var < var - nums ; var + + ) { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 if ( var [ var ] < var [ var ] ) var = var ; 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 for ( var = nums ; var < var - nums ; var + + ) { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 if ( var [ var ] > var [ var ] ) var = var ; 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 int var [ nums ] , var [ nums ] , var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var * var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] [ var ] ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 var [ var ] = var [ var ] [ nums ] ; 
 for ( var = nums ; var < var ; var + + ) 
 var [ var ] = var [ nums ] [ var ] ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) { 
 if ( var [ var ] [ var ] > var [ var ] ) var [ var ] = var [ var ] [ var ] ; 
 if ( var [ var ] [ var ] < var [ var ] ) var [ var ] = var [ var ] [ var ] ; 
 } 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] = = var [ var ] ) { 
 printf ( words , var , var ) ; 
 var + + ; 
 } 
 if ( var = = nums ) 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var ; 
 int var [ nums ] , var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] = = var [ var ] ) { 
 var = nums ; 
 break ; 
 } 
 if ( var = = nums ) 
 printf ( words , var [ var ] ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) { 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] = = var [ var ] ) { 
 var = nums ; 
 break ; 
 } 
 if ( var = = nums ) 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 int var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 for ( var = nums ; var < nums ; var + + ) 
 scanf ( words , & var [ var ] [ var ] ) ; 
 for ( var = nums ; var < nums ; var + + ) { 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 var = nums ; 
 var = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 for ( var = nums ; var < nums ; var + + ) 
 if ( var [ var ] [ var ] > var [ var ] [ var ] ) { 
 var = var ; 
 var = var ; 
 } 
 printf ( words , var , var , var [ var ] [ var ] ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] > var [ var ] ) var = var ; 
 printf ( words , var [ var ] ) ; 
 printf ( words , var ) ; 
 var = var [ var ] ; 
 var [ var ] = var [ nums ] ; 
 var [ nums ] = var ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 char var [ nums ] ; 
 char var ; 
 printf ( words ) ; 
 var = nums ; 
 while ( ( var [ var ] = call_func ( ) ) ! = words ) 
 var + + ; 
 var [ var ] = words ; 
 for ( var = nums ; var < var / nums ; var + + ) { 
 var = var [ var - nums - var ] ; 
 var [ var - nums - var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 call_func ( var [ var ] ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 var = nums ; 
 while ( ( var [ var ] = call_func ( ) ) ! = words ) 
 var + + ; 
 var [ var ] = words ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 if ( var [ var ] >= words & & var [ var ] <= words ) 
 var [ var ] = nums - var [ var ] ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 call_func ( var [ var ] ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 int var [ nums ] [ nums ] ; 
 for ( var = nums ; var < nums ; var + + ) 
 for ( var = nums ; var < nums ; var + + ) 
 var [ var ] [ var ] = var + var ; 
 for ( var = nums ; var < nums ; var + + ) { 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var ; 
 char var ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 var = call_func ( ) ; 
 printf ( words ) ; 
 var = nums ; 
 var [ var ] = call_func ( ) ; 
 while ( ( var [ var ] = call_func ( ) ) ! = words ) 
 var + + ; 
 var [ var ] = words ; 
 for ( var = var - nums ; var >= nums ; var - - ) 
 if ( var = = var [ var ] ) 
 break ; 
 if ( var >= nums ) 
 printf ( words , var ) ; 
 else if ( var < nums ) 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var ; 
 int var [ nums ] ; 
 int * var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 var [ var ] = var + nums ; 
 var = var ; 
 var = var = nums ; 
 while ( var < var - nums ) { 
 if ( * var ! = nums ) var + + ; 
 if ( var = = var ) { 
 var + + ; 
 printf ( words , var , * var ) ; 
 * var = nums ; 
 var = nums ; 
 } 
 var + + ; 
 if ( var = = var + var ) 
 var = var ; 
 } 
 var = var ; 
 while ( * var = = nums ) 
 var + + ; 
 printf ( words , * var ) ; 
 } 
 void call_func ( data_type var , data_type * var , data_type * var ) ; 
 int func ( void ) 
 { 
 float var ; 
 int var ; 
 float var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var , & var , & var ) ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 void func ( data_type var , data_type * var , data_type * var ) 
 { 
 * var = ( int ) var ; 
 * var = var - * var ; 
 } 
 void call_func ( data_type var , data_type var , data_type * var , data_type * var ) ; 
 int func ( void ) 
 { 
 float var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 call_func ( var , var , & var , & var ) ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 void func ( data_type var , data_type var , data_type * var , data_type * var ) 
 { 
 * var = var + var ; 
 * var = var - var ; 
 } 
 int func ( ) 
 { 
 int var , var , var , * var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( ( var = ( int * ) func ( var , sizeof ( data_type ) ) ) = = NULL ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , var + var ) ; 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 var + = * ( var + var ) ; 
 printf ( words , var ) ; 
 free ( var ) ; 
 return nums ; 
 } 
 void call_func ( data_type var [ ] , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , * var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 
 if ( ( var = ( int * ) func ( var , sizeof ( data_type ) ) ) = = NULL ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , var + var ) ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , * ( var + var ) ) ; 
 printf ( words ) ; 
 free ( var ) ; 
 return nums ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var - var ; var + + ) 
 if ( var [ var ] > var [ var + nums ] ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var + nums ] ; 
 var [ var + nums ] = var ; 
 } 
 } 
 void call_func ( data_type var [ ] , data_type var ) ; 
 int call_func ( data_type * var , data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 call_func ( var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 var = call_func ( var , var , var ) ; 
 if ( var >= nums ) 
 printf ( words , var ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( data_type * var , data_type var , data_type var ) 
 { 
 int var , var , var ; 
 var = nums ; 
 var = var - nums ; 
 while ( var <= var ) { 
 var = ( var + var ) / nums ; 
 if ( var = = var [ var ] ) 
 break ; 
 else if ( var > var [ var ] ) 
 var = var + nums ; 
 else 
 var = var - nums ; 
 } 
 if ( var <= var ) 
 return var ; 
 else 
 return - nums ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var , var , var , var ; 
 for ( var = nums ; var < var - nums ; var + + ) { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 if ( var [ var ] < var [ var ] ) var = var ; 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 } 
 int func ( void ) 
 { 
 int var , var [ nums ] , * var ; 
 var var ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 var = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 var = var + var [ var ] ; 
 printf ( words , var ) ; 
 var = nums ; 
 for ( var = var ; var <= var + nums ; var + + ) 
 var = var + * var ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var ; 
 char [ nums ] ; 
 char * var ; 
 var = var = var = var = var = nums ; 
 printf ( words ) ; 
 gets ( ) ; 
 for ( var = ; * var ! = words ; var + + ) { 
 if ( * var >= words & & * var <= words ) 
 var + + ; 
 else if ( * var >= words & & * var <= words ) 
 var + + ; 
 else if ( * var = = words ) 
 var + + ; 
 else if ( * var >= words & & * var <= words ) 
 var + + ; 
 else 
 var + + ; 
 } 
 printf ( words , var , var , var , var , var ) ; 
 } 
 int call_func ( data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = call_func ( var , var ) ; 
 if ( var = = - nums ) 
 printf ( words ) ; 
 else 
 printf ( words , var ) ; 
 } 
 int func ( data_type var , data_type var ) 
 { 
 int var [ nums ] ; 
 int * var = var ; 
 int var , var , var , var , var , var = - nums ; 
 for ( var = nums ; var < var ; var + + ) 
 * ( var + var ) = var + nums ; 
 var = nums ; 
 var = nums ; var = nums ; 
 while ( var < var - nums ) 
 { 
 if ( * ( var + var ) ! = nums ) var + + ; 
 if ( var = = var ) 
 { 
 * ( var + var ) = nums ; 
 var = nums ; 
 var + + ; 
 } 
 var + + ; 
 if ( var = = var ) 
 var = nums ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 if ( * ( var + var ) ! = nums ) 
 var = * ( var + var ) ; 
 return var ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 while ( scanf ( words , & var , & var ) = = nums & & var & & var ) { 
 int var = nums ; 
 for ( var = nums ; var <= var ; + + var ) 
 var = ( var + var ) % var ; 
 printf ( words , var , var , var + nums ) ; 
 } 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var = nums ; 
 int * var = NULL ; 
 var = & var ; 
 printf ( words , var ) ; 
 printf ( words , var , * var ) ; 
 return nums ; 
 } 
 void call_func ( data_type var [ ] , data_type var ) ; 
 int call_func ( data_type * var , data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 call_func ( var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 var = call_func ( var , var , var ) ; 
 if ( var >= nums ) 
 printf ( words , var ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( data_type * var , data_type var , data_type var ) 
 { 
 int var , var , var ; 
 var = nums ; 
 var = var - nums ; 
 while ( var <= var ) { 
 var = ( var + var ) / nums ; 
 if ( var = = var [ var ] ) 
 break ; 
 else if ( var > var [ var ] ) 
 var = var + nums ; 
 else 
 var = var - nums ; 
 } 
 if ( var <= var ) 
 return var ; 
 else 
 return - nums ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var - var ; var + + ) 
 if ( var [ var ] > var [ var + nums ] ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var + nums ] ; 
 var [ var + nums ] = var ; 
 } 
 } 
 void call_func ( data_type var [ ] , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 call_func ( var , var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var - var ; var + + ) 
 if ( var [ var ] > var [ var + nums ] ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var + nums ] ; 
 var [ var + nums ] = var ; 
 } 
 } 
 #define var nums 
 void call_func ( data_type * struct_name ) ; 
 int func ( void ) 
 { 
 char var [ var ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 call_func ( var ) ; 
 printf ( words , words , var ) ; 
 return nums ; 
 } 
 void func ( data_type * struct_name ) 
 { 
 for ( ; * ! = words ; + + ) 
 if ( * = = words ) 
 * = words ; 
 else 
 * = * + nums ; 
 } 
 int call_func ( data_type * var ) ; 
 int func ( void ) 
 { 
 char var [ nums ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 if ( call_func ( var ) ! = nums ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( data_type * var ) 
 { 
 char * var ; 
 var = var ; 
 while ( * var ! = words ) 
 var + + ; 
 var - - ; 
 while ( var < var ) { 
 if ( * var ! = * var ) 
 return nums ; 
 var + + ; 
 var - - ; 
 } 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var ; 
 int var [ nums ] ; 
 int * var ; 
 var = nums ; 
 for ( var = nums ; var <= nums ; var + + ) 
 var = var + var ; 
 printf ( words , var ) ; 
 var = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 var [ var ] = var + nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 var = var + var [ var ] ; 
 printf ( words , var ) ; 
 var = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 var [ var ] = var + nums ; 
 for ( var = var ; var <= & var [ nums ] ; var + + ) 
 var = var + * var ; 
 printf ( words , var ) ; 
 var = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 var [ var ] = var + nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 var = var + * ( var + var ) ; 
 printf ( words , var ) ; 
 var = nums ; 
 var = var ; 
 for ( var = nums ; var < nums ; var + + ) 
 var [ var ] = var + nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 var = var + var [ var ] ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 void call_func ( data_type * struct_name , data_type var ) ; 
 int func ( void ) 
 { 
 char var ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 printf ( words ) ; 
 var = call_func ( ) ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 return nums ; 
 } 
 void func ( data_type * struct_name , data_type var ) 
 { 
 int var , var ; 
 var = var = nums ; 
 while ( [ var ] ! = words ) { 
 if ( [ var ] ! = var ) { 
 [ var ] = [ var ] ; 
 var + + ; 
 } 
 var + + ; 
 } 
 [ var ] = words ; 
 } 
 void call_func ( data_type * struct_name , data_type var ) ; 
 int func ( void ) 
 { 
 char var ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 printf ( words ) ; 
 var = call_func ( ) ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 return nums ; 
 } 
 void func ( data_type * struct_name , data_type var ) 
 { 
 int var , var ; 
 var = var = nums ; 
 while ( * ( + var ) ! = words ) { 
 if ( * ( + var ) ! = var ) { 
 * ( + var ) = * ( + var ) ; 
 var + + ; 
 } 
 var + + ; 
 } 
 * ( + var ) = words ; 
 } 
 void call_func ( data_type * struct_name , data_type var ) ; 
 int func ( void ) 
 { 
 char var ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 printf ( words ) ; 
 var = call_func ( ) ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 return nums ; 
 } 
 void func ( data_type * struct_name , data_type var ) 
 { 
 int var , var ; 
 var = nums ; 
 for ( var = nums ; * ( + var ) ! = words ; var + + ) 
 if ( * ( + var ) ! = var ) { 
 * ( + var ) = * ( + var ) ; 
 var + + ; 
 } 
 * ( + var ) = words ; 
 } 
 void call_func ( data_type * struct_name , data_type * var , data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 char var [ nums ] , [ nums ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( call_func ( var ) < var ) 
 printf ( words ) ; 
 else 
 call_func ( struct_name , var , var ) ; 
 call_func ( struct_name ) ; 
 return nums ; 
 } 
 void func ( data_type * struct_name , data_type * var , data_type var ) 
 { 
 var = var + var - nums ; 
 while ( * var ! = words ) { 
 * = * var ; 
 + + ; 
 var + + ; 
 } 
 * = words ; 
 } 
 int func ( void ) 
 { 
 double var [ nums ] , * var , * var ; 
 var = & var [ nums ] ; 
 var = var + nums ; 
 printf ( words , var - var ) ; 
 printf ( words , ( int ) var - ( int ) var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 float var , var , var , var ; 
 float * var ; 
 printf ( words var : words 
 scanf ( words , & var ) ; 
 if ( ( var = ( float * ) func ( var , sizeof ( data_type ) ) ) = = NULL ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 var = nums ; 
 var = nums ; 
 var = - nums ; 
 printf ( words var : words 
 for ( var = nums ; var < var ; var + + ) { 
 scanf ( words , var + var ) ; 
 var + = * ( var + var ) ; 
 if ( var > * ( var + var ) ) 
 var = * ( var + var ) ; 
 if ( var < * ( var + var ) ) 
 var = * ( var + var ) ; 
 } 
 var = var / var ; 
 printf ( words , var , var , var ) ; 
 free ( var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var ; 
 char var [ nums ] , var [ nums ] ; 
 scanf ( words , var ) ; 
 call_func ( var , var ) ; 
 for ( var = nums ; var < nums ; var + + ) { 
 scanf ( words , var ) ; 
 if ( strcmp ( var , var ) < nums ) 
 call_func ( var , var ) ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 void call_func ( data_type var , data_type var , data_type * var , data_type * var ) ; 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 call_func ( var , var , & var , & var ) ; 
 printf ( words , var , var , var ) ; 
 return nums ; 
 } 
 void func ( data_type var , data_type var , data_type * var , data_type * var ) 
 { 
 int var , var ; 
 int var [ nums ] [ nums ] = { 
 { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } , 
 { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } 
 } ; 
 var = ( var % nums = = nums & & var % nums ! = nums ) | | var % nums = = nums ; 
 for ( var = nums ; var >= var [ var ] [ var ] ; var + + ) 
 var = var - var [ var ] [ var ] ; 
 * var = var ; 
 * var = var ; 
 } 
 void call_func ( data_type * var , data_type * var ) ; 
 int func ( void ) 
 { 
 int var = nums , var = nums ; 
 int * var = & var , * var = & var ; 
 call_func ( var , var ) ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 void func ( data_type * var , data_type * var ) 
 { 
 int var ; 
 var = * var ; 
 * var = * var ; 
 * var = var ; 
 } 
 void call_func ( data_type var [ ] , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var , var , var , var ; 
 for ( var = nums ; var < var - nums ; var + + ) { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 if ( var [ var ] < var [ var ] ) var = var ; 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 } 
 int call_func ( data_type var [ ] , data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var , var , var ) ; 
 if ( var >= nums ) 
 printf ( words , var ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( data_type var [ ] , data_type var , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var = = * ( var + var ) ) 
 return var ; 
 return - nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var ; 
 char var [ nums ] [ nums ] , var [ nums ] ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 scanf ( words , var [ var ] ) ; 
 for ( var = nums ; var < nums ; var + + ) { 
 var = var ; 
 for ( var = var + nums ; var < nums ; var + + ) 
 if ( strcmp ( var [ var ] , var [ var ] ) < nums ) var = var ; 
 call_func ( var , var [ var ] ) ; 
 call_func ( var [ var ] , var [ var ] ) ; 
 call_func ( var [ var ] , var ) ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 call_func ( var [ var ] ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 char var [ nums ] ; 
 scanf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var ; 
 char var [ nums ] , var [ nums ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 var [ var ] = var [ var ] ; 
 var [ var ] = words ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 var [ var - nums ] = var [ var ] ; 
 var [ var - nums ] = words ; 
 call_func ( var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 void func ( data_type * var , data_type var , data_type var ) { 
 int var = nums , var = nums , var = nums ; 
 int * var = var ; 
 int var = nums ; 
 for ( var = nums ; var < var ; var + + ) { 
 * ( var + var ) = var + nums ; 
 } 
 while ( var < var - nums ) { 
 if ( * ( var + var ) ! = nums ) { 
 var + + ; 
 } 
 if ( var = = var ) { 
 var = nums ; 
 * ( var + var ) = nums ; 
 var + + ; 
 } 
 var + + ; 
 if ( var = = var ) { 
 var = nums ; 
 } 
 } 
 
 for ( var = nums ; var < var ; var + + ) { 
 if ( * ( var + var ) ! = nums ) { 
 printf ( words , * ( var + var ) ) ; 
 } 
 } 
 } 
 int func ( ) 
 { 
 int var , var ; 
 int var [ nums ] = { nums } ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var , var , var ) ; 
 return nums ; 
 } 
 struct { 
 char var [ nums ] ; 
 int ; 
 char var [ nums ] ; 
 } ; 
 int func ( void ) 
 { 
 int var , var , var ; 
 struct struct_name struct_var , var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words , var + nums ) ; 
 printf ( words ) ; 
 scanf ( words , var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . ) ; 
 printf ( words ) ; 
 scanf ( words , var [ var ] . var ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var - var ; var + + ) 
 if ( var [ var ] . > var [ var + nums ] . ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var + nums ] ; 
 var [ var + nums ] = var ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] . var , var [ var ] . , var [ var ] . var ) ; 
 return nums ; 
 } 
 struct { 
 int var , var , var ; 
 } ; 
 struct { 
 char var [ nums ] ; 
 struct struct_name struct_var ; 
 char var [ nums ] ; 
 } ; 
 int func ( void ) 
 { 
 int var , var , var ; 
 struct struct_name struct_var , var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words , var + nums ) ; 
 printf ( words ) ; 
 scanf ( words , var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var . var , & var [ var ] . var . var , & var [ var ] . var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var - var ; var + + ) 
 if ( var [ var ] . var . var > var [ var + nums ] . var . var ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var + nums ] ; 
 var [ var + nums ] = var ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var - var ; var + + ) 
 if ( var [ var ] . var . var = = var [ var + nums ] . var . var ) 
 if ( var [ var ] . var . var > var [ var + nums ] . var . var ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var + nums ] ; 
 var [ var + nums ] = var ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var - var ; var + + ) 
 if ( ( var [ var ] . var . var = = var [ var + nums ] . var . var ) & & ( var [ var ] . var . var = = var [ var + nums ] . var . var ) ) 
 if ( var [ var ] . var . var > var [ var + nums ] . var . var ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var + nums ] ; 
 var [ var + nums ] = var ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] . var , var [ var ] . var , var [ var ] . var ) ; 
 return nums ; 
 } 
 struct { 
 int var ; 
 char var [ nums ] ; 
 int var , var , var ; 
 double var ; 
 } ; 
 int func ( void ) 
 { 
 int var , var ; 
 struct struct_name struct_var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words var , var var var var : words 
 for ( var = nums ; var <= var ; var + + ) { 
 printf ( words , var ) ; 
 scanf ( words , & var . var , var . var , & var . var , & var . var , & var . var ) ; 
 var . var = ( var . var + var . var + var . var ) / nums . nums ; 
 if ( var = = nums ) var = var ; 
 if ( var . var < var . var ) 
 var = var ; 
 } 
 printf ( words , var . var , var . var , var . var ) ; 
 return nums ; 
 } 
 struct { 
 int var ; 
 char var [ nums ] ; 
 int var , var , var ; 
 double var , var , var ; 
 } ; 
 int func ( void ) 
 { 
 int var , var ; 
 struct struct_name struct_var ; 
 var . var = var . var = var . var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 printf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var . var ) ; 
 printf ( words ) ; 
 scanf ( words , var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var . var , & var . var , & var . var ) ; 
 var . var + = var . var ; 
 var . var + = var . var ; 
 var . var + = var . var ; 
 } 
 printf ( words , var . var / var , var . var / var , var . var / var ) ; 
 return nums ; 
 } 
 struct { 
 int var , var , var ; 
 } ; 
 int func ( void ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & . var , & . var , & . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 . var + = var ; 
 if ( . var >= nums ) { 
 . var + + ; 
 . var - = nums ; 
 if ( . var >= nums ) { 
 . var + + ; 
 . var - = nums ; 
 if ( . var = = nums ) 
 . var = nums ; 
 } 
 } 
 printf ( words , . var , . var , . var ) ; 
 return nums ; 
 } 
 struct { 
 double var , var ; 
 } ; 
 int func ( void ) 
 { 
 struct struct_name struct_var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var . var , & var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var . var , & var . var ) ; 
 var . var = var . var + var . var ; 
 var . var = var . var + var . var ; 
 printf ( words , var . var , var . var ) ; 
 return nums ; 
 } 
 struct { 
 int var , var ; 
 } ; 
 int func ( void ) 
 { 
 struct struct_name struct_var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var . var , & var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var . var , & var . var ) ; 
 var . var = var . var * var . var - var . var * var . var ; 
 var . var = var . var * var . var + var . var * var . var ; 
 printf ( words , var . var , var . var , var . var , var . var , var . var , var . var ) ; 
 return nums ; 
 } 
 struct { 
 int var , var ; 
 } var , var , var ; 
 struct struct_name struct_var ( struct struct_name struct_var , struct struct_name struct_var ) ; 
 int func ( void ) 
 { 
 printf ( words ) ; 
 scanf ( words , & var . var , & var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var . var , & var . var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var . var , var . var , var . var , var . var , var . var , var . var ) ; 
 return nums ; 
 } 
 struct struct_name struct_var ( struct struct_name struct_var , struct struct_name struct_var ) 
 { 
 var . var = var . var * var . var - var . var * var . var ; 
 var . var = var . var * var . var + var . var * var . var ; 
 return var ; 
 } 
 struct { 
 double var ; 
 char var [ nums ] ; 
 } ; 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 struct struct_name struct_var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words , var + nums ) ; 
 printf ( words ) ; 
 scanf ( words , var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 } 
 var = var = nums ; 
 for ( var = nums ; var < var ; var + + ) { 
 if ( var [ var ] . var < var [ var ] . var ) 
 var = var ; 
 if ( var [ var ] . var > var [ var ] . var ) 
 var = var ; 
 } 
 printf ( words ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 printf ( words ) ; 
 printf ( words , var [ var ] . var , var [ var ] . var ) ; 
 return nums ; 
 } 
 struct { 
 int var ; 
 char var [ nums ] ; 
 int var , var , var ; 
 double var ; 
 } ; 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 struct struct_name struct_var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words , var + nums ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 [ var ] . var = ( [ var ] . var + [ var ] . var + [ var ] . var ) / nums . nums ; 
 } 
 var = var = nums ; 
 for ( var = nums ; var < var ; var + + ) { 
 if ( [ var ] . var < [ var ] . var ) 
 var = var ; 
 if ( [ var ] . var > [ var ] . var ) 
 var = var ; 
 } 
 printf ( words ) ; 
 printf ( words , [ var ] . var , [ var ] . var , [ var ] . var ) ; 
 printf ( words ) ; 
 printf ( words , [ var ] . var , [ var ] . var , [ var ] . var ) ; 
 return nums ; 
 } 
 #define var nums 
 struct { 
 int var ; 
 char var [ nums ] ; 
 int var ; 
 char var ; 
 } ; 
 int call_func ( struct struct_name * var ) ; 
 int func ( void ) 
 { 
 int var , var ; 
 struct struct_name struct_var [ var ] , * var ; 
 var = var ; 
 printf ( words var , var , var var : words 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words , var + nums ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 } 
 var = call_func ( var ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] . var , var [ var ] . var , var [ var ] . var ) ; 
 return nums ; 
 } 
 int func ( struct struct_name * var ) 
 { 
 int var , var = nums ; 
 for ( var = nums ; var < var ; var + + , var + + ) { 
 if ( var - > var >= nums ) 
 var - > var = words ; 
 else if ( var - > var >= nums ) 
 var - > var = words ; 
 else if ( var - > var >= nums ) 
 var - > var = words ; 
 else 
 { 
 var - > var = words ; 
 var + + ; 
 } 
 } 
 return var ; 
 } 
 struct { 
 int var ; 
 char var [ nums ] ; 
 int var , var , var ; 
 double var ; 
 } ; 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 struct struct_name struct_var [ nums ] , var ; 
 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words , var + nums ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 [ var ] . var = ( [ var ] . var + [ var ] . var + [ var ] . var ) / nums . nums ; 
 } 
 
 for ( var = nums ; var < var - nums ; var + + ) { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 if ( [ var ] . var < [ var ] . var ) 
 var = var ; 
 var = [ var ] ; 
 [ var ] = [ var ] ; 
 [ var ] = var ; 
 } 
 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , [ var ] . var , [ var ] . var , [ var ] . var ) ; 
 return nums ; 
 } 
 struct { 
 int var ; 
 char var [ nums ] ; 
 int var , var , var ; 
 double var ; 
 } ; 
 int call_func ( struct struct_name * var , data_type var , data_type var , data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var , var , var , var ; 
 struct struct_name struct_var [ nums ] ; 
 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words , var + nums ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 } 
 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 
 var = call_func ( struct_name , var , var , var , var ) ; 
 
 if ( var = = - nums ) 
 printf ( words ) ; 
 else 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words , [ var ] . var , [ var ] . var , [ var ] . var , [ var ] . var ) ; 
 } 
 return nums ; 
 } 
 int func ( struct struct_name * var , data_type var , data_type var , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + , var + + ) 
 if ( var - > var = = var ) 
 break ; 
 if ( var < var ) 
 { 
 switch ( var ) { 
 case nums : var - > var = var ; break ; 
 case nums : var - > var = var ; break ; 
 case nums : var - > var = var ; break ; 
 } 
 var = var ; 
 } 
 else 
 var = - nums ; 
 return var ; 
 } 
 void call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var ) ; 
 return nums ; 
 } 
 void func ( data_type var ) 
 { 
 if ( var < nums ) 
 printf ( words , var ) ; 
 else { 
 call_func ( var / nums ) ; 
 printf ( words , var % nums ) ; 
 } 
 } 
 double call_func ( data_type var , data_type var , data_type var ) ; 
 double call_func ( data_type struct_name , data_type var , data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 double var , var , var , , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 = call_func ( var , var , var ) ; 
 var = call_func ( struct_name , var , var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type var , data_type var , data_type var ) 
 { 
 return ( ( var + var + var ) / nums . nums ) ; 
 } 
 double func ( data_type struct_name , data_type var , data_type var , data_type var ) 
 { 
 double var ; 
 var = call_func ( struct_name * ( struct_name - var ) * ( struct_name - var ) * ( struct_name - var ) ) ; 
 return var ; 
 } 
 void call_func ( data_type var , data_type var , data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 call_func ( var , words , words , words ) ; 
 return nums ; 
 } 
 void func ( data_type var , data_type var , data_type var , data_type var ) 
 { 
 if ( var = = nums ) 
 printf ( words , var , var ) ; 
 else { 
 call_func ( var - nums , var , var , var ) ; 
 printf ( words , var , var ) ; 
 call_func ( var - nums , var , var , var ) ; 
 } 
 } 
 #define func ( var , var , var ) ( ( var ) + ( var ) + ( var ) ) / nums . nums 
 #define call_func ( struct_name , var , var , var ) call_func ( ( struct_name ) * ( ( struct_name ) - ( var ) ) * ( ( struct_name ) - ( var ) ) * ( ( struct_name ) - ( var ) ) ) 
 data_type call_func ( void ) 
 { 
 double , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 = call_func ( var , var , var ) ; 
 printf ( words , call_func ( struct_name , var , var , var ) ) ; 
 return nums ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var >= nums & & var <= nums ) 
 printf ( words , call_func ( var ) ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var , var , var = nums ; 
 int var , var , var ; 
 for ( var = nums ; var <= var ; var + + ) 
 for ( var = ( call_func ( var ) - nums ) ; var < ( call_func ( var ) + nums ) ; var + + ) 
 if ( var = = var * var ) { 
 var = var % nums ; 
 var = var / nums % nums ; 
 var = var / nums % nums ; 
 if ( var = = var | | var = = var | | var = = var ) 
 var + + ; 
 } 
 return var ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 scanf ( words , & var ) ; 
 if ( call_func ( var ) ) 
 var + + ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 #define var nums 
 #define var nums . nums 
 #define var nums . nums 
 int func ( void ) 
 { 
 float var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 printf ( words , var , var * var ) ; 
 printf ( words , var , var * var ) ; 
 printf ( words , var , var * var ) ; 
 return nums ; 
 } 
 #define var nums 
 #define var nums . nums 
 #define var nums . nums 
 int func ( data_type var ) 
 { 
 int var ; 
 if ( var = = nums ) return nums ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var % var = = nums ) return nums ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 float var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 printf ( words , var , var * var ) ; 
 printf ( words , var , var * var ) ; 
 printf ( words , var , var * var ) ; 
 return nums ; 
 } 
 #define var nums . nums 
 void call_func ( data_type var ) ; 
 double call_func ( void ) ; 
 double call_func ( void ) ; 
 double call_func ( void ) ; 
 int func ( void ) 
 { 
 int var ; 
 while ( nums ) { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < nums | | var > nums ) 
 break ; 
 else 
 call_func ( var ) ; 
 } 
 return nums ; 
 } 
 void func ( data_type var ) 
 { 
 switch ( var ) { 
 case nums : 
 printf ( words , call_func ( ) ) ; 
 break ; 
 case nums : 
 printf ( words , call_func ( ) ) ; 
 break ; 
 case nums : 
 printf ( words , call_func ( ) ) ; 
 break ; 
 } 
 } 
 double func ( void ) 
 { 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 return ( nums . nums / nums . nums * var * var * var * var ) ; 
 } 
 double func ( void ) 
 { 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 return ( var * var * var * var ) ; 
 } 
 double func ( void ) 
 { 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 return ( var / nums . nums * var * var * var ) ; 
 } 
 int call_func ( data_type var , data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 printf ( words , call_func ( var , var , var ) ) ; 
 } 
 int func ( data_type var , data_type var , data_type var ) 
 { 
 int var ; 
 if ( var > var ) 
 if ( var > var ) 
 var = var ; 
 else 
 var = var ; 
 else 
 if ( var > var ) 
 var = var ; 
 else 
 var = var ; 
 return var ; 
 } 
 #define func ( var , var , var ) var > call_func ( var > var : var ) : ( var > var : var ) 
 data_type call_func ( void ) 
 { 
 int var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 var = call_func ( var , var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , call_func ( var ) ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var ; 
 if ( var = = nums ) 
 var = nums ; 
 else 
 var = var + call_func ( var - nums ) ; 
 return var ; 
 } 
 int call_func ( data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , call_func ( var , var ) ) ; 
 return nums ; 
 } 
 int func ( data_type var , data_type var ) 
 { 
 int var ; 
 if ( var = = nums ) 
 var = var + nums ; 
 else if ( var = = nums & & var > nums ) 
 var = call_func ( var - nums , nums ) ; 
 else if ( var > nums & & var > nums ) 
 var = call_func ( var - nums , call_func ( var , var - nums ) ) ; 
 return var ; 
 } 
 void call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 void func ( data_type var ) 
 { 
 if ( var <= nums ) 
 printf ( words , var ) ; 
 else 
 { 
 printf ( words , var % nums ) ; 
 call_func ( var / nums ) ; 
 } 
 } 
 double call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 var + = call_func ( var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type var ) 
 { 
 double var ; 
 if ( var = = nums ) 
 var = nums ; 
 else 
 var = var * call_func ( var - nums ) ; 
 return var ; 
 } 
 double call_func ( data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , var , var , call_func ( var , var ) ) ; 
 return nums ; 
 } 
 double func ( data_type var , data_type var ) 
 { 
 double var ; 
 if ( var = = nums ) 
 var = var ; 
 else 
 var = call_func ( - nums , var - nums ) * call_func ( var , var ) + call_func ( var , var - nums ) ; 
 return var ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var , call_func ( var ) ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 if ( var = = nums ) 
 return nums ; 
 else if ( var = = nums ) 
 return nums ; 
 else 
 return call_func ( var - nums ) + call_func ( var - nums ) ; 
 } 
 double call_func ( data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , var , var , call_func ( var , var ) ) ; 
 return nums ; 
 } 
 double func ( data_type var , data_type var ) 
 { 
 double var ; 
 if ( var = = nums ) 
 var = nums ; 
 else if ( var = = nums ) 
 var = var ; 
 else 
 var = var * call_func ( var , var - nums ) ; 
 return var ; 
 } 
 double call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var , call_func ( var ) ) ; 
 return nums ; 
 } 
 double func ( data_type var ) 
 { 
 double var ; 
 if ( var = = nums | | var = = nums ) 
 var = nums ; 
 else 
 var = var * call_func ( var - nums ) ; 
 return var ; 
 } 
 void call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var ) ; 
 return nums ; 
 } 
 void func ( data_type var ) 
 { 
 int var ; 
 var = var % nums ; 
 if ( var < nums ) 
 printf ( words , var ) ; 
 else 
 { 
 var = var / nums ; 
 call_func ( var ) ; 
 printf ( words , var ) ; 
 } 
 } 
 void call_func ( data_type * var [ ] , data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 char * var [ ] = { words , words , words , words , words } ; 
 call_func ( var , nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 void func ( data_type * var [ ] , data_type var ) 
 { 
 int var , var ; 
 char * var ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var - var ; var + + ) 
 if ( strcmp ( var [ var ] , var [ var + nums ] ) > nums ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var + nums ] ; 
 var [ var + nums ] = var ; 
 } 
 } 
 char * call_func ( data_type struct_name [ ] [ nums ] ) ; 
 int func ( void ) 
 { 
 int var ; 
 char * var [ nums ] = { words , words , words , words } ; 
 char var [ nums ] ; 
 for ( var = nums ; var < nums ; var + + ) { 
 var [ var * nums ] = * ( var [ var ] ) ; 
 var [ var * nums + nums ] = * ( var [ var ] + nums ) ; 
 } 
 var [ var * nums ] = words ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 #define var nums 
 struct { 
 int var ; 
 struct struct_name * struct_var ; 
 } ; 
 struct struct_name * struct_var ( ) ; 
 struct struct_name * struct_var ( struct struct_name * * struct_var ) ; 
 void func ( struct struct_name * var ) 
 { 
 struct struct_name * struct_var = var ; 
 while ( var ) { 
 printf ( words , var - > var ) ; 
 var = var - > var ; 
 } 
 printf ( words ) ; 
 } 
 int func ( ) 
 { 
 struct struct_name * struct_var , * var ; 
 var = call_func ( ) ; 
 var = call_func ( & var ) ; 
 call_func ( var ) ; 
 call_func ( var ) ; 
 return nums ; 
 } 
 struct struct_name * struct_var ( ) { 
 int var = nums , var , var , var [ var ] ; 
 struct struct_name * struct_var , * var , * var ; 
 scanf ( words , & var ) ; 
 while ( var ! = - nums ) { 
 var [ var ] = var ; 
 var + + ; 
 scanf ( words , & var ) ; 
 } 
 var = var ; 
 var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 var - > var = var [ nums ] ; 
 var - > var = NULL ; 
 var = var = var ; 
 var = nums ; 
 while ( var < var ) { 
 var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 var - > var = var [ var ] ; 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 var + + ; 
 } 
 var - > var = NULL ; 
 return var ; 
 } 
 struct struct_name * struct_var ( struct struct_name * * struct_var ) { 
 struct struct_name * struct_var , * var , * var , * var ; 
 int var [ var ] , var = nums , var ; 
 var = * var ; 
 
 while ( var - > var % nums = = nums ) { 
 var [ var + + ] = var - > var ; 
 var = var - > var ; 
 free ( var ) ; 
 var = var ; 
 } 
 var = var ; 
 var = var - > var ; 
 while ( var ) { 
 if ( var - > var % nums = = nums ) { 
 var [ var + + ] = var - > var ; 
 var - > var = var - > var ; 
 free ( var ) ; 
 var = var - > var ; 
 continue ; 
 } 
 var = var ; 
 var = var - > var ; 
 } 
 * var = var ; 
 var = var ; 
 
 
 var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 var - > var = var [ nums ] ; 
 var - > var = NULL ; 
 var = var = var ; 
 var = nums ; 
 while ( var < var ) { 
 var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 var - > var = var [ var ] ; 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 var + + ; 
 } 
 var - > var = NULL ; 
 return var ; 
 } 
 struct { 
 int var ; 
 struct struct_name * struct_var ; 
 } ; 
 struct struct_name * struct_var ( ) ; 
 struct struct_name * struct_var ( struct struct_name * struct_var ) ; 
 void call_func ( struct struct_name * var ) ; 
 int func ( void ) 
 { 
 struct struct_name * struct_var , * var ; 
 var = call_func ( ) ; 
 var = call_func ( var ) ; 
 call_func ( var ) ; 
 return nums ; 
 } 
 struct struct_name * struct_var ( ) 
 { 
 struct struct_name * struct_var , * var , * var ; 
 int var ; 
 int var = sizeof ( struct ) ; 
 var = var = NULL ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( var ! = - nums ) { 
 var = ( struct ) malloc ( var ) ; 
 var - > var = var ; 
 var - > var = NULL ; 
 if ( var = = NULL ) 
 var = var ; 
 else 
 var - > var = var ; 
 var = var ; 
 scanf ( words , & var ) ; 
 } 
 return var ; 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var ) 
 { 
 struct struct_name * struct_var , * var ; 
 while ( var ! = NULL & & ( var - > var % nums = = nums ) ) { 
 var = var ; 
 var = var - > var ; 
 free ( var ) ; 
 } 
 if ( var = = NULL ) 
 return NULL ; 
 var = var ; 
 var = var - > var ; 
 while ( var ! = NULL ) { 
 if ( var - > var % nums = = nums ) { 
 var - > var = var - > var ; 
 free ( var ) ; 
 } 
 else 
 var = var ; 
 var = var - > var ; 
 } 
 return var ; 
 } 
 void func ( struct struct_name * var ) 
 { 
 struct struct_name * struct_var ; 
 if ( var = = NULL ) { 
 printf ( words ) ; 
 return ; 
 } 
 for ( var = var ; var ! = NULL ; var = var - > var ) 
 printf ( words , var - > var ) ; 
 printf ( words ) ; 
 
 } 
 #define var nums 
 struct { 
 int var ; 
 struct struct_name * struct_var ; 
 } ; 
 struct struct_name * struct_var ( ) ; 
 struct struct_name * struct_var ( struct struct_name * struct_var , int var ) ; 
 void func ( struct struct_name * var ) 
 { 
 struct struct_name * struct_var = var ; 
 while ( var ) { 
 printf ( words , var - > var ) ; 
 var = var - > var ; 
 } 
 printf ( words ) ; 
 } 
 int func ( ) 
 { 
 int var ; 
 struct struct_name * struct_var = call_func ( ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var , var ) ; 
 call_func ( var ) ; 
 return nums ; 
 } 
 struct struct_name * struct_var ( ) { 
 int var = nums , var , var , var [ var ] ; 
 struct struct_name * struct_var , * var , * var ; 
 scanf ( words , & var ) ; 
 while ( var ! = - nums ) { 
 var [ var ] = var ; 
 var + + ; 
 scanf ( words , & var ) ; 
 } 
 var = var ; 
 var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 var - > var = var [ nums ] ; 
 var - > var = NULL ; 
 var = var = var ; 
 var = nums ; 
 while ( var < var ) { 
 var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 var - > var = var [ var ] ; 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 var + + ; 
 } 
 var - > var = NULL ; 
 return var ; 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var , int var ) { 
 struct struct_name * struct_var , * var , * var ; 
 var = var ; 
 
 while ( var - > var = = var ) { 
 var = var - > var ; 
 free ( var ) ; 
 var = var ; 
 } 
 var = var ; 
 var = var - > var ; 
 while ( var ) { 
 if ( var - > var = = var ) { 
 var - > var = var - > var ; 
 free ( var ) ; 
 var = var - > var ; 
 continue ; 
 } 
 var = var ; 
 var = var - > var ; 
 } 
 return var ; 
 } 
 struct { 
 int var ; 
 struct struct_name * struct_var ; 
 } ; 
 struct struct_name * struct_var ( ) ; 
 struct struct_name * struct_var ( struct struct_name * struct_var , int var ) ; 
 void call_func ( struct struct_name * var ) ; 
 int func ( void ) 
 { 
 int var ; 
 struct struct_name * struct_var , * var ; 
 var = call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var , var ) ; 
 call_func ( var ) ; 
 return nums ; 
 } 
 struct struct_name * struct_var ( ) 
 { 
 struct struct_name * struct_var , * var , * var ; 
 int var ; 
 int var = sizeof ( struct ) ; 
 var = var = NULL ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( var ! = - nums ) { 
 var = ( struct ) malloc ( var ) ; 
 var - > var = var ; 
 var - > var = NULL ; 
 if ( var = = NULL ) 
 var = var ; 
 else 
 var - > var = var ; 
 var = var ; 
 scanf ( words , & var ) ; 
 } 
 return var ; 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var , int var ) 
 { 
 struct struct_name * struct_var , * var ; 
 while ( var ! = NULL & & var - > var = = var ) { 
 var = var ; 
 var = var - > var ; 
 free ( var ) ; 
 } 
 if ( var = = NULL ) 
 return NULL ; 
 var = var ; 
 var = var - > var ; 
 while ( var ! = NULL ) { 
 if ( var - > var = = var ) { 
 var - > var = var - > var ; 
 free ( var ) ; 
 } 
 else 
 var = var ; 
 var = var - > var ; 
 } 
 return var ; 
 } 
 void func ( struct struct_name * var ) 
 { 
 struct struct_name * struct_var ; 
 if ( var = = NULL ) { 
 printf ( words ) ; 
 return ; 
 } 
 for ( var = var ; var ! = NULL ; var = var - > var ) 
 printf ( words , var - > var ) ; 
 printf ( words ) ; 
 
 } 
 int func ( void ) 
 { 
 int var ; 
 char * var [ ] = { words , words , words , words , words , words , 
 words , words , words , words , words , words } ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var >= nums & & var <= nums ) 
 printf ( words , var [ var - nums ] ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var = nums ; 
 char * var [ nums ] , var [ nums ] , * var ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 while ( var [ nums ] ! = words ) { 
 var [ var ] = ( char * ) malloc ( sizeof ( char ) * ( call_func ( var ) + nums ) ) ; 
 call_func ( var [ var ] , var ) ; 
 var + + ; 
 scanf ( words , var ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var - var ; var + + ) 
 if ( func ( var [ var ] ) > call_func ( var [ var + nums ] ) ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var + nums ] ; 
 var [ var + nums ] = var ; 
 } 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words , var [ var ] ) ; 
 free ( var [ var ] ) ; 
 } 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var = nums ; 
 char * var [ nums ] , var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 while ( var [ nums ] ! = words ) { 
 var [ var ] = ( char * ) malloc ( sizeof ( char ) * ( call_func ( var ) + nums ) ) ; 
 call_func ( var [ var ] , var ) ; 
 var + + ; 
 scanf ( words , var ) ; 
 } 
 printf ( words ) ; 
 for ( var = var - nums ; var >= nums ; var - - ) { 
 printf ( words , var [ var ] ) ; 
 free ( var [ var ] ) ; 
 } 
 return nums ; 
 } 
 struct { 
 int var ; 
 char var [ nums ] ; 
 int var ; 
 struct struct_name * struct_var ; 
 } ; 
 struct struct_name * struct_var ( ) ; 
 struct struct_name * struct_var ( struct struct_name * struct_var , struct struct_name * struct_var ) ; 
 struct struct_name * struct_var ( struct struct_name * struct_var , int var ) ; 
 void call_func ( struct struct_name * var ) ; 
 int func ( void ) 
 { 
 struct struct_name * struct_var , * var ; 
 int var , var , var ; 
 char var [ nums ] ; 
 int var = sizeof ( struct ) ; 
 do { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 switch ( var ) { 
 case nums : 
 var = call_func ( ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 scanf ( words , & var , var , & var ) ; 
 var = ( struct ) malloc ( var ) ; 
 var - > var = var ; 
 call_func ( var - > var , var ) ; 
 var - > var = var ; 
 var = call_func ( var , var ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var , var ) ; 
 break ; 
 case nums : 
 call_func ( var ) ; 
 break ; 
 case nums : 
 break ; 
 } 
 } while ( var ! = nums ) ; 
 return nums ; 
 } 
 struct struct_name * struct_var ( ) 
 { 
 struct struct_name * struct_var , * var ; 
 int var , var ; 
 char var [ nums ] ; 
 int var = sizeof ( struct ) ; 
 var = NULL ; 
 printf ( words ) ; 
 scanf ( words , & var , var , & var ) ; 
 while ( var ! = nums ) { 
 var = ( struct ) malloc ( var ) ; 
 var - > var = var ; 
 call_func ( var - > var , var ) ; 
 var - > var = var ; 
 var = call_func ( var , var ) ; 
 scanf ( words , & var , var , & var ) ; 
 } 
 return var ; 
 } ; 
 struct struct_name * struct_var ( struct struct_name * struct_var , struct struct_name * struct_var ) 
 { 
 struct struct_name * struct_var , * var , * var ; 
 var = var ; 
 var = var ; 
 if ( var = = NULL ) { 
 var = var ; 
 var - > var = NULL ; 
 } 
 else { 
 while ( ( var - > var > var - > var ) & & ( var - > var ! = NULL ) ) { 
 var = var ; 
 var = var - > var ; 
 } 
 if ( var - > var <= var - > var ) { 
 if ( var = = var ) var = var ; 
 else var - > var = var ; 
 var - > var = var ; 
 } 
 else { 
 var - > var = var ; 
 var - > var = NULL ; 
 } 
 } 
 return var ; 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var , int var ) 
 { 
 struct struct_name * struct_var , * var ; 
 
 while ( var ! = NULL & & var - > var = = var ) { 
 var = var ; 
 var = var - > var ; 
 free ( var ) ; 
 } 
 if ( var = = NULL ) 
 return NULL ; 
 
 var = var ; 
 var = var - > var ; 
 while ( var ! = NULL ) { 
 if ( var - > var = = var ) { 
 var - > var = var - > var ; 
 free ( var ) ; 
 } 
 else 
 var = var ; 
 var = var - > var ; 
 } 
 return var ; 
 } 
 void func ( struct struct_name * var ) 
 { 
 struct struct_name * struct_var ; 
 if ( var = = NULL ) { 
 printf ( words ) ; 
 return ; 
 } 
 printf ( words var var : words 
 printf ( words ) ; 
 for ( var = var ; var ! = NULL ; var = var - > var ) 
 printf ( words , var - > var , var - > var , var - > var ) ; 
 } 
 char * func ( data_type * struct_name , data_type * var ) 
 { 
 int var = call_func ( var ) , var = call_func ( struct_name ) , var , var , var ; 
 char * var = NULL ; 
 for ( var = nums ; var <= ( var - var ) ; var + + ) 
 { 
 var = + var ; 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( * var ! = * ( var + var ) ) 
 { 
 var = nums ; 
 break ; 
 } 
 var + + ; 
 } 
 if ( var = = nums ) 
 break ; 
 } 
 if ( var = = nums ) 
 return NULL ; 
 else 
 return + var ; 
 } 
 int func ( ) 
 { 
 char * , * var , * var , var ; 
 int var , var ; 
 while ( nums ) 
 { 
 printf ( words ) ; 
 = ( char * ) malloc ( sizeof ( char ) ) ; 
 var = nums ; 
 while ( ( var = func ( ) ) ! = words ) 
 { 
 [ var ] = var ; 
 var + + ; 
 = ( char * ) call_func ( struct_name , ( var + nums ) * sizeof ( data_type ) ) ; 
 } 
 [ var ] = words ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 break ; 
 } 
 while ( nums ) 
 { 
 var = ( char * ) malloc ( ( var + nums ) * sizeof ( char ) ) ; 
 printf ( words ) ; 
 var = nums ; 
 while ( ( var = func ( ) ) ! = words ) 
 { 
 var [ var ] = var ; 
 var + + ; 
 } 
 var [ var ] = words ; 
 if ( var > var ) 
 { 
 printf ( words ) ; 
 var = ( char * ) call_func ( var , var * sizeof ( data_type ) ) ; 
 free ( var ) ; 
 } 
 else 
 break ; 
 } 
 if ( ( var = func ( struct_name , var ) ) ! = NULL ) 
 { 
 printf ( words , var - + nums ) ; 
 printf ( words , var ) ; 
 } 
 else 
 printf ( words ) ; 
 free ( ) ; 
 free ( var ) ; 
 } 
 return nums ; 
 } 
 
 int func ( void ) 
 { 
 int var ; 
 char * var [ nums ] = { words , words , words , words , words } ; 
 char * * var ; 
 char var [ nums ] ; 
 var = var ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 if ( strcmp ( var , * ( var + var ) ) = = nums ) 
 break ; 
 if ( var < nums ) 
 printf ( words , var + nums ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 char * call_func ( data_type * struct_name , data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 char var [ nums ] , var , var ; 
 char * var ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 call_func ( ) ; 
 var = call_func ( ) ; 
 call_func ( ) ; 
 var = call_func ( ) ; 
 var = call_func ( var , var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 char * func ( data_type * struct_name , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var ! = [ var ] ; var + + ) ; 
 for ( var = nums ; var ! = [ var ] ; var + + , var + + ) 
 [ var ] = [ var ] ; 
 [ var ] = [ var ] ; 
 [ var + nums ] = words ; 
 return ; 
 } 
 #define var nums 
 char * call_func ( data_type * struct_name , data_type var , data_type var ) ; 
 int func ( ) 
 { 
 char var [ var ] , var , var , * var ; 
 scanf ( words , var ) ; 
 scanf ( words , & var , & var ) ; 
 var = call_func ( var , var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 char * func ( data_type * struct_name , data_type var , data_type var ) 
 { 
 int var = nums , var = nums , var = nums , var = nums ; 
 char * var = NULL ; 
 var = call_func ( struct_name ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 if ( [ var ] = = var ) { 
 var = & [ var ] ; 
 for ( var = var ; var < var ; var + + ) { 
 if ( [ var ] ! = var ) { 
 printf ( words , [ var ] ) ; 
 } 
 if ( [ var ] = = var ) { 
 printf ( words , [ var ] ) ; 
 return var ; 
 } 
 } 
 printf ( words ) ; 
 return var ; 
 } 
 } 
 printf ( words ) ; 
 return var ; 
 } 
 int func ( void ) 
 { 
 int var ; 
 char * var [ nums ] = { words , words , words , words , words } ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 if ( strcmp ( var , var [ var ] ) = = nums ) 
 break ; 
 if ( var < nums ) 
 printf ( words , var + nums ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 char * call_func ( data_type * struct_name , data_type * var ) ; 
 int func ( void ) 
 { 
 char var [ nums ] , var [ nums ] ; 
 char * var ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 call_func ( ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 char * func ( data_type * struct_name , data_type * var ) 
 { 
 int var , var = nums ; 
 for ( var = nums ; [ var ] ! = words ; var + + ) ; 
 for ( var = nums ; var [ var ] ! = words ; var + + , var + + ) 
 [ var ] = var [ var ] ; 
 [ var ] = words ; 
 return ; 
 } 
 char * call_func ( data_type * struct_name , data_type var ) ; 
 int func ( void ) 
 { 
 char var , var [ nums ] , * var = NULL ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 call_func ( ) ; 
 var = call_func ( ) ; 
 if ( ( var = call_func ( var , var ) ) ! = NULL ) 
 printf ( words , var ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 char * func ( data_type * struct_name , data_type var ) 
 { 
 while ( * ! = words ) 
 if ( * = = var ) 
 return ; 
 else 
 + + ; 
 return ( NULL ) ; 
 } 
 void call_func ( data_type * var [ ] , data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 char * var [ ] = { words , words , words , words , words } ; 
 call_func ( var , nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 void func ( data_type * var [ ] , data_type var ) 
 { 
 int var , var ; 
 char * var ; 
 char * * var ; 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var - var ; var + + ) 
 if ( strcmp ( * ( var + var ) , * ( var + var + nums ) ) > nums ) { 
 var = * ( var + var ) ; 
 * ( var + var ) = * ( var + var + nums ) ; 
 * ( var + var + nums ) = var ; 
 } 
 } 
 double call_func ( data_type ( * var ) ( data_type ) , data_type var , data_type var ) ; 
 double call_func ( data_type var ) , call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 double var ; 
 double ( * var ) ( double ) ; 
 var = call_func ( var , nums . nums , nums . nums ) ; 
 printf ( words , var ) ; 
 var = var ; 
 var = call_func ( var , nums . nums , nums . nums ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type ( * var ) ( data_type ) , data_type var , data_type var ) 
 { 
 double var ; 
 var = ( var - var ) / nums * ( ( * var ) ( var ) + ( * var ) ( var ) ) ; 
 return ( var ) ; 
 } 
 double func ( data_type var ) 
 { 
 return ( var * var ) ; 
 } 
 double func ( data_type var ) 
 { 
 return ( call_func ( var ) / var ) ; 
 } 
 char * call_func ( data_type * struct_name ) ; 
 int func ( void ) 
 { 
 char var [ nums ] , * var = NULL ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 char * func ( data_type * struct_name ) 
 { 
 while ( * ! = words ) 
 + + ; 
 return ( - nums ) ; 
 } 
 int func ( data_type var , data_type * var [ ] ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var ; 
 char * var [ ] = { words , words , words , words , words , words , words } ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 if ( strcmp ( var [ var ] , var ) = = nums ) { 
 printf ( words , var ) ; 
 break ; 
 } 
 if ( var >= nums ) 
 printf ( words ) ; 
 return nums ; 
 } 
 char * call_func ( data_type * struct_name , data_type * var ) ; 
 int func ( void ) 
 { 
 char [ nums ] , var [ nums ] ; 
 char * var ; 
 printf ( words ) ; 
 scanf ( words , ) ; 
 call_func ( ) ; 
 scanf ( words , var ) ; 
 var = call_func ( struct_name , var ) ; 
 if ( var ! = NULL ) { 
 printf ( words , var - + nums ) ; 
 printf ( words , var ) ; 
 } 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 char * func ( data_type * struct_name , data_type * var ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var <= ( call_func ( struct_name ) - call_func ( var ) ) ; var + + ) { 
 var = nums ; 
 for ( var = nums ; var < call_func ( var ) ; var + + ) { 
 if ( * ( + var ) ! = * ( var + var ) ) { 
 var = nums ; 
 break ; 
 } 
 var + + ; 
 } 
 if ( var = = nums ) 
 break ; 
 } 
 if ( var = = nums ) 
 return NULL ; 
 else 
 return + var - call_func ( var ) ; 
 } 
 #define var nums 
 char * call_func ( data_type * struct_name , data_type * var ) ; 
 int func ( ) 
 { 
 char [ var ] , var [ var ] , * var ; 
 gets ( ) ; 
 gets ( var ) ; 
 var = call_func ( struct_name , var ) ; 
 if ( var ! = NULL ) 
 printf ( words , var - + nums ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 char * func ( data_type * struct_name , data_type * var ) { 
 int var , var , var = nums , var , var ; 
 char * var = NULL ; 
 var = call_func ( struct_name ) ; 
 var = call_func ( var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 var = var ; 
 while ( [ var ] = = var [ var ] ) { 
 var + + ; 
 var + + ; 
 } 
 if ( var >= var ) { 
 var = & [ var ] ; 
 return var ; 
 } 
 var = nums ; 
 } 
 return var ; 
 } 
 int call_func ( data_type * struct_name [ ] , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var , var = nums ; 
 char * var [ nums ] , var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 while ( var [ nums ] ! = words ) { 
 var [ var ] = ( char * ) malloc ( sizeof ( char ) * ( call_func ( var ) + nums ) ) ; 
 call_func ( var [ var ] , var ) ; 
 var + + ; 
 scanf ( words , var ) ; 
 } 
 var = call_func ( var , var - nums ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 free ( var [ var ] ) ; 
 return nums ; 
 } 
 int func ( data_type * struct_name [ ] , data_type var ) 
 { 
 int var , var ; 
 var = call_func ( struct_name [ nums ] ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 if ( var < call_func ( struct_name [ var ] ) ) 
 var = call_func ( struct_name [ var ] ) ; 
 return var ; 
 } 
 struct { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 } ; 
 void call_func ( data_type * var ) ; 
 int func ( void ) 
 { 
 FILE * var ; 
 int var ; 
 struct struct_name struct_var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = nums ; var <= nums ; var + + ) { 
 printf ( words , var ) ; 
 scanf ( words , var . var , var . var ) ; 
 call_func ( var . var ) ; 
 call_func ( var , words , var . var , var . var ) ; 
 } 
 if ( fclose ( var ) ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 return nums ; 
 } 
 void func ( data_type * var ) 
 { 
 int var ; 
 for ( var = nums ; var < call_func ( var ) ; var + + ) 
 var [ var ] = var [ var ] var ; 
 } 
 int func ( void ) 
 { 
 FILE * var ; 
 var var ; 
 char var [ nums ] ; 
 int var , var ; 
 int var = nums ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 call_func ( var , words , & var , var , & var ) ; 
 var + = var ; 
 printf ( words , var , var , var ) ; 
 } 
 printf ( words , var / nums ) ; 
 if ( fclose ( var ) ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 return nums ; 
 } 
 int func ( void ) 
 { 
 FILE * var , * var ; 
 char var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 if ( ( var = fopen ( words , words ) ) = = NULL ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 while ( ! feof ( var ) ) { 
 var = call_func ( var ) ; 
 if ( var ! = var ) call_func ( var , var ) ; 
 } 
 if ( fclose ( var ) ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 if ( fclose ( var ) ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 return nums ; 
 } 
 struct { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 } ; 
 void call_func ( data_type * var ) ; 
 int call_func ( struct struct_name * var ) ; 
 int func ( void ) 
 { 
 struct struct_name struct_var ; 
 printf ( words ) ; 
 scanf ( words , var . var ) ; 
 printf ( words ) ; 
 scanf ( words , var . var ) ; 
 if ( call_func ( & var ) = = nums ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 void func ( data_type * var ) 
 { 
 int var ; 
 for ( var = nums ; var < call_func ( var ) ; var + + ) 
 var [ var ] = var [ var ] var ; 
 } 
 int func ( struct struct_name * var ) 
 { 
 FILE * var ; 
 char var [ nums ] , var [ nums ] , var [ nums ] ; 
 int var = nums ; 
 call_func ( var , var - > var ) ; 
 call_func ( var , var - > var ) ; 
 call_func ( var ) ; 
 call_func ( var , words ) ; 
 call_func ( var , var ) ; 
 call_func ( var , words ) ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 while ( ! feof ( var ) ) { 
 call_func ( var , nums , var ) ; 
 if ( strcmp ( var , var ) = = nums ) { 
 var = nums ; 
 break ; 
 } 
 } 
 if ( fclose ( var ) ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 return var ; 
 } 
 int func ( ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var % nums = = nums ) { 
 printf ( words ) ; 
 } 
 else { 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 printf ( words , var ) ; 
 scanf ( words , & var ) ; 
 var = var + var ; 
 if ( var < nums ) { 
 var + + ; 
 } 
 } 
 printf ( words , var / var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < nums ) { 
 var = nums ; 
 } 
 else if ( var <= nums ) { 
 var = nums * var / nums ; 
 } 
 else { 
 var = nums . nums * var - nums . nums ; 
 } 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 double var , var ; 
 char var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 if ( var = = words ) 
 printf ( words , var + var ) ; 
 else if ( var = = words ) 
 printf ( words , var - var ) ; 
 else if ( var = = words ) 
 printf ( words , var * var ) ; 
 else if ( var = = words ) 
 printf ( words , var / var ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 char var ; 
 int var ; 
 var = var = var = nums ; 
 printf ( words ) ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 var = call_func ( ) ; 
 if ( ( var >= words & & var <= words ) | | ( var >= words & & var <= words ) ) 
 var + + ; 
 else if ( var >= words & & var <= words ) 
 var + + ; 
 else 
 var + + ; 
 } 
 printf ( words , var , var , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 break ; 
 switch ( var ) { 
 case nums : var = nums . nums ; 
 break ; 
 case nums : var = nums . nums ; 
 break ; 
 case nums : var = nums . nums ; 
 break ; 
 case nums : var = nums . nums ; 
 break ; 
 default : var = nums . nums ; 
 break ; 
 } 
 printf ( words , var ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 double var , var ; 
 char var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 switch ( var ) { 
 words : 
 printf ( words , var + var ) ; 
 break ; 
 words : 
 printf ( words , var - var ) ; 
 break ; 
 words : 
 printf ( words , var * var ) ; 
 break ; 
 words : 
 printf ( words , var / var ) ; 
 break ; 
 default : 
 printf ( words ) ; 
 break ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var , var ; 
 char var ; 
 var = var = var = nums ; 
 printf ( words ) ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 var = call_func ( ) ; 
 switch ( var ) { 
 case words : 
 case words : 
 var + + ; 
 break ; 
 case words : case words : case words : case words : case words : 
 case words : case words : case words : case words : case words : 
 var + + ; 
 break ; 
 default : 
 var + + ; 
 break ; 
 } 
 } 
 printf ( words , var , var , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 double , var ; 
 var = nums ; 
 var = nums ; 
 = nums . nums ; 
 var = nums ; 
 while ( func ( struct_name ) >= nums . nums ) { 
 = var * nums . nums / var ; 
 var = var + ; 
 var = - var ; 
 var = var + nums ; 
 } 
 var = var * nums ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 double var , var ; 
 var = nums ; 
 var = nums ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( var >= nums ) { 
 var = var + var ; 
 var + + ; 
 if ( var < nums ) 
 var + + ; 
 scanf ( words , & var ) ; 
 } 
 if ( var ! = nums ) { 
 printf ( words , var / var ) ; 
 printf ( words , var ) ; 
 } 
 else { 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < nums ) 
 var = - var ; 
 do { 
 var = var / nums ; 
 var + + ; 
 } while ( var ! = nums ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var / nums ; var + + ) { 
 if ( var % var = = nums ) 
 break ; 
 } 
 if ( var > var / nums & & var ! = nums ) { 
 printf ( words , var ) ; 
 } 
 else { 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var = nums , var , var , var ; 
 call_func ( struct_name ( nums ) ) ; 
 var = call_func ( ) % nums + nums ; 
 var = nums ; 
 while ( var < nums ) { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var + + ; 
 if ( var = = var ) { 
 printf ( words ) ; 
 var = nums ; 
 break ; 
 } 
 else { 
 if ( var > var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 } 
 } 
 if ( var = = nums ) 
 printf ( words ) ; 
 return nums ; 
 } 
 double call_func ( data_type var ) ; 
 int func ( ) 
 { 
 int var ; 
 double var ; 
 var = nums ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 var = var + call_func ( var ) ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type var ) 
 { 
 int var ; 
 double var ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = var * var ; 
 } 
 return var ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 double , var ; 
 var = nums ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 = var ; 
 } 
 var = var + ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) { 
 scanf ( words , & var ) ; 
 if ( var < var ) 
 var = var ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var ; 
 while ( var >= nums ) { 
 if ( var < var ) 
 var = var ; 
 scanf ( words , & var ) ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( var ! = nums ) { 
 printf ( words , var % nums ) ; 
 var = var / nums ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var , var ; 
 var = nums ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 var = call_func ( var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 if ( var % var = = nums ) 
 break ; 
 if ( var > var ) { 
 printf ( words , var ) ; 
 var + + ; 
 if ( var % nums = = nums ) 
 printf ( words ) ; 
 } 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 var = nums ; 
 var = nums ; 
 printf ( words , var , var ) ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 var = var + var ; 
 printf ( words , var ) ; 
 var = var ; 
 var = var ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 for ( var = nums ; var <= nums ; var + + ) { 
 for ( var = nums ; var <= nums ; var + + ) { 
 if ( var + var + var = = nums & & var * nums + var * nums + var * nums . nums = = nums ) 
 printf ( words , var , var , var ) ; 
 } 
 } 
 } 
 return nums ; 
 } 
 double call_func ( data_type var , data_type var ) ; 
 int func ( ) 
 { 
 double var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type var , data_type var ) 
 { 
 double var ; 
 var = nums . nums * var * var * var ; 
 return var ; 
 } 
 double call_func ( data_type var ) ; 
 int func ( ) 
 { 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type var ) 
 { 
 int var , var ; 
 double , var ; 
 var = nums ; 
 var = nums ; 
 = nums . nums ; 
 var = nums ; 
 while ( func ( struct_name ) >= var ) { 
 = var * nums . nums / var ; 
 var = var + ; 
 var = - var ; 
 var + = nums ; 
 } 
 return var * nums ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( ) 
 { 
 int var , var ; 
 var = nums ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 if ( func ( var ) ! = nums ) { 
 printf ( words , var ) ; 
 var + + ; 
 if ( var % nums = = nums ) 
 printf ( words ) ; 
 } 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var , var ; 
 if ( var = = nums ) 
 return nums ; 
 var = call_func ( var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 if ( var % var = = nums ) { 
 return nums ; 
 } 
 } 
 return nums ; 
 } 
 void call_func ( data_type var ) ; 
 int func ( ) 
 { 
 call_func ( nums ) ; 
 return nums ; 
 } 
 void func ( data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var <= var ; var + + ) { 
 for ( var = nums ; var <= var - var ; var + + ) { 
 printf ( words ) ; 
 } 
 for ( var = nums ; var <= var ; var + + ) { 
 printf ( words , var ) ; 
 } 
 call_func ( words ) ; 
 } 
 } 
 void call_func ( data_type var , data_type var , data_type var , data_type var ) ; 
 void call_func ( data_type var , data_type var , data_type var , data_type var ) ; 
 float var , var ; 
 int func ( ) 
 { 
 float var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 call_func ( var , var , var , var ) ; 
 printf ( words , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 void func ( data_type var , data_type var , data_type var , data_type var ) 
 { 
 var = var + var ; 
 var = var + var ; 
 } 
 void func ( data_type var , data_type var , data_type var , data_type var ) 
 { 
 var = var * var - var * var ; 
 var = var * var + var * var ; 
 } 
 int var ; 
 int call_func ( ) ; 
 int func ( ) 
 { 
 int var = nums ; 
 var = var ; 
 var = call_func ( ) ; 
 { 
 int var = nums ; 
 var = var + var ; 
 var = var + var ; 
 } 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var = nums ; 
 return var ; 
 } 
 void call_func ( data_type var ) ; 
 void call_func ( data_type var ) ; 
 double var ; 
 int func ( ) 
 { 
 int var ; 
 double var ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( var ! = nums ) { 
 if ( var = = nums | | var = = nums ) { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) { 
 call_func ( var ) ; 
 } 
 else { 
 call_func ( var ) ; 
 } 
 printf ( words , var ) ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } 
 return nums ; 
 } 
 void func ( data_type var ) 
 { 
 var = var + var ; 
 } 
 void func ( data_type var ) 
 { 
 var = var - var ; 
 } 
 int func ( ) 
 { 
 int var ; 
 char var , var ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 scanf ( words , & var ) ; 
 if ( var >= words & & var <= words ) 
 var = var - words + words ; 
 printf ( words , var , var , var % nums ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 char var ; 
 printf ( words ) ; 
 var = call_func ( ) ; 
 while ( var ! = words ) { 
 if ( var >= words & & var <= words ) 
 var = var + ( words - words ) ; 
 else if ( var >= words & & var <= words ) 
 var = var - ( words - words ) ; 
 call_func ( var ) ; 
 var = call_func ( ) ; 
 } 
 printf ( words ) ; 
 char var ; 
 var = nums ; 
 printf ( words , var < < nums & var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 double var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 var = nums ; 
 for ( var = nums ; var < nums ; var + + ) { 
 scanf ( words , & var [ var ] ) ; 
 var = var + var [ var ] ; 
 } 
 var = var / nums ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) { 
 if ( var [ var ] > var ) 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 int var [ nums ] = { nums , nums } ; 
 for ( var = nums ; var < nums ; var + + ) { 
 var [ var ] = var [ var - nums ] + var [ var - nums ] ; 
 } 
 for ( var = nums ; var < nums ; var + + ) { 
 printf ( words , var [ var ] ) ; 
 if ( ( var + nums ) % nums = = nums ) 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 for ( var = nums ; var < nums ; var + + ) { 
 if ( var [ var ] = = var ) { 
 printf ( words , var ) ; 
 var = nums ; 
 break ; 
 } 
 } 
 if ( var = = nums ) 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 scanf ( words , & var [ var ] ) ; 
 } 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) { 
 if ( var [ var ] < var [ var ] ) 
 var = var ; 
 } 
 printf ( words , var [ var ] , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 int var [ var ] ; 
 int var , var ; 
 int var ; 
 var = nums ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 scanf ( words , & var ) ; 
 var [ var ] = var ; 
 } 
 for ( var = nums ; var < var ; var + + ) { 
 if ( var [ var ] < var [ var ] ) { 
 var = var ; 
 } 
 } 
 printf ( words , var [ var ] , var ) ; 
 var [ var ] var = var [ nums ] var = var [ var ] var = var [ nums ] ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 call_func ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var , var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 scanf ( words , & var [ var ] ) ; 
 } 
 for ( var = nums ; var < var - nums ; var + + ) { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 if ( var [ var ] < var [ var ] ) 
 var = var ; 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words , var [ var ] ) ; 
 } 
 call_func ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var , var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 for ( var = nums ; var < var - nums ; var + + ) { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 if ( var [ var ] < var [ var ] ) 
 var = var ; 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 int var [ nums ] ; 
 for ( var = nums ; var <= nums ; var + + ) 
 var [ var ] = nums ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var >= nums & & var <= nums ) 
 var [ var ] + + ; 
 else 
 printf ( words , var ) ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var <= nums ; var + + ) 
 printf ( words , var , var [ var ] ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var , var ; 
 int var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 for ( var = nums ; var < nums ; var + + ) 
 scanf ( words , & var [ var ] [ var ] ) ; 
 
 for ( var = nums ; var < nums ; var + + ) { 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 var = var = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 for ( var = nums ; var < nums ; var + + ) 
 if ( var [ var ] [ var ] > var [ var ] [ var ] ) { 
 var = var ; 
 var = var ; 
 } 
 printf ( words , var , var , var [ var ] [ var ] ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 int var [ nums ] [ nums ] ; 
 for ( var = nums ; var < nums ; var + + ) 
 for ( var = nums ; var < nums ; var + + ) 
 var [ var ] [ var ] = var + var ; 
 for ( var = nums ; var < nums ; var + + ) { 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var , var ; 
 int var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 var [ var ] [ var ] = var * var + var + nums ; 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 if ( var <= var ) { 
 var = var [ var ] [ var ] ; 
 var [ var ] [ var ] = var [ var ] [ var ] ; 
 var [ var ] [ var ] = var ; 
 } 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 int call_func ( data_type var , data_type var , data_type var ) ; 
 int func ( ) 
 { 
 int var , var , var ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 var = call_func ( var , var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( data_type var , data_type var , data_type var ) 
 { 
 int var , var ; 
 int var [ nums ] [ nums ] = { 
 { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } , 
 { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } 
 } ; 
 
 var = ( var % nums = = nums & & var % nums ! = nums | | var % nums = = nums ) ; 
 for ( var = nums ; var < var ; var + + ) 
 var = var + var [ var ] [ var ] ; 
 return var ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 var = nums ; 
 while ( ( var [ var ] = call_func ( ) ) ! = words ) 
 var + + ; 
 var [ var ] = words ; 
 var = nums ; 
 var = var - nums ; 
 while ( var < var ) { 
 if ( var [ var ] ! = var [ var ] ) 
 break ; 
 var + + ; 
 var - - ; 
 } 
 if ( var >= var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 var = nums ; 
 while ( ( var [ var ] = call_func ( ) ) ! = words ) 
 var + + ; 
 var [ var ] = words ; 
 var = nums ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 if ( var [ var ] <= words & & var [ var ] >= words ) 
 var + + ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 var = nums ; 
 while ( ( var [ var ] = call_func ( ) ) ! = words ) 
 var + + ; 
 var [ var ] = words ; 
 var = nums ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 if ( var [ var ] >= words & & var [ var ] <= words ) 
 var = var * nums + var [ var ] - words ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 char var [ nums ] , var [ nums ] ; 
 var var ; 
 printf ( words ) ; 
 var = nums ; 
 while ( ( var [ var ] = call_func ( ) ) ! = words ) 
 var + + ; 
 var [ var ] = words ; 
 var = nums ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 if ( var [ var ] >= words & & var [ var ] <= words | | var [ var ] >= words & & var [ var ] <= words 
 | | var [ var ] >= words & & var [ var ] <= words ) { 
 var [ var ] = var [ var ] ; 
 var + + ; 
 } 
 var [ var ] = words ; 
 printf ( words ) ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 call_func ( var [ var ] ) ; 
 printf ( words ) ; 
 var = nums ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) { 
 if ( var [ var ] >= words & & var [ var ] <= words ) 
 var = var * nums + var [ var ] - words ; 
 else if ( var [ var ] >= words & & var [ var ] <= words ) 
 var = var * nums + var [ var ] - words + nums ; 
 else if ( var [ var ] >= words & & var [ var ] <= words ) 
 var = var * nums + var [ var ] - words + nums ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var = nums ; 
 int * var = NULL ; 
 var = & var ; 
 printf ( words var words 
 words , var ) ; 
 printf ( words 
 words var var : % words 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var = nums , * var ; 
 var = & var ; 
 printf ( words , var , * var ) ; 
 * var = nums ; 
 printf ( words , var , * var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var , * var ) ; 
 ( * var ) + + ; 
 printf ( words , var , * var ) ; 
 return nums ; 
 } 
 void call_func ( data_type var , data_type var ) ; 
 void call_func ( data_type * var , data_type * var ) ; 
 void call_func ( data_type * var , data_type * var ) ; 
 int func ( ) 
 { 
 int var = nums , var = nums ; 
 int * var = & var , * var = & var ; 
 call_func ( var , var ) ; 
 printf ( words , var , var ) ; 
 var = nums ; 
 var = nums ; 
 call_func ( var , var ) ; 
 printf ( words , var , var ) ; 
 var = nums ; 
 var = nums ; 
 call_func ( var , var ) ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 void func ( data_type var , data_type var ) 
 { 
 int var ; 
 var = var ; 
 var = var ; 
 var = var ; 
 } 
 void func ( data_type * var , data_type * var ) 
 { 
 int var ; 
 var = * var ; 
 * var = * var ; 
 * var = var ; 
 } 
 void func ( data_type * var , data_type * var ) 
 { 
 int * var ; 
 var = var ; 
 var = var ; 
 var = var ; 
 } 
 void call_func ( data_type var , data_type var , data_type * var , data_type * var ) ; 
 int func ( ) 
 { 
 int var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 call_func ( var , var , & var , & var ) ; 
 printf ( words , var , var , var ) ; 
 return nums ; 
 } 
 void func ( data_type var , data_type var , data_type * var , data_type * var ) 
 { 
 int var , var ; 
 int var [ nums ] [ nums ] = { 
 { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , } , 
 { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , } , 
 } ; 
 var = ( var % nums = = nums & & var % nums ! = nums ) | | var % nums = = nums ; 
 for ( var = nums ; var > var [ var ] [ var ] ; var + + ) 
 var - = var [ var ] [ var ] ; 
 * var = var ; 
 * var = var ; 
 } 
 void call_func ( data_type var [ ] , data_type var ) ; 
 int func ( ) 
 { 
 int var , var [ nums ] ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 call_func ( var , var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 call_func ( words ) ; 
 return nums ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var - var ; var + + ) 
 if ( var [ var ] > var [ var + nums ] ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var + nums ] ; 
 var [ var + nums ] = var ; 
 } 
 } 
 int func ( ) 
 { 
 double var [ nums ] , * var , * var ; 
 var = & var [ nums ] ; 
 var = var + nums ; 
 printf ( words , var - var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var [ nums ] , * var ; 
 var var = nums ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 var = var + var [ var ] ; 
 printf ( words , var ) ; 
 var = nums ; 
 for ( var = var ; var <= var + nums ; var + + ) 
 var = var + * var ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int call_func ( data_type * var , data_type var , data_type var ) ; 
 int func ( ) 
 { 
 int var [ nums ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } ; 
 int var , var ; 
 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var , nums , var ) ; 
 if ( var >= nums ) 
 printf ( words , var ) ; 
 else 
 printf ( words ) ; 
 
 return nums ; 
 } 
 int func ( data_type * var , data_type var , data_type var ) 
 { 
 int var , var , var ; 
 
 var = nums ; 
 var = var - nums ; 
 while ( var <= var ) { 
 var = ( var + var ) / nums ; 
 if ( var = = var [ var ] ) 
 break ; 
 else if ( var < var [ var ] ) 
 var = var - nums ; 
 else 
 var = var + nums ; 
 } 
 if ( var <= var ) 
 return var ; 
 else 
 return - nums ; 
 } 
 #define var nums 
 void call_func ( data_type * ) ; 
 int func ( ) 
 { 
 char var [ var ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 call_func ( var ) ; 
 printf ( words , words , var ) ; 
 return nums ; 
 } 
 void func ( data_type * struct_name ) 
 { 
 for ( ; * ! = words ; + + ) 
 if ( * = = words ) 
 * = words ; 
 else 
 * = * + nums ; 
 } 
 int func ( ) 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 scanf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , words ) ; 
 call_func ( words ) ; 
 call_func ( ) ; 
 gets ( var ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 char var [ nums ] , var [ nums ] ; 
 scanf ( words , var ) ; 
 call_func ( var , var ) ; 
 for ( var = nums ; var < nums ; var + + ) { 
 scanf ( words , var ) ; 
 if ( strcmp ( var , var ) < nums ) 
 call_func ( var , var ) ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 int var , var ; 
 scanf ( words , & var ) ; 
 var = var ; 
 for ( var = nums ; var < nums ; var + + ) { 
 scanf ( words , & var ) ; 
 if ( var < var ) 
 var = var ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var , * var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( ( var = ( int * ) func ( var , sizeof ( data_type ) ) ) = = NULL ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , var + var ) ; 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 var = var + * ( var + var ) ; 
 printf ( words , var ) ; 
 free ( var ) ; 
 return nums ; 
 } 
 struct 
 { 
 int var ; 
 char var [ nums ] ; 
 int var , var , var ; 
 double var ; 
 } ; 
 int func ( ) 
 { 
 int var , var ; 
 struct struct_name struct_var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words var , var var var words 
 for ( var = nums ; var <= var ; var + + ) { 
 printf ( words , var ) ; 
 scanf ( words , & var . var , & var . var , & var . var , & var . var , & var . var ) ; 
 var . var = ( var . var + var . var + var . var ) / nums . nums ; 
 if ( var = = nums ) 
 var = var ; 
 if ( var . var < var . var ) 
 var = var ; 
 } 
 printf ( words , var . var , var . var , var . var ) ; 
 return nums ; 
 } 
 struct { 
 int var ; 
 char var [ nums ] ; 
 int var , var , var ; 
 double var ; 
 } ; 
 int func ( ) 
 { 
 int var , var , var , var ; 
 struct struct_name struct_var [ nums ] , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words , var + nums ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 [ var ] . var = ( [ var ] . var + [ var ] . var 
 + [ var ] . var ) / nums . nums ; 
 } 
 for ( var = nums ; var < var - nums ; var + + ) { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 if ( [ var ] . var > [ var ] . var ) 
 var = var ; 
 var = [ var ] ; 
 [ var ] = [ var ] ; 
 [ var ] = var ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , [ var ] . var , [ var ] . var , 
 [ var ] . var ) ; 
 return nums ; 
 } 
 struct { 
 int var ; 
 char var [ nums ] ; 
 int var , var , var ; 
 double var ; 
 } ; 
 int call_func ( struct struct_name * var , data_type var , data_type var , data_type var , data_type var ) ; 
 int func ( ) 
 { 
 int var , var , var , var , var , var ; 
 struct struct_name struct_var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words , var + nums ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( struct_name , var , var , var , var ) ; 
 if ( var = = - nums ) 
 printf ( words ) ; 
 else { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words , [ var ] . var , [ var ] . var , 
 [ var ] . var , [ var ] . var ) ; 
 } 
 return nums ; 
 } 
 int func ( struct struct_name * var , data_type var , data_type var , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + , var + + ) 
 if ( var - > var = = var ) 
 break ; 
 if ( var < var ) { 
 switch ( var ) { 
 case nums : var - > var = var ; break ; 
 case nums : var - > var = var ; break ; 
 case nums : var - > var = var ; break ; 
 } 
 var = var ; 
 } 
 else 
 var = - nums ; 
 return var ; 
 } 
 double call_func ( data_type var ) ; 
 int func ( ) 
 { 
 int var ; 
 scanf ( words , & var ) ; 
 printf ( words , var , call_func ( var ) ) ; 
 return nums ; 
 } 
 double func ( data_type var ) 
 { 
 double var ; 
 if ( var = = nums | | var = = nums ) 
 var = nums ; 
 else 
 var = var * call_func ( var - nums ) ; 
 return var ; 
 } 
 void call_func ( data_type var ) ; 
 int func ( ) 
 { 
 int var ; 
 scanf ( words , & var ) ; 
 call_func ( var ) ; 
 return nums ; 
 } 
 void func ( data_type var ) 
 { 
 if ( var <= nums ) 
 printf ( words , var ) ; 
 else { 
 printf ( words , var % nums ) ; 
 call_func ( var / nums ) ; 
 } 
 } 
 void call_func ( data_type var , data_type var , data_type var , data_type var ) ; 
 int func ( ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 call_func ( var , words , words , words ) ; 
 return nums ; 
 } 
 void func ( data_type var , data_type var , data_type var , data_type var ) 
 { 
 if ( var = = nums ) 
 printf ( words , var , var ) ; 
 else { 
 call_func ( var - nums , var , var , var ) ; 
 printf ( words , var , var ) ; 
 call_func ( var - nums , var , var , var ) ; 
 } 
 } 
 #define var nums 
 #define var nums . nums 
 #define var nums . nums 
 int func ( ) 
 { 
 float var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 printf ( words , var , var * var ) ; 
 printf ( words , var , var * var ) ; 
 printf ( words , var , var * var ) ; 
 return nums ; 
 } 
 #define func ( var , var ) var > var var : var 
 #define call_func ( var ) var * var 
 data_type call_func ( ) 
 { 
 int var , var ; 
 scanf ( words , & var , & var ) ; 
 var = call_func ( var , var ) ; 
 var = call_func ( var ) ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 char * var [ nums ] = { words , words , words , words , words } ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 if ( strcmp ( var , var [ var ] ) = = nums ) 
 break ; 
 if ( var < nums ) 
 printf ( words , var + nums ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 char * var [ nums ] = { words , words , words , words , words } ; 
 char * * var ; 
 char var [ nums ] ; 
 var = var ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 if ( strcmp ( var , * ( var + var ) ) = = nums ) 
 break ; 
 if ( var < nums ) 
 printf ( words , var + nums ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 void call_func ( data_type var [ ] , data_type var ) ; 
 int func ( ) 
 { 
 int var ; 
 int var [ nums ] = { nums , nums , nums , nums , nums , } ; 
 call_func ( var , nums ) ; 
 printf ( words , var [ nums ] ) ; 
 for ( var = nums ; var < nums ; var + + ) { 
 printf ( words , var [ var ] ) ; 
 } 
 return nums ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var , var ; 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var - var ; var + + ) 
 if ( var [ var ] > var [ var + nums ] ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var + nums ] ; 
 var [ var + nums ] = var ; 
 } 
 } 
 var var var ; 
 void call_func ( data_type * var [ ] , data_type var ) ; 
 int func ( ) 
 { 
 int var ; 
 char * var [ ] = { words , words , words , words , words } ; 
 call_func ( var , nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , var [ var ] ) ; 
 return nums ; 
 } 
 void func ( data_type * var [ ] , data_type var ) 
 { 
 int var , var ; 
 char * var ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var - var ; var + + ) 
 if ( strcmp ( var [ var ] , var [ var + nums ] ) > nums ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var + nums ] ; 
 var [ var + nums ] = var ; 
 } 
 } 
 var var var ; 
 int func ( ) 
 { 
 int var ; 
 char * var [ nums ] ; 
 char var [ nums ] ; 
 var [ nums ] = words ; 
 var [ nums ] = words ; 
 var [ nums ] = words ; 
 var [ nums ] = words ; 
 for ( var = nums ; var < nums ; var + + ) { 
 var [ nums * var ] = * ( var [ var ] ) ; 
 var [ nums * var + nums ] = * ( var [ var ] + nums ) ; 
 } 
 var [ nums * var ] = words ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 var var var ; 
 int func ( ) 
 { 
 int var , var = nums ; 
 char * var [ nums ] , var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 while ( var [ nums ] ! = words ) { 
 var [ var ] = ( char * ) malloc ( sizeof ( char ) * ( call_func ( var ) + nums ) ) ; 
 call_func ( var [ var ] , var ) ; 
 var + + ; 
 scanf ( words , var ) ; 
 } 
 printf ( words ) ; 
 for ( var = var - nums ; var >= nums ; var - - ) { 
 printf ( words , var [ var ] ) ; 
 free ( var [ var ] ) ; 
 } 
 return nums ; 
 } 
 var var var ; 
 char * call_func ( data_type * struct_name , data_type var ) ; 
 int func ( ) 
 { 
 char var , var [ nums ] , * var = NULL ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 call_func ( ) ; 
 var = call_func ( ) ; 
 if ( ( var = call_func ( var , var ) ) ! = NULL ) 
 printf ( words , var ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 char * func ( data_type * struct_name , data_type var ) 
 { 
 while ( * ! = words ) 
 if ( * = = var ) 
 return ( ) ; 
 else 
 + + ; 
 return NULL ; 
 } 
 var var var ; 
 double call_func ( data_type ( * var ) ( data_type ) , data_type var , data_type var ) ; 
 double call_func ( data_type var ) ; 
 double call_func ( data_type var ) ; 
 int func ( ) 
 { 
 double var ; 
 double ( * var ) ( double ) ; 
 var = call_func ( var , nums . nums , nums . nums ) ; 
 printf ( words , var ) ; 
 var = var ; 
 var = call_func ( var , nums . nums , nums . nums ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type ( * var ) ( data_type ) , data_type var , data_type var ) 
 { 
 double var ; 
 var = ( var - var ) / nums * ( ( * var ) ( var ) + ( * var ) ( var ) ) ; 
 return ( var ) ; 
 } 
 double func ( data_type var ) 
 { 
 return ( var * var ) ; 
 } 
 double func ( data_type var ) 
 { 
 return ( call_func ( var ) / var ) ; 
 } 
 struct { 
 int var ; 
 char var [ nums ] ; 
 int var ; 
 struct struct_name * struct_var ; 
 } ; 
 struct struct_name * struct_var ( ) ; 
 
 struct struct_name * struct_var ( struct struct_name * struct_var , struct struct_name * struct_var ) ; 
 struct struct_name * struct_var ( struct struct_name * struct_var , int var ) ; 
 void call_func ( struct struct_name * var ) ; 
 var var var ; 
 int func ( ) 
 { 
 struct struct_name * struct_var , * var ; 
 int var , var , var ; 
 char var [ nums ] ; 
 int var = sizeof ( struct ) ; 
 do { 
 printf ( words ) ; 
 scanf ( ) 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( words ) { 
 printf ( words ) ; 
 for ( var = var ; var <= var ; var + = nums ) { 
 var = ( nums . nums / nums . nums ) * ( var - nums ) ; 
 printf ( words , var , var ) ; 
 } 
 } 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 double var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = var + nums . nums / var ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 double var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = var + nums . nums / var ; 
 var = var + nums ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var , ; 
 double var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = var + var * ( nums . nums / ) ; 
 = + nums ; 
 var = - var ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = call_func ( nums , var ) ; 
 printf ( words , var , var ) ; 
 } 
 return nums ; 
 } 
 double call_func ( data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , call_func ( var , var ) ) ; 
 return nums ; 
 } 
 double func ( data_type var , data_type var ) 
 { 
 int var ; 
 double var , var , var ; 
 double var ; 
 var = nums ; 
 var = nums ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 var = var * var ; 
 for ( var = nums ; var <= var ; var + + ) 
 var = var * var ; 
 for ( var = nums ; var <= var - var ; var + + ) 
 var = var * var ; 
 var = var / var / var ; 
 return var ; 
 } 
 int func ( ) 
 { 
 int var , var , var , var , var ; 
 char var ; 
 int var ; 
 var = nums ; 
 var = var = var = var = var = nums ; 
 while ( var > nums ) 
 { 
 var = call_func ( ) ; 
 if ( var >= words & & var <= words ) 
 var + + ; 
 else if ( var >= words & & var <= words ) 
 var + + ; 
 else if ( var = = words ) 
 var + + ; 
 else if ( var = = words ) 
 var + + ; 
 else 
 var + + ; 
 var - = nums ; 
 } 
 printf ( words , var , var , var , var , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 double var ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < nums ) { 
 var = - nums ; 
 } 
 else if ( var = nums ) { 
 var = nums ; 
 } 
 else { 
 var = nums ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 printf ( words , var ) ; 
 scanf ( words , & var ) ; 
 var + = var ; 
 if ( var >= nums ) { 
 var + + ; 
 } 
 } 
 printf ( words , var / var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 int var ; 
 int var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 if ( ( var % nums = = nums & & var % nums ! = nums ) | | var % nums = = nums ) { 
 printf ( words , var ) ; 
 var + + ; 
 } 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 double var ; 
 char var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var >= nums ) 
 var = words ; 
 else if ( var >= nums ) 
 var = words ; 
 else if ( var >= nums ) 
 var = words ; 
 else if ( var >= nums ) 
 var = words ; 
 else 
 var = words ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var ; 
 for ( var = nums ; var <= nums ; var + + ) { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 break ; 
 switch ( var ) { 
 case nums : var = nums . nums ; 
 break ; 
 case nums : var = nums . nums ; 
 break ; 
 case nums : var = nums . nums ; 
 break ; 
 case nums : var = nums . nums ; 
 break ; 
 default : var = nums . nums ; 
 break ; 
 } 
 printf ( words , var ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 double var , ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 var = nums ; 
 = nums ; 
 var = nums ; 
 while ( func ( struct_name ) >= var ) { 
 = nums . nums * var / var ; 
 var + = ; 
 var + = nums ; 
 var = - var ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 int var ; 
 int var ; 
 int var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 do { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < nums ) { 
 printf ( words ) ; 
 var = nums ; 
 break ; 
 } 
 var + + ; 
 if ( var = = var ) 
 break ; 
 else if ( var >= var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 var = var - nums ; 
 } while ( var > nums ) ; 
 if ( var = = nums ) 
 goto var ; 
 if ( var = = nums ) 
 printf ( words ) ; 
 else if ( var <= nums ) 
 printf ( words ) ; 
 else if ( var <= var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 var : 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 double var , ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 = var ; 
 } 
 var + = nums / ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) { 
 scanf ( words , & var ) ; 
 if ( var > var ) { 
 var = var ; 
 } 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 int var , var ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 for ( var = var ; var <= var ; var + + ) { 
 for ( var = nums ; var <= var / nums ; var + + ) { 
 if ( var % var = = nums ) 
 break ; 
 } 
 if ( var > var / nums & & var ! = nums ) { 
 var = var + var ; 
 } 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int call_func ( data_type var , data_type var ) ; 
 int func ( ) 
 { 
 int var , var ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( data_type var , data_type var ) 
 { 
 int var ; 
 int var ; 
 var = nums ; 
 for ( var = var ; var <= var ; var + + ) { 
 var = var + var ; 
 } 
 return var ; 
 } 
 double call_func ( data_type var , data_type var ) ; 
 int func ( ) 
 { 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , call_func ( var , var ) ) ; 
 return nums ; 
 } 
 double func ( data_type var , data_type var ) 
 { 
 if ( var > var ) { 
 return var ; 
 } 
 else { 
 return var ; 
 } 
 } 
 int func ( ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var , var ) ; 
 printf ( words , var , var ) ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 char var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var + ( words - words ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 int var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 scanf ( words , & var [ var ] ) ; 
 } 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) { 
 if ( var [ var ] < var [ var ] ) 
 var = var ; 
 } 
 printf ( words , var [ var ] , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 scanf ( words , & var [ var ] ) ; 
 } 
 for ( var = nums ; var < var - nums ; var + + ) { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 if ( var [ var ] < var [ var ] ) 
 var = var ; 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words , var [ var ] ) ; 
 } 
 call_func ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var , var , var ; 
 int var [ nums ] ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) { 
 if ( var [ var ] = = var [ var ] ) { 
 var = nums ; 
 break ; 
 } 
 } 
 if ( var ) 
 printf ( words , var [ var ] ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) { 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) { 
 if ( var [ var ] = = var [ var ] ) { 
 var = nums ; 
 break ; 
 } 
 } 
 if ( var ) 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var , var ; 
 int var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 for ( var = nums ; var < nums ; var + + ) 
 scanf ( words , & var [ var ] [ var ] ) ; 
 
 for ( var = nums ; var < nums ; var + + ) { 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 var = var = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 for ( var = nums ; var < nums ; var + + ) 
 if ( var [ var ] [ var ] > var [ var ] [ var ] ) { 
 var = var ; 
 var = var ; 
 } 
 printf ( words , var , var , var [ var ] [ var ] ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 int var ; 
 int var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 printf ( words , var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) { 
 scanf ( words , & var [ var ] [ var ] ) ; 
 var + = var [ var ] [ var ] ; 
 } 
 for ( var = nums ; var < var - nums ; var + + ) 
 var - = var [ var ] [ var - var - nums ] ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 var - = var [ var - nums ] [ var ] ; 
 for ( var = nums ; var < var ; var + + ) 
 var - = var [ var ] [ var - nums ] ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 int var , var ; 
 int var [ nums ] [ nums ] ; 
 int var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] [ var ] ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var ; var + + ) { 
 var [ ( var + var ) % var ] [ var ] = var [ var ] [ var ] ; 
 } 
 } 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 char var ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 var = nums ; 
 while ( ( var [ var ] = call_func ( ) ) ! = words ) 
 var + + ; 
 var [ var ] = words ; 
 printf ( words ) ; 
 var = call_func ( ) ; 
 var = var - nums ; 
 while ( var >= nums & & var [ var ] ! = var ) { 
 var - - ; 
 } 
 if ( var >= nums ) 
 printf ( words , var ) ; 
 else 
 printf ( words ) ; 
 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 var = nums ; 
 while ( ( var [ var ] = call_func ( ) ) ! = words ) 
 var + + ; 
 var [ var ] = words ; 
 var = var - nums ; 
 var = nums ; 
 while ( var >= var ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 var + + ; 
 var - - ; 
 } 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 call_func ( var [ var ] ) ; 
 call_func ( words ) ; 
 return nums ; 
 } 
 float call_func ( data_type var , data_type var , data_type * var , data_type * var ) ; 
 int func ( ) 
 { 
 float var , var ; 
 float * var , * var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = & var ; 
 var = & var ; 
 call_func ( var , var , var , var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 float func ( data_type var , data_type var , data_type * var , data_type * var ) 
 { 
 * var = var + var ; 
 * var = var - var ; 
 } 
 void call_func ( data_type var [ ] , data_type var ) ; 
 int func ( ) 
 { 
 int var , var [ nums ] ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 call_func ( words ) ; 
 return nums ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var , var , var ; 
 int var ; 
 int ; 
 for ( var = nums ; var < var - nums ; var + + ) { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) { 
 if ( var [ var ] > var [ var ] ) 
 var = var ; 
 } 
 = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = ; 
 } 
 } 
 int func ( ) 
 { 
 int var , var ; 
 char var [ nums ] , var [ nums ] ; 
 int var ; 
 scanf ( words , var ) ; 
 var = call_func ( var ) ; 
 var = var - nums ; 
 for ( var = nums ; var >= nums ; var - - ) { 
 var [ var ] = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var - - ; 
 } 
 var [ var ] = words ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , * var ; 
 int var , ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = ( int * ) call_func ( var , sizeof ( data_type ) ) ; 
 if ( var = = NULL ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , var + var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var - var ; var + + ) { 
 if ( * ( var + var ) > * ( var + var + nums ) ) { 
 = * ( var + var ) ; 
 * ( var + var ) = * ( var + var + nums ) ; 
 * ( var + var + nums ) = ; 
 } 
 } 
 } 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , * ( var + var ) ) ; 
 printf ( words ) ; 
 free ( var ) ; 
 return nums ; 
 } 
 struct { 
 int var ; 
 char [ nums ] ; 
 } ; 
 int func ( ) 
 { 
 struct struct_name struct_var [ nums ] ; 
 int var , var ; 
 int var ; 
 for ( var = nums ; var < nums ; var + + ) { 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . , & var [ var ] . var ) ; 
 } 
 var = nums ; 
 var = nums ; 
 for ( var = nums ; var < nums ; var + + ) { 
 if ( var [ var ] . var > var [ var ] . var ) 
 var = var ; 
 if ( var [ var ] . var < var [ var ] . var ) 
 var = var ; 
 } 
 printf ( words ) ; 
 printf ( words , var [ var ] . , var [ var ] . var ) ; 
 printf ( words , var [ var ] . , var [ var ] . var ) ; 
 return nums ; 
 } 
 struct 
 { 
 double var ; 
 double var ; 
 } ; 
 int func ( ) 
 { 
 struct struct_name struct_var ; 
 printf ( words , sizeof ( struct ) ) ; 
 printf ( words , sizeof ( var ) ) ; 
 printf ( words ) ; 
 scanf ( words , & var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var . var ) ; 
 printf ( words , var . var , var . var ) ; 
 return nums ; 
 } 
 struct { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 int var ; 
 } ; 
 struct { 
 int var ; 
 int var ; 
 int var ; 
 } ; 
 struct { 
 int var ; 
 char var [ nums ] ; 
 struct struct_name struct_var ; 
 struct struct_name struct_var ; 
 int var , var , var ; 
 double var ; 
 } ; 
 int func ( ) 
 { 
 struct struct_name struct_var ; 
 printf ( words ) ; 
 scanf ( words , & var . var . var ) ; 
 printf ( words , var . var . var ) ; 
 return nums ; 
 } 
 struct 
 { 
 int var ; 
 char var [ nums ] ; 
 int var , var , var ; 
 double var ; 
 double var [ nums ] ; 
 } ; 
 int func ( ) 
 { 
 int var , var , var ; 
 struct struct_name struct_var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words var , var var var words 
 for ( var = nums ; var < nums ; var + + ) 
 var . var [ var ] = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 printf ( words , var ) ; 
 scanf ( words , & var . var , & var . var , & var . var , & var . var , & var . var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 switch ( var ) { 
 case nums : var . var [ nums ] + = var . var ; break ; 
 case nums : var . var [ nums ] + = var . var ; break ; 
 case nums : var . var [ nums ] + = var . var ; break ; 
 } 
 var . var = ( var . var + var . var + var . var ) / nums . nums ; 
 if ( var = = nums ) 
 var = var ; 
 if ( var . var < var . var ) 
 var = var ; 
 } 
 printf ( words , var . var , var . var , var . var ) ; 
 printf ( words , var . var [ nums ] / nums ) ; 
 printf ( words , var . var [ nums ] / nums ) ; 
 printf ( words , var . var [ nums ] / nums ) ; 
 return nums ; 
 } 
 struct { 
 int var ; 
 char var [ nums ] ; 
 int var ; 
 } ; 
 int func ( ) 
 { 
 struct struct_name struct_var [ nums ] = { 
 { nums , words , nums } , 
 { nums , words , nums } , 
 { nums , words , nums } , 
 } ; 
 int var ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , [ var ] . var , [ var ] . var , 
 [ var ] . var ) ; 
 } 
 struct { 
 int var ; 
 char var [ nums ] ; 
 int var , var , var ; 
 double var ; 
 } ; 
 int func ( ) 
 { 
 int var , var , var , var ; 
 struct struct_name struct_var [ nums ] , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words , var + nums ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 [ var ] . var = ( [ var ] . var + [ var ] . var 
 + [ var ] . var ) / nums . nums ; 
 } 
 for ( var = nums ; var < var - nums ; var + + ) { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 if ( [ var ] . var > [ var ] . var ) 
 var = var ; 
 var = [ var ] ; 
 [ var ] = [ var ] ; 
 [ var ] = var ; 
 } 
 printf ( words ) ; 
 printf ( words , [ nums ] . var , [ nums ] . var , 
 [ nums ] . var ) ; 
 printf ( words , [ var - nums ] . var , [ var - nums ] . var , 
 [ var - nums ] . var ) ; 
 return nums ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( ) 
 { 
 int var ; 
 scanf ( words , & var ) ; 
 printf ( words , call_func ( var ) ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var ; 
 if ( var = = nums ) 
 var = nums ; 
 else 
 var = var + call_func ( var - nums ) ; 
 return var ; 
 } 
 var var var ; 
 char * call_func ( data_type * struct_name , data_type var , data_type var ) ; 
 int func ( ) 
 { 
 char var , var [ nums ] , * var = NULL ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 call_func ( ) ; 
 var = call_func ( ) ; 
 printf ( words , var ) ; 
 if ( ( var = call_func ( var , var , call_func ( var ) ) ) ! = NULL ) 
 printf ( words , var ) ; 
 else 
 printf ( words ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 char * func ( data_type * struct_name , data_type var , data_type var ) 
 { 
 while ( * ! = words ) 
 if ( * = = var ) { 
 for ( ; * ! = words ; + + ) ; 
 return ( ) ; 
 } 
 else 
 + + ; 
 return NULL ; 
 } 
 
 struct { 
 int var ; 
 char var [ nums ] ; 
 int var ; 
 struct struct_name * struct_var ; 
 } ; 
 struct struct_name * struct_var ( ) ; 
 struct struct_name * struct_var ( struct struct_name * struct_var , struct struct_name * struct_var ) ; 
 struct struct_name * struct_var ( struct struct_name * struct_var ) ; 
 void call_func ( struct struct_name * var ) ; 
 int func ( ) 
 { 
 struct struct_name * struct_var , * var ; 
 int var , var , var ; 
 char var [ nums ] ; 
 int var = sizeof ( struct ) ; 
 do { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 switch ( var ) { 
 case nums : 
 var = call_func ( ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 scanf ( words , & var , var , & var ) ; 
 var = ( struct ) malloc ( var ) ; 
 var - > var = var ; 
 call_func ( var - > var , var ) ; 
 var - > var = var ; 
 var = call_func ( var , var ) ; 
 break ; 
 case nums : 
 var = call_func ( var ) ; 
 break ; 
 case nums : 
 call_func ( var ) ; 
 break ; 
 case nums : 
 break ; 
 } 
 } while ( var ! = nums ) ; 
 return nums ; 
 } 
 struct struct_name * struct_var ( ) 
 { 
 struct struct_name * struct_var , * var ; 
 int var , var ; 
 char var [ nums ] ; 
 int var = sizeof ( struct ) ; 
 var = NULL ; 
 printf ( words ) ; 
 scanf ( words , & var , var , & var ) ; 
 while ( var ! = nums ) { 
 var = ( struct ) malloc ( var ) ; 
 var - > var = var ; 
 call_func ( var - > var , var ) ; 
 var - > var = var ; 
 var = call_func ( var , var ) ; 
 scanf ( words , & var , var , & var ) ; 
 } 
 return var ; 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var , struct struct_name * struct_var ) 
 { 
 struct struct_name * struct_var , * var , * var ; 
 var = var ; 
 var = var ; 
 if ( var = = NULL ) { 
 var = var ; 
 var - > var = NULL ; 
 } 
 else { 
 while ( ( var - > var > var - > var ) & & ( var - > var ! = NULL ) ) { 
 var = var ; 
 var = var - > var ; 
 } 
 if ( var - > var <= var - > var ) { 
 if ( var = = var ) 
 var = var ; 
 else 
 var - > var = var ; 
 var - > var = var ; 
 } 
 else { 
 var - > var = var ; 
 var - > var = NULL ; 
 } 
 } 
 return var ; 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var ) 
 { 
 struct struct_name * struct_var , * var ; 
 var = var ; 
 while ( var ! = NULL ) { 
 if ( var - > var < nums ) { 
 var = var ; 
 free ( var ) ; 
 continue ; 
 } 
 else { 
 var = var - > var ; 
 } 
 } 
 return var ; 
 } 
 void func ( struct struct_name * var ) 
 { 
 struct struct_name * struct_var ; 
 if ( var = = NULL ) { 
 printf ( words ) ; 
 return ; 
 } 
 printf ( words var var : words 
 printf ( words ) ; 
 for ( var = var ; var ! = NULL ; var = var - > var ) 
 printf ( words , var - > var , var - > var , var - > var ) ; 
 } 
 
 struct { 
 int var ; 
 char var [ nums ] ; 
 int var ; 
 struct struct_name * struct_var ; 
 } ; 
 struct struct_name * struct_var ( ) ; 
 struct struct_name * struct_var ( struct struct_name * struct_var , struct struct_name * struct_var ) ; 
 struct struct_name * struct_var ( struct struct_name * struct_var , int var ) ; 
 void call_func ( struct struct_name * var ) ; 
 void call_func ( struct struct_name * var , data_type var , data_type var ) ; 
 int func ( ) 
 { 
 struct struct_name * struct_var , * var ; 
 int var , var , var ; 
 char var [ nums ] ; 
 int var = sizeof ( struct ) ; 
 do { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 switch ( var ) { 
 case nums : 
 var = call_func ( ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 scanf ( words , & var , var , & var ) ; 
 var = ( struct ) malloc ( var ) ; 
 var - > var = var ; 
 call_func ( var - > var , var ) ; 
 var - > var = var ; 
 var = call_func ( var , var ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var , var ) ; 
 break ; 
 case nums : 
 call_func ( var ) ; 
 break ; 
 case nums : 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 call_func ( var , var , var ) ; 
 case nums : 
 break ; 
 } 
 } while ( var ! = nums ) ; 
 return nums ; 
 } 
 struct struct_name * struct_var ( ) 
 { 
 struct struct_name * struct_var , * var ; 
 int var , var ; 
 char var [ nums ] ; 
 int var = sizeof ( struct ) ; 
 var = NULL ; 
 printf ( words ) ; 
 scanf ( words , & var , var , & var ) ; 
 while ( var ! = nums ) { 
 var = ( struct ) malloc ( var ) ; 
 var - > var = var ; 
 call_func ( var - > var , var ) ; 
 var - > var = var ; 
 var = call_func ( var , var ) ; 
 scanf ( words , & var , var , & var ) ; 
 } 
 return var ; 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var , struct struct_name * struct_var ) 
 { 
 struct struct_name * struct_var , * var , * var ; 
 var = var ; 
 var = var ; 
 if ( var = = NULL ) { 
 var = var ; 
 var - > var = NULL ; 
 } 
 else { 
 while ( ( var - > var > var - > var ) & & ( var - > var ! = NULL ) ) { 
 var = var ; 
 var = var - > var ; 
 } 
 if ( var - > var <= var - > var ) { 
 if ( var = = var ) 
 var = var ; 
 else 
 var - > var = var ; 
 var - > var = var ; 
 } 
 else { 
 var - > var = var ; 
 var - > var = NULL ; 
 } 
 } 
 return var ; 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var , int var ) 
 { 
 struct struct_name * struct_var , * var ; 
 while ( var ! = NULL & & var - > var = = var ) { 
 var = var ; 
 var = var - > var ; 
 free ( var ) ; 
 } 
 if ( var = = NULL ) 
 return NULL ; 
 var = var ; 
 var = var - > var ; 
 while ( var ! = NULL ) { 
 if ( var - > var = = var ) { 
 var - > var = var - > var ; 
 free ( var ) ; 
 } 
 else 
 var = var ; 
 var = var - > var ; 
 } 
 return var ; 
 } 
 void func ( struct struct_name * var ) 
 { 
 struct struct_name * struct_var ; 
 if ( var = = NULL ) { 
 printf ( words ) ; 
 return ; 
 } 
 printf ( words var var : words 
 printf ( words ) ; 
 for ( var = var ; var ! = NULL ; var = var - > var ) 
 printf ( words , var - > var , var - > var , var - > var ) ; 
 } 
 void func ( struct struct_name * var , data_type var , data_type var ) 
 { 
 struct struct_name * struct_var ; 
 for ( var = var ; var ! = NULL ; var = var - > var ) { 
 if ( var - > var = = var ) { 
 var - > var = var ; 
 break ; 
 } 
 } 
 } 
 struct { 
 int var , var , var ; 
 } ; 
 int func ( ) 
 { 
 scanf ( words , & . var , & . var , & . var ) ; 
 . var + + ; 
 if ( . var = = nums ) { 
 . var + + ; 
 . var = nums ; 
 if ( . var = = nums ) { 
 . var + + ; 
 . var = nums ; 
 if ( . var = = nums ) 
 . var = nums ; 
 } 
 } 
 printf ( words , . var , . var , . var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var [ nums ] ; 
 int var , var ; 
 int var , var ; 
 int var ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 var = nums ; 
 for ( var = nums ; var <= var / nums ; var + + ) 
 if ( var % var = = nums ) { 
 var [ var + + ] = var ; 
 var + = var ; 
 } 
 if ( var = = var ) { 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var , & var ) ; 
 var = ( var + var + var + var ) / nums . nums ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var <= nums ) { 
 var = nums . nums * var ; 
 } 
 else { 
 var = nums . nums * nums + nums . nums * ( var - nums ) ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 double var = nums ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 if ( var >= var ) { 
 for ( var = var ; var <= var ; var + + ) { 
 var + = call_func ( var , nums ) + nums . nums / var ; 
 } 
 printf ( words , var ) ; 
 } 
 else { 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 int = nums ; 
 double var = nums . nums ; 
 double var = nums . nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = - var ; 
 = + nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var + = var * var / ; 
 = + nums ; 
 var = - var ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 int var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var + = call_func ( var ) ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double call_func ( data_type var ) ; 
 int func ( ) 
 { 
 int var ; 
 int var ; 
 double var ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var + = call_func ( var ) ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type var ) 
 { 
 double var = nums . nums ; 
 int var ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = var * var ; 
 } 
 return var ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 if ( var > var ) { 
 if ( var > var ) { 
 var = var ; var = var ; var = var ; 
 } 
 else { 
 if ( var > var ) { 
 var = var ; var = var ; var = var ; 
 } 
 else { 
 var = var ; var = var ; var = var ; 
 } 
 } 
 } 
 else { 
 if ( var > var ) { 
 var = var ; var = var ; var = var ; 
 } 
 else { 
 if ( var > var ) { 
 var = var ; var = var ; var = var ; 
 } 
 else { 
 var = var ; var = var ; var = var ; 
 } 
 } 
 } 
 printf ( words , var , var , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 if ( var > var * nums . nums ) { 
 printf ( words ) ; 
 } 
 else if ( var > var * nums . nums ) { 
 printf ( words ) ; 
 } 
 else { 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 double var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 if ( var <= nums ) { 
 var = nums ; 
 } 
 else if ( var >= nums & & var <= nums ) { 
 var = nums + ( var - nums ) * nums ; 
 } 
 else if ( var > nums ) { 
 var = nums + ( var - nums ) * nums ; 
 } 
 var = var / nums ; 
 var = ( int ) var ; 
 var = var + nums * var ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var , var ; 
 int var ; 
 int var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var = var = var = var = nums ; 
 for ( var = nums ; var < var ; var + + ) { 
 scanf ( words , & var ) ; 
 if ( var >= nums ) 
 var + + ; 
 else if ( var >= nums ) 
 var + + ; 
 else if ( var >= nums ) 
 var + + ; 
 else if ( var >= nums ) 
 var + + ; 
 else 
 var + + ; 
 } 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 double var , var , var , var , var , var ; 
 double var , var , var ; 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = call_func ( call_func ( var - var , nums ) + call_func ( var - var , nums ) ) ; 
 var = call_func ( call_func ( var - var , nums ) + call_func ( var - var , nums ) ) ; 
 var = call_func ( call_func ( var - var , nums ) + call_func ( var - var , nums ) ) ; 
 if ( var + var > var & & var + var > var & & var + var > var ) { 
 var = ( var + var + var ) / nums ; 
 var = call_func ( var * ( var - var ) * ( var - var ) * ( var - var ) ) ; 
 var = nums * var ; 
 printf ( words , var , var ) ; 
 } 
 else { 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 while ( var > nums ) { 
 if ( var % nums = = nums ) 
 var = var + var ; 
 scanf ( words , & var ) ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double call_func ( data_type var ) ; 
 int func ( ) 
 { 
 double var ; 
 double var ; 
 double ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 = nums ; 
 while ( func ( struct_name ) >= nums . nums ) { 
 var + = ; 
 var + + ; 
 = call_func ( var , var ) / call_func ( var ) ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type var ) 
 { 
 double var ; 
 int var ; 
 var = nums ; 
 if ( var = = nums | | var = = nums ) { 
 return var ; 
 } 
 else { 
 for ( var = nums ; var <= var ; var + + ) { 
 var * = var ; 
 } 
 return var ; 
 } 
 } 
 int func ( ) 
 { 
 int var ; 
 int var ; 
 double var , var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 var = nums ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var + = var / var ; 
 var = var ; 
 var = var + var ; 
 var = var ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 int var ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = nums ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = var + var * nums ; 
 var + = var ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 int var , var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums * var ; 
 var = nums ; 
 for ( var = nums ; var <= var / nums ; var + + ) { 
 for ( var = nums ; var <= var / nums ; var + + ) { 
 for ( var = nums ; var <= var - nums * var - nums * var ; var + + ) { 
 if ( nums * var + nums * var + var = = var ) { 
 printf ( words , var , var , var ) ; 
 var + + ; 
 } 
 } 
 } 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 int var , var , var ; 
 int ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums * call_func ( nums , var - nums ) ; var < nums * call_func ( nums , var ) ; var + + ) { 
 var = nums ; 
 var = var ; 
 for ( var = nums ; var <= var ; var + + ) { 
 = var % nums ; 
 var + = call_func ( struct_name , nums ) ; 
 var = var / nums ; 
 } 
 if ( var = = var ) { 
 printf ( words , var ) ; 
 } 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = var * var ; 
 do { 
 var = var % var ; 
 var = var ; 
 var = var ; 
 } while ( var ! = nums ) ; 
 printf ( words , var ) ; 
 printf ( words , var / var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 double var ; 
 double var ; 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = var ; 
 var / = nums ; 
 for ( var = nums ; var <= var - nums ; var + + ) { 
 var + = var * nums ; 
 var / = nums ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + = nums ) { 
 for ( var = nums ; var <= var - var ; var + + ) { 
 printf ( words ) ; 
 } 
 for ( var = nums ; var <= var ; var + + ) { 
 printf ( words ) ; 
 } 
 call_func ( words ) ; 
 } 
 for ( var = nums ; var < var ; var + = nums ) { 
 for ( var = nums ; var <= var + nums ; var + + ) { 
 printf ( words ) ; 
 } 
 for ( var = nums ; var <= var - var - nums ; var + + ) { 
 printf ( words ) ; 
 } 
 call_func ( words ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 int var ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 for ( var = nums ; var <= var - nums ; var + + ) { 
 var = ( var + nums ) * nums ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var , var ; 
 int var ; 
 int var ; 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 var = nums ; 
 var = nums ; 
 var = nums ; 
 var = nums ; 
 while ( var < var ) { 
 var = var + var + var ; 
 var = var ; 
 var = var ; 
 var = var ; 
 var = var + var ; 
 var = var ; 
 var + + ; 
 } 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , call_func ( var ) ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var ; 
 if ( var > nums ) 
 var = nums ; 
 else if ( var = = nums ) 
 var = nums ; 
 else 
 var = - nums ; 
 return var ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 int var ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( var > nums ) { 
 if ( call_func ( var ) ) 
 var + = var ; 
 scanf ( words , & var ) ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 if ( var % nums ! = nums ) 
 return nums ; 
 else 
 return nums ; 
 } 
 double call_func ( data_type var , data_type var , data_type var , data_type var ) ; 
 int func ( ) 
 { 
 double var , var , var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = call_func ( var , var , var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 double func ( data_type var , data_type var , data_type var , data_type var ) 
 { 
 double var ; 
 var = call_func ( call_func ( var - var , nums ) + call_func ( var - var , nums ) ) ; 
 return var ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var , var ; 
 int var ; 
 int var ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 var = nums ; 
 for ( var = var ; var <= var ; var + + ) { 
 if ( func ( var ) ) { 
 var = var + var ; 
 var + + ; 
 } 
 } 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 double var ; 
 int var ; 
 var = call_func ( var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 if ( var % var = = nums ) 
 break ; 
 } 
 if ( var > var & & var ! = nums & & var ! = nums ) 
 return nums ; 
 return nums ; 
 } 
 int call_func ( data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , call_func ( var , var ) ) ; 
 return nums ; 
 } 
 int func ( data_type var , data_type var ) 
 { 
 int var ; 
 int var ; 
 int var ; 
 var = nums ; 
 do { 
 var = var % nums ; 
 if ( var = = var ) { 
 var + + ; 
 } 
 var = var / nums ; 
 } while ( var ! = nums ) ; 
 return var ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( ) 
 { 
 int var , var ; 
 int var ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = var ; var <= var ; var + + ) { 
 var = call_func ( var ) ; 
 if ( var = = var ) { 
 printf ( words , var ) ; 
 } 
 } 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var ; 
 int var ; 
 var = nums ; 
 do { 
 var = var % nums ; 
 var = var + call_func ( var , nums ) ; 
 var = var / nums ; 
 } while ( var ! = nums ) ; 
 return var ; 
 } 
 double call_func ( data_type var , data_type var ) ; 
 double call_func ( data_type var ) ; 
 int func ( ) 
 { 
 double var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , call_func ( var , var ) ) ; 
 return nums ; 
 } 
 double func ( data_type var , data_type var ) 
 { 
 int var ; 
 int var ; 
 double var ; 
 double ; 
 double var ; 
 var = nums ; 
 var = nums ; 
 var = nums ; 
 var = call_func ( var ) ; 
 = nums . nums * var * call_func ( var , var ) / var ; 
 while ( func ( struct_name ) >= var ) { 
 var = var + ; 
 var = - var ; 
 var + = nums ; 
 var = call_func ( var ) ; 
 = nums . nums * var * call_func ( var , var ) / var ; 
 } 
 return var ; 
 } 
 double func ( data_type var ) 
 { 
 int var ; 
 double var ; 
 var = nums ; 
 if ( var = = nums ) 
 return nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 var * = var ; 
 return var ; 
 } 
 int func ( ) 
 { 
 char var ; 
 int var ; 
 int var ; 
 int var ; 
 int var ; 
 printf ( words ) ; 
 var = var = var = var = nums ; 
 while ( ( var = func ( ) ) ! = words ) { 
 if ( var >= words & & var <= words ) 
 var + + ; 
 else if ( var >= words & & var <= words ) 
 var + + ; 
 else if ( var = words ) 
 var + + ; 
 else 
 var + + ; 
 } 
 printf ( words , var , var , var , var ) ; 
 return nums ; 
 } 
 int call_func ( data_type var , data_type var ) ; 
 int func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , call_func ( var , var ) ) ; 
 return nums ; 
 } 
 int func ( data_type var , data_type var ) 
 { 
 int var ; 
 int var ; 
 int var ; 
 var = nums ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = var + var * nums ; 
 var + = var ; 
 } 
 return var ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( ) 
 { 
 int var , var ; 
 int var ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 for ( var = var ; var <= var ; var + + ) { 
 var = call_func ( var ) ; 
 if ( var = = var ) 
 printf ( words , var ) ; 
 } 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var ; 
 int var ; 
 var = nums ; 
 for ( var = nums ; var <= var / nums ; var + + ) { 
 if ( var % var = = nums ) 
 var + = var ; 
 } 
 return var ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( ) 
 { 
 int var , var ; 
 int var ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = nums ; 
 do { 
 var = call_func ( var ) ; 
 if ( var >= var & & var <= var ) 
 printf ( words , var ) ; 
 var + + ; 
 } while ( var <= var ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var , var ; 
 int var ; 
 int var ; 
 var = nums ; 
 var = nums ; 
 if ( var = = nums | | var = = nums ) 
 return nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = var ; 
 var = var + var ; 
 var = var ; 
 } 
 return var ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( ) 
 { 
 int var , var , var ; 
 int var ; 
 int var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + = nums ) { 
 for ( var = nums ; var <= var ; var + + ) { 
 for ( var = nums ; var <= var ; var + + ) { 
 if ( func ( var ) + call_func ( var ) = = var ) { 
 printf ( words , call_func ( var ) , call_func ( var ) , var ) ; 
 var + + ; 
 if ( var % nums = = nums ) 
 call_func ( words ) ; 
 goto var ; 
 } 
 } 
 } 
 var : 
 var = var ; 
 } 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var ; 
 int var ; 
 int var ; 
 if ( var = = nums ) 
 return nums ; 
 var = nums ; 
 var = nums ; 
 while ( var ! = var ) { 
 var + + ; 
 for ( var = nums ; var <= var / nums ; var + + ) { 
 if ( var % var = = nums ) { 
 break ; 
 } 
 } 
 if ( var > var / nums ) { 
 var + + ; 
 } 
 } 
 return var ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var ) ; 
 call_func ( words ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var ; 
 printf ( words ) ; 
 while ( var ! = nums ) { 
 var = var % nums ; 
 var = var / nums ; 
 printf ( words , var ) ; 
 } 
 } 
 int func ( ) 
 { 
 char var , var ; 
 int var ; 
 printf ( words ) ; 
 var = nums ; 
 var = call_func ( ) ; 
 while ( var ! = words & & var ! = words ) { 
 var = var ; 
 var = call_func ( ) ; 
 if ( var ! = words & & var = = words ) { 
 var + + ; 
 } 
 } 
 printf ( words , var + nums ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 int var , var , , var ; 
 int var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 for ( var = nums ; var < var - nums ; var + + ) { 
 var = var ; 
 for ( var = var + nums ; var < var ; var + + ) { 
 if ( var [ var ] > var [ var ] ) 
 var = var ; 
 } 
 = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 int var ; 
 int var , var ; 
 int var [ nums ] ; 
 int var [ nums ] = { nums } ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 call_func ( words ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 do { 
 var = var [ var ] % nums ; 
 var [ var ] = var [ var ] / nums ; 
 var [ var ] + + ; 
 } while ( var [ var ] ! = nums ) ; 
 } 
 var = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 if ( var [ var ] < var [ var ] ) 
 var = var ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 if ( var [ var ] = = var [ var ] ) 
 printf ( words , var , var [ var ] ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 int var ; 
 int var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] [ var ] ) ; 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] [ var ] ! = nums ) { 
 var = nums ; 
 break ; 
 } 
 if ( var ) 
 break ; 
 } 
 if ( var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 int var , var ; 
 int var ; 
 int var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] [ var ] ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 var + = var [ var ] [ var ] ; 
 printf ( words , var , var ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 int var , var , var , var ; 
 int var ; 
 int var , var ; 
 int var [ nums ] [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] [ var ] ) ; 
 var = nums ; 
 while ( var < var ) { 
 var = nums ; 
 var = nums ; 
 for ( var = var ; var < var ; var + + ) { 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] [ var ] > var [ var ] [ var ] ) 
 var = var ; 
 break ; 
 } 
 for ( var = nums ; var < var ; var + + ) { 
 if ( var [ var ] [ var ] > var [ var ] [ var ] ) { 
 var = nums ; 
 break ; 
 } 
 } 
 if ( var ) 
 printf ( words , var [ var ] [ var ] ) ; 
 var + + ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 int var ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 var = nums ; 
 while ( ( var [ var ] = call_func ( ) ) ! = words ) 
 var + + ; 
 var [ var ] = words ; 
 var = nums ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 if ( var [ var ] > words & & var [ var ] <= words ) 
 if ( var [ var ] ! = words & & var [ var ] ! = words & & var [ var ] ! = words & & var [ var ] ! = words ) 
 var + + ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 var = nums ; 
 while ( ( var [ var ] = call_func ( ) ) ! = words ) 
 var + + ; 
 var [ var ] = words ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 if ( var [ var ] >= words & & var [ var ] <= words ) 
 var [ var ] = words - ( var [ var ] - words ) ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 call_func ( var [ var ] ) ; 
 call_func ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 char var [ nums ] , var [ nums ] ; 
 double var ; 
 printf ( words ) ; 
 var = nums ; 
 while ( ( var [ var ] = call_func ( ) ) ! = words ) 
 var + + ; 
 var [ var ] = words ; 
 var = nums ; 
 if ( var [ nums ] = = words ) 
 var = - nums ; 
 var = nums ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 if ( var [ var ] >= words & & var [ var ] <= words ) { 
 var [ var ] = var [ var ] ; 
 var + + ; 
 } 
 else if ( var [ var ] >= words & & var [ var ] <= words | | var [ var ] >= words & & var [ var ] <= words ) { 
 var [ var ] = var [ var ] ; 
 var + + ; 
 } 
 var [ var ] = words ; 
 var = nums ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) { 
 if ( var [ var ] >= words & & var [ var ] <= words ) 
 var = var * nums + var [ var ] - words ; 
 else if ( var [ var ] >= words & & var [ var ] <= words ) 
 var = var * nums + var [ var ] - words + nums ; 
 else if ( var [ var ] >= words & & var [ var ] <= words ) 
 var = var * nums + var [ var ] - words + nums ; 
 } 
 printf ( words , var * var ) ; 
 return nums ; 
 } 
 int call_func ( data_type var [ ] , data_type var , data_type var ) ; 
 int func ( ) 
 { 
 int var , var , * var ; 
 int var ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = ( int * ) call_func ( var , sizeof ( data_type ) ) ; 
 if ( var = = NULL ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 scanf ( words , var + var ) ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var , var , var ) ; 
 if ( var ! = - nums ) 
 printf ( words , var ) ; 
 else 
 printf ( words ) ; 
 free ( var ) ; 
 return nums ; 
 } 
 int func ( data_type var [ ] , data_type var , data_type var ) 
 { 
 int var ; 
 int var ; 
 var = - nums ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] = = var ) { 
 var = var ; 
 break ; 
 } 
 return var ; 
 } 
 void call_func ( data_type var [ ] , data_type var , data_type var ) ; 
 int func ( ) 
 { 
 int var , var ; 
 int * var ; 
 int ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = ( int * ) call_func ( var , sizeof ( data_type ) ) ; 
 if ( var = = NULL ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , var + var ) ; 
 call_func ( var , var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , * ( var + var ) ) ; 
 free ( var ) ; 
 printf ( words ) ; 
 { 
 int var [ nums ] ; 
 int * var = var ; 
 printf ( words , sizeof ( var ) ) ; 
 printf ( words , sizeof ( var [ nums ] ) ) ; 
 printf ( words , sizeof ( var ) / sizeof ( var [ nums ] ) ) ; 
 printf ( words , sizeof ( var ) ) ; 
 printf ( words , sizeof ( * var ) ) ; 
 printf ( words , sizeof ( var ) ) ; 
 printf ( words , sizeof ( * var ) ) ; 
 printf ( words , sizeof ( var ) / sizeof ( * var ) ) ; 
 printf ( words , sizeof ( int ) ) ; 
 } 
 return nums ; 
 } 
 void func ( data_type var [ ] , data_type var , data_type var ) 
 { 
 int var [ var ] ; 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 var [ ( var + var ) % var ] = var [ var ] ; 
 for ( var = nums ; var < var ; var + + ) 
 var [ var ] = var [ var ] ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 int * var ; 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = ( int * ) call_func ( var , sizeof ( data_type ) ) ; 
 if ( var = = NULL ) { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 * ( var + var ) = var + nums ; 
 var = nums ; 
 var = nums ; 
 do { 
 if ( var = = var ) { 
 printf ( words , var ) ; 
 var = nums ; 
 var - - ; 
 var + + ; 
 } 
 var + + ; 
 var + + ; 
 if ( var = = var ) 
 var = nums ; 
 } while ( var > nums ) ; 
 free ( var ) ; 
 return nums ; 
 } 
 void call_func ( data_type * struct_name , data_type * var , data_type var ) ; 
 int func ( ) 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 
 printf ( words ) ; 
 gets ( var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 
 call_func ( var , var , var ) ; 
 call_func ( var ) ; 
 
 return nums ; 
 } 
 void func ( data_type * struct_name , data_type * var , data_type var ) 
 { 
 
 int var ; 
 
 for ( var = var ; * ( var + var ) ! = words ; var + + ) { 
 * ( + var - var ) = * ( var + var ) ; 
 } 
 * ( + var - var ) = words ; 
 } 
 int func ( ) 
 { 
 char var [ nums ] ; 
 char var ; 
 int var ; 
 printf ( words ) ; 
 gets ( var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 if ( var [ var ] = = var ) 
 var [ var ] = words ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 if ( var [ var ] ! = words ) 
 printf ( words , var [ var ] ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 char var [ nums ] [ nums ] ; 
 char var [ nums ] ; 
 int var = nums ; 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 gets ( var [ var ] ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = var + nums ; var < var ; var + + ) { 
 if ( strcmp ( var [ var ] , var [ var ] ) > nums ) { 
 call_func ( var , var [ var ] ) ; 
 call_func ( var [ var ] , var [ var ] ) ; 
 call_func ( var [ var ] , var ) ; 
 } 
 } 
 call_func ( words ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 call_func ( var [ var ] ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 char var [ nums ] ; 
 int var , var , var ; 
 printf ( words ) ; 
 gets ( var ) ; 
 var = call_func ( var ) ; 
 var = nums ; 
 var = var - nums ; 
 while ( var < var ) { 
 if ( var [ var ] ! = var [ var ] ) 
 break ; 
 var + + ; 
 var - - ; 
 } 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 if ( var >= var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var = nums , var = nums ; 
 int var = nums ; 
 int var = nums ; 
 int var = nums ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 for ( int var = nums ; var [ var ] ! = words ; var + + ) { 
 if ( var [ var ] >= words & & var [ var ] <= words ) 
 var + + ; 
 else if ( var [ var ] >= words & & var [ var ] <= words ) 
 var + + ; 
 else if ( var [ var ] >= words & & var [ var ] <= words ) 
 var + + ; 
 else if ( var [ var ] = = words ) 
 var + + ; 
 else 
 var + + ; 
 } 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 float * var ; 
 int var ; 
 double var = nums ; 
 int var , var ; 
 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 var = ( float * ) call_func ( var , sizeof ( data_type ) ) ; 
 if ( var = = NULL ) 
 call_func ( nums ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 scanf ( words , var + var ) ; 
 var + = * ( var + var ) ; 
 } 
 var = var / var ; 
 var = var = nums ; 
 for ( var = nums ; var < var ; var + + ) { 
 if ( * ( var + var ) > * ( var + var ) ) 
 var = var ; 
 if ( * ( var + var ) < * ( var + var ) ) 
 var = var ; 
 } 
 printf ( words , var ) ; 
 printf ( words , * ( var + var ) ) ; 
 printf ( words , * ( var + var ) ) ; 
 free ( var ) ; 
 
 return nums ; 
 } 
 struct { 
 int var ; 
 int var ; 
 int var ; 
 } ; 
 int func ( ) 
 { 
 int var ; 
 int var , var ; 
 struct struct_name struct_var ; 
 printf ( words ) ; 
 scanf ( words , & . var , & . var , & . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 . var % = nums ; 
 . var % = nums ; 
 . var % = nums ; 
 var = var / nums ; 
 var = var / nums ; 
 if ( . var + var % nums >= nums ) { 
 var + + ; 
 . var = . var + var % nums - nums ; 
 } 
 else { 
 . var = . var + var % nums ; 
 } 
 if ( . var + var % nums >= nums ) { 
 var + + ; 
 . var = . var + var % nums - nums ; 
 } 
 else { 
 . var = . var + var % nums ; 
 } 
 . var = ( . var + var ) % nums ; 
 printf ( words , var ) ; 
 printf ( words , . var , . var , . var ) ; 
 return nums ; 
 } 
 struct { 
 double var ; 
 double var ; 
 double var ; 
 double var ; 
 } ; 
 int func ( ) 
 { 
 struct struct_name struct_var ; 
 double var ; 
 double var ; 
 char var , var ; 
 printf ( words ) ; 
 scanf ( words , & var . var , & var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var . var , & var . var ) ; 
 var = var . var * var . var - var . var * var . var ; 
 var = var . var * var . var + var . var * var . var ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 struct { 
 double var , var ; 
 double var , var ; 
 } ; 
 struct { 
 struct struct_name struct_var , var ; 
 double var ; 
 double var ; 
 } ; 
 int func ( ) 
 { 
 struct struct_name struct_var ; 
 printf ( words ) ; 
 scanf ( words , & var . var . var , & var . var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var . var . var , & var . var . var ) ; 
 var . var = var . var . var + var . var . var ; 
 var . var = var . var . var + var . var . var ; 
 printf ( words , var . var , var . var ) ; 
 return nums ; 
 } 
 struct { 
 int var ; 
 int var ; 
 int var ; 
 } ; 
 struct { 
 char var [ nums ] ; 
 struct struct_name struct_var ; 
 double var ; 
 } ; 
 int func ( ) 
 { 
 struct struct_name struct_var [ nums ] , var ; 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var . var , & var [ var ] . var . var , 
 & var [ var ] . var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = var + nums ; var < var ; var + + ) { 
 if ( var [ var ] . var . var > var [ var ] . var . var ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 } 
 } 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var - var ; var + + ) { 
 if ( var [ var ] . var . var > var [ var + nums ] . var . var 
 & & var [ var ] . var . var = = var [ var ] . var . var ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var + nums ] ; 
 var [ var + nums ] = var ; 
 } 
 } 
 } 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = var + nums ; var < var ; var + + ) { 
 if ( var [ var ] . var . var > var [ var ] . var . var 
 & & var [ var ] . var . var = = var [ var + nums ] . var . var 
 & & var [ var ] . var . var = = var [ var ] . var . var ) { 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 } 
 } 
 printf ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words , var [ var ] . var ) ; 
 printf ( words , var [ var ] . var . var , var [ var ] . var . var , 
 var [ var ] . var . var ) ; 
 printf ( words , var [ var ] . var ) ; 
 } 
 
 return nums ; 
 } 
 struct { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 char var ; 
 } ; 
 int func ( ) 
 { 
 struct struct_name struct_var [ nums ] ; 
 int var , var ; 
 int var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words ) ; 
 scanf ( words , [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & [ var ] . var ) ; 
 if ( [ var ] . var >= nums ) 
 [ var ] . var = words ; 
 else if ( [ var ] . var >= nums ) 
 [ var ] . var = words ; 
 else if ( [ var ] . var >= nums ) 
 [ var ] . var = words ; 
 else { 
 [ var ] . var = words ; 
 var + + ; 
 } 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 printf ( words , [ var ] . var , [ var ] . var ) ; 
 printf ( words , [ var ] . var , [ var ] . var ) ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int call_func ( struct struct_name * var ) ; 
 struct { 
 int var ; 
 char var [ nums ] ; 
 int var , var , var ; 
 double var ; 
 } ; 
 int func ( ) 
 { 
 int var , var , var , var , var , var ; 
 struct struct_name struct_var [ nums ] ; 
 var = call_func ( struct_name ) ; 
 printf ( words ) ; 
 printf ( words , [ var ] . var , [ var ] . var , 
 [ var ] . var , [ var ] . var ) ; 
 return nums ; 
 } 
 int func ( struct struct_name * var ) 
 { 
 int var = nums ; 
 printf ( words , var + nums ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 return nums ; 
 } 
 void call_func ( data_type var , data_type * var , data_type * var ) ; 
 int func ( ) 
 { 
 double var ; 
 int var = nums ; 
 double var = nums ; 
 printf ( words , & var ) ; 
 scanf ( words , & var ) ; 
 call_func ( var , & var , & var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 void func ( data_type var , data_type * var , data_type * var ) 
 { 
 * var = ( int ) var ; 
 * var = var - * var ; 
 } 
 int func ( ) 
 { 
 int var [ nums ] , var [ nums ] , * var , * var , var ; 
 var = var ; 
 var = var ; 
 for ( var = nums ; var < nums ; var + + , var + + , var + + ) 
 { 
 * var = var ; 
 * var = nums * var ; 
 printf ( words , * var , * var ) ; 
 } 
 var = & var [ nums ] ; 
 var = & var [ nums ] ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 * var = * var + var ; 
 * var = * var + var ; 
 printf ( words , * var + + , * var + + ) ; 
 } 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var ; 
 int var [ nums ] [ nums ] ; 
 int var , var ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 var [ var ] [ var ] = var - var ; 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 var var var ; 
 int func ( ) 
 { 
 int var [ nums ] ; 
 int var , var , var ; 
 int var ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 
 for ( var = nums ; var < var ; var + + ) { 
 var = var [ var ] ; 
 var = var - nums ; 
 while ( ( var >= nums ) & & ( var < var [ var ] ) ) { 
 var [ var + nums ] = var [ var ] ; 
 var - - ; 
 } 
 var [ var + nums ] = var ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 int var ; 
 int var [ nums ] ; 
 int var ; 
 for ( var = nums ; var < nums ; var + + ) 
 var [ var ] = var + nums ; 
 var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var < var ) 
 for ( var = var - nums ; var >= var ; var - - ) 
 var [ var + nums ] = var [ var ] ; 
 else 
 var = var ; 
 var [ var ] = var ; 
 var + + ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 void call_func ( data_type * var , data_type var , data_type * var , data_type * var ) ; 
 int func ( ) 
 { 
 int var , var , var [ nums ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , } ; 
 call_func ( var , sizeof ( var ) / sizeof ( var [ nums ] ) , & var , & var ) ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 void func ( data_type * var , data_type var , data_type * var , data_type * var ) 
 { 
 int var ; 
 * var = * var = nums ; 
 for ( var = nums ; var < var ; var + + ) { 
 if ( var [ var ] > var [ * var ] ) 
 * var = var ; 
 if ( var [ var ] < var [ * var ] ) 
 * var = var ; 
 } 
 } 
 int func ( ) 
 { 
 char [ nums ] , var , * var , * var ; 
 int var , var , var ; 
 
 gets ( ) ; 
 var = ; 
 while ( * var = = words ) 
 var + + ; 
 var = call_func ( struct_name ) ; 
 var = & [ var - nums ] ; 
 while ( * var = = words ) 
 var - - ; 
 while ( var < var & & * var = = * var ) { 
 var + + ; 
 var - - ; 
 } 
 if ( var < var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 
 return nums ; 
 } 
 struct { 
 int var ; 
 char var [ nums ] ; 
 int var ; 
 } ; 
 struct struct_name struct_var [ nums ] ; 
 int func ( ) 
 { 
 int var , var = nums ; 
 for ( var = nums ; var < nums ; var + + ) { 
 scanf ( words , & var [ var ] . var , var [ var ] . var , & var [ var ] . var ) ; 
 var + = var [ var ] . var ; 
 } 
 printf ( words , var / nums ) ; 
 return nums ; 
 } 
 struct { 
 int var ; 
 float var ; 
 char * var ; 
 } ; 
 int func ( ) 
 { 
 struct struct_name struct_var = { nums , nums . nums , words } ; 
 struct struct_name * struct_var = & var ; 
 printf ( words , var . var , ( * var ) . var , var - > var ) ; 
 
 return nums ; 
 } 
 var var var ; 
 int func ( ) 
 { 
 int var [ nums ] [ nums ] ; 
 int var [ nums ] [ nums ] ; 
 int var [ nums ] [ nums ] ; 
 int var , var , var , var , var , var ; 
 var < < words < < var ; 
 var > > var > > var ; 
 var < < words < < var ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 var > > var [ var ] [ var ] ; 
 var < < words < < var ; 
 var > > var > > var ; 
 var < < words < < var ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 var > > var [ var ] [ var ] ; 
 memset ( var , nums , sizeof ( var ) ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var ; var + + ) { 
 var [ var ] [ var ] + = var [ var ] [ var ] * var [ var ] [ var ] ; 
 } 
 var < < var [ var ] [ var ] < < words ; 
 } 
 var < < var ; 
 } 
 return nums ; 
 } 
 var var var ; 
 int func ( ) 
 { 
 int var [ nums ] [ nums ] ; 
 int var [ nums ] [ nums ] ; 
 int var [ nums ] [ nums ] ; 
 int var , var , var , var , var ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] [ var ] ) ; 
 printf ( words , var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 scanf ( words , & var [ var ] [ var ] ) ; 
 memset ( var , nums , sizeof ( var ) ) ; 
 for ( var = nums ; var < var ; var + + ) { 
 for ( var = nums ; var < var ; var + + ) { 
 var [ var ] [ var ] = var [ var ] [ var ] + var [ var ] [ var ] ; 
 printf ( words , var [ var ] [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 return nums ; 
 } 
 int call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var ; 
 scanf ( words , & var ) ; 
 printf ( words , call_func ( var ) ) ; 
 return nums ; 
 } 
 int func ( data_type var ) 
 { 
 int var , var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = var * var ; 
 } 
 return var ; 
 } 
 int func ( ) 
 { 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var <= nums ) { 
 var = nums * var / nums ; 
 } 
 else { 
 var = nums . nums * var - nums . nums ; 
 } 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( words ) { 
 printf ( words ) ; 
 for ( var = var ; var <= var ; var + + ) { 
 var = ( nums . nums / nums . nums ) * ( var - nums ) ; 
 printf ( words , var , var ) ; 
 } 
 } 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var , var , var ; 
 double , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 var = nums ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 = var * nums . nums / var ; 
 var = var + ; 
 var = - var ; 
 var = var + nums ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( ) 
 { 
 int var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = var * var ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = call_func ( nums , var ) ; 
 printf ( words , var , var ) ; 
 } 
 return nums ; 
 } 
 double call_func ( data_type var ) ; 
 int func ( void ) 
 { 
 int var , var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = call_func ( var ) ; 
 printf ( words , var , var ) ; 
 } 
 return nums ; 
 } 
 double func ( data_type var ) 
 { 
 int var ; 
 double var ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) { 
 var = var * var ; 
 } 
 return var ; 
 } 
 int func ( ) 
 { 
 int var = nums ; 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = var ) 
 printf ( words ) ; 
 else 
 if ( var > var ) 
 printf ( words ) ; 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 func ( ) 
 { 
 printf ( words , nums + nums ) ; 
 } 
 func ( ) 
 { 
 float var , var , var ; 
 float , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 = nums . nums / nums * ( var + var + var ) ; 
 var = call_func ( struct_name * ( struct_name - var ) * ( struct_name - var ) * ( struct_name - var ) ) ; 
 printf ( words , var ) ; 
 } 
 #define var nums . nums 
 func ( ) 
 { 
 float var ; 
 float var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = nums * var * var ; 
 var = var * var * var , 
 printf ( words , var , var ) ; 
 } 
 func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( ( var % nums = = nums & & var % nums ! = nums ) | | ( var % nums = = nums ) ) 
 { 
 var = nums ; 
 } 
 else 
 { 
 var = nums ; 
 } 
 if ( var ) 
 { 
 printf ( words , var ) ; 
 } 
 else 
 { 
 printf ( words , var ) ; 
 } 
 } 
 func ( ) 
 { 
 char var ; 
 var = call_func ( ) ; 
 if ( ( var >= words & & var <= words ) | | ( var >= words & & var <= words ) ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var <= words & & var >= words ) 
 { 
 printf ( words ) ; 
 } 
 else if ( var = = words ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 func ( ) 
 { 
 int var , var ; 
 float var = nums , var ; 
 var = nums ; 
 var = nums ; 
 while ( var < var ) 
 { 
 var = nums . nums / nums * ( var - nums ) ; 
 printf ( words , var , var ) ; 
 var = var + var ; 
 } 
 } 
 func ( ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var > nums ) 
 { 
 if ( var % nums = = nums ) 
 { 
 printf ( words , var ) ; 
 } 
 else 
 { 
 printf ( words , var ) ; 
 } 
 } 
 else if ( var < nums ) 
 { 
 if ( var % nums = = nums ) 
 { 
 printf ( words , var ) ; 
 } 
 else 
 { 
 printf ( words , var ) ; 
 } 
 } 
 else 
 { 
 printf ( words , var ) ; 
 } 
 } 
 func ( ) 
 { 
 int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var > nums ) 
 { 
 printf ( words , var ) ; 
 } 
 else if ( var < nums ) 
 { 
 printf ( words , var ) ; 
 } 
 else 
 { 
 printf ( words , var ) ; 
 } 
 if ( var % nums = = nums ) 
 { 
 printf ( words , var ) ; 
 } 
 else 
 { 
 printf ( words , var ) ; 
 } 
 } 
 func ( ) 
 { 
 int var ; 
 double var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var > nums ) 
 { 
 var = call_func ( - var ) ; 
 } 
 else if ( var = = nums ) 
 { 
 var = nums ; 
 } 
 else 
 { 
 var = - call_func ( var ) ; 
 } 
 printf ( words , var ) ; 
 } 
 #define var var - nums 
 func ( ) 
 { 
 float var , var , var ; 
 int var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var , & var , & var ) ; 
 if ( ( var + var ) > var & & ( ( var + var ) > var ) & & ( ( var + var ) > var ) ) 
 { 
 if ( func ( var - var ) <= var | | call_func ( var - var ) <= var 
 | | call_func ( var - var ) <= var ) 
 { 
 printf ( words ) ; 
 var = nums ; 
 } 
 if ( func ( var * var + var * var - var * var ) <= var 
 | | call_func ( var * var + var * var - var * var ) <= var 
 | | call_func ( var * var + var * var - var * var ) <= var ) 
 { 
 printf ( words ) ; 
 var = nums ; 
 } 
 if ( var ) 
 { 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 func ( ) 
 { 
 char var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 var = call_func ( ) ; 
 switch ( var ) 
 { 
 case words : 
 printf ( words ) ; 
 break ; 
 case words : 
 printf ( words ) ; 
 break ; 
 case words : 
 printf ( words ) ; 
 break ; 
 default : 
 printf ( words ) ; 
 } 
 } 
 func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 switch ( var ) 
 { 
 case nums : 
 case nums : 
 case nums : 
 case nums : 
 case nums : 
 case nums : 
 case nums : 
 printf ( words ) ; 
 break ; 
 case nums : 
 if ( ( var % nums = = nums & & var % nums ! = nums ) | | ( var % nums = = nums ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 break ; 
 case nums : 
 case nums : 
 case nums : 
 case nums : 
 printf ( words ) ; 
 break ; 
 default : 
 printf ( words ) ; 
 } 
 } 
 func ( ) 
 { 
 int var , var = nums ; 
 for ( var = nums ; var <= nums ; var = var + nums ) 
 { 
 var = var + var ; 
 } 
 printf ( words , var ) ; 
 } 
 func ( ) 
 { 
 int var = nums , var = nums ; 
 while ( var <= nums ) 
 { 
 var = var + var ; 
 var = var + nums ; 
 } 
 printf ( words , var ) ; 
 } 
 func ( ) 
 { 
 var var ; 
 var var , var = nums ; 
 for ( var = nums ; var <= nums ; var = var + nums ) 
 { 
 var = var * ( var + nums ) * ( var + nums ) ; 
 var = var + var ; 
 } 
 printf ( words , var ) ; 
 } 
 func ( ) 
 { 
 var var = nums , var = nums ; 
 int var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 var = var * var ; 
 var = var + var ; 
 } 
 printf ( words , var ) ; 
 } 
 func ( ) 
 { 
 var var , var = nums ; 
 int var , var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var = var * var ; 
 } 
 var = var + var ; 
 } 
 printf ( words , var ) ; 
 } 
 func ( ) 
 { 
 var var = nums , var = nums ; 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var = var * nums + var ; 
 var = var + var ; 
 } 
 printf ( words , var ) ; 
 } 
 func ( ) 
 { 
 double var , var = nums ; 
 int var ; 
 for ( var = nums ; var <= nums ; var = var + nums ) 
 { 
 var = ( double ) ( var * var ) / ( ( var - nums ) * ( var + nums ) ) ; 
 var = var * var ; 
 } 
 printf ( words , nums * var ) ; 
 } 
 func ( ) 
 { 
 double var , var = nums ; 
 int var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 var = ( double ) ( nums * var * nums * var ) / ( ( nums * var - nums ) * ( nums * var + nums ) ) ; 
 var = var * var ; 
 } 
 printf ( words , nums * var ) ; 
 } 
 func ( ) 
 { 
 var = nums , var = nums ; 
 var = nums . nums , var = nums . nums ; 
 var = nums ; 
 for ( var = nums ; call_func ( var ) >= var - nums ; var + + ) 
 { 
 var = var * var ; 
 var = nums . nums / var ; 
 var = var + var ; 
 var + + ; 
 } 
 printf ( words , var , var ) ; 
 } 
 func ( ) 
 { 
 int var = nums ; 
 float var = nums . nums , var = nums , var = nums ; 
 while ( func ( var ) >= var - nums ) 
 { 
 var = var / var ; 
 var = var + var ; 
 var = - var ; 
 var + + ; 
 } 
 printf ( words , var , var ) ; 
 } 
 func ( ) 
 { 
 int var = nums , var = nums ; 
 float var ; 
 double var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var ; 
 var = var ; 
 do 
 { 
 var = - var * var * var / ( ( var + nums ) * ( var + nums ) ) ; 
 var = var + var ; 
 var = var + nums ; 
 var + + ; 
 } while ( call_func ( var ) >= var - nums ) ; 
 printf ( words , var , var ) ; 
 } 
 func ( ) 
 { 
 int var , var , var , var ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 var = var / nums ; 
 var = ( var - var * nums ) / nums ; 
 var = var % nums ; 
 if ( var = = var * var * var + var * var * var + var * var * var ) 
 { 
 printf ( words , var ) ; 
 } 
 } 
 printf ( words ) ; 
 } 
 func ( ) 
 { 
 int var , var , var , var ; 
 printf ( words ) ; 
 for ( var = nums ; var <= nums ; var + + ) 
 for ( var = nums ; var <= nums ; var + + ) 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 if ( var * var * var + var * var * var + var * var * var = = nums * var + nums * var + var ) 
 { 
 printf ( words , nums * var + nums * var + var ) ; 
 } 
 } 
 printf ( words ) ; 
 } 
 func ( ) 
 { 
 int var , var , var , var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var ) ; 
 var = var / nums ; 
 var = ( var - var * nums ) / nums ; 
 var = ( var - var * nums - var * nums ) / nums ; 
 var = var % nums ; 
 printf ( words , var + var + var + var ) ; 
 } 
 func ( ) 
 { 
 int var = nums ; 
 int var = nums ; 
 while ( ! var ) 
 { 
 if ( var % nums = = nums & & var % nums = = nums & & var % nums = = nums & & var % nums = = nums ) 
 { 
 printf ( words , var ) ; 
 var = nums ; 
 } 
 var + + ; 
 } 
 } 
 func ( ) 
 { 
 int var = nums ; 
 while ( nums ) 
 { 
 if ( var % nums = = nums & & var % nums = = nums & & var % nums = = nums & & var % nums = = nums ) 
 { 
 printf ( words , var ) ; 
 break ; 
 } 
 var + + ; 
 } 
 } 
 func ( ) 
 { 
 int var = nums , var = nums ; 
 do { 
 var + + ; 
 var % nums = = nums & & var % nums = = nums & & var % nums = = nums & & var % nums = = nums ; 
 } while ( ! var ) ; 
 printf ( words , var ) ; 
 } 
 func ( ) 
 { 
 int var = nums ; 
 do { 
 var + + ; 
 } while ( ! ( var % nums = = nums & & var % nums = = nums & & var % nums = = nums & & var % nums = = nums ) ) ; 
 printf ( words , var ) ; 
 } 
 func ( ) 
 { 
 int var = nums , var = nums ; 
 while ( ! var ) 
 { 
 if ( var % nums = = nums & & var % nums = = nums & & var % nums = = nums & & var % nums = = nums 
 & & var % nums = = nums ) 
 { 
 printf ( words , var ) ; 
 var = nums ; 
 } 
 var + + ; 
 } 
 } 
 func ( ) 
 { 
 int var = nums ; 
 while ( nums ) 
 { 
 if ( var % nums = = nums & & var % nums = = nums & & var % nums = = nums & & var % nums = = nums & & var % nums = = nums ) 
 { 
 printf ( words , var ) ; 
 break ; 
 } 
 var + + ; 
 } 
 } 
 func ( ) 
 { 
 int var = nums , var = nums ; 
 do { 
 var + + ; 
 var = var % nums = = nums & & var % nums = = nums & & var % nums = = nums & & var % nums = = nums & & var % nums = = nums ; 
 } while ( ! var ) ; 
 printf ( words , var ) ; 
 } 
 func ( ) 
 { 
 int var = nums ; 
 do { 
 var + + ; 
 } while ( ! ( var % nums = = nums & & var % nums = = nums & & var % nums = = nums & & var % nums = = nums & & var % nums = = nums ) ) ; 
 printf ( words , var ) ; 
 } 
 func ( ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 if ( var + var + var = = nums ) 
 { 
 printf ( words , var , var , var ) ; 
 } 
 } 
 } 
 } 
 } 
 func ( ) 
 { 
 int var , var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 var = nums - var ; 
 if ( nums * var + nums * var = = nums ) 
 { 
 printf ( words , var , var ) ; 
 } 
 } 
 } 
 func ( ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 var = nums - var - var ; 
 if ( nums * var + nums * var + var / nums . nums = = nums ) 
 { 
 printf ( words , var , var , var ) ; 
 } 
 } 
 } 
 } 
 func ( ) 
 { 
 int var , var , var , var = nums ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 var = nums - var - var ; 
 if ( nums * var + nums * var + var = = nums ) 
 { 
 var + + ; 
 printf ( words , var , var , var ) ; 
 } 
 } 
 } 
 printf ( words , var ) ; 
 } 
 func ( ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 printf ( words , var ) ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 for ( var = nums ; var <= nums * var - nums ; var + + ) 
 { 
 printf ( words ) ; 
 } 
 for ( var = var ; var < nums ; var + + ) 
 { 
 printf ( words , var * var ) ; 
 } 
 printf ( words ) ; 
 } 
 } 
 func ( ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 for ( var = nums ; var <= nums - var ; var + + ) 
 for ( var = nums ; var <= nums ; var + + ) 
 printf ( words ) ; 
 func ( ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 for ( var = nums ; var <= nums - var ; var + + ) 
 { 
 printf ( words ) ; 
 } 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 } 
 func ( ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 for ( var = nums ; var <= ( nums * var - nums ) ; var + + ) 
 printf ( words ) ; 
 func ( ) 
 { 
 int var , var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 for ( var = nums ; var <= ( nums * var - nums ) ; var + + ) 
 { 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 } 
 func ( ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 for ( var = nums ; var <= nums - var ; var + + ) 
 { 
 printf ( words ) ; 
 } 
 for ( var = nums ; var <= ( nums * var - nums ) ; var + + ) 
 { 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 } 
 } 
 func ( ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 printf ( words , var ) ; 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 printf ( words , var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 printf ( words , call_func ( var * nums + var ) ) ; 
 } 
 printf ( words ) ; 
 } 
 } 
 int func ( data_type var ) 
 { 
 return var * var ; 
 } 
 func ( ) 
 { 
 int var = nums ; 
 var = call_func ( var ) ; 
 for ( ; var < nums ; var + + ) 
 { 
 static int var = nums ; 
 var + = call_func ( var ) ; 
 printf ( words , var ) ; 
 } 
 printf ( words , var ) ; 
 } 
 func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var ) ; 
 if ( var ! = nums ) 
 { 
 printf ( words , var ) ; 
 } 
 else 
 { 
 printf ( words , var ) ; 
 } 
 } 
 int func ( data_type var ) 
 { 
 int var ; 
 if ( var <= nums ) 
 return nums ; 
 for ( var = nums ; var <= call_func ( var ) ; var + + ) 
 { 
 if ( ( var % var ) = = nums ) 
 return nums ; 
 } 
 return nums ; 
 } 
 func ( ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var ) ; 
 if ( var ! = nums ) 
 { 
 printf ( words , var ) ; 
 } 
 else 
 { 
 printf ( words , var ) ; 
 } 
 } 
 int func ( data_type var ) 
 { 
 int var , var = nums ; 
 if ( var <= nums ) 
 var = nums ; 
 for ( var = nums ; var <= call_func ( var ) ; var + + ) 
 { 
 if ( ( var % var ) = = nums ) 
 var = nums ; 
 } 
 return var ; 
 } 
 var var call_func ( var data_type var ) ; 
 func ( ) 
 { 
 var int var , var ; 
 double var ; 
 do { 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 } while ( var < var ) ; 
 var = ( double ) call_func ( var ) / ( call_func ( var ) * call_func ( var - var ) ) ; 
 printf ( words , var ) ; 
 } 
 var var func ( var data_type var ) 
 { 
 var var var , var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 var * = var ; 
 return var ; 
 } 
 int call_func ( data_type var , data_type var ) ; 
 func ( ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 } 
 int func ( data_type var , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( ( var * var ) % var = = nums ) 
 return var * var ; 
 } 
 return var * var ; 
 } 
 int call_func ( data_type var , data_type var ) ; 
 func ( ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 } 
 int func ( data_type var , data_type var ) 
 { 
 int var ; 
 do { 
 var = var % var ; 
 var = var ; 
 var = var ; 
 } while ( var ! = nums ) ; 
 return var ; 
 } 
 int call_func ( data_type var , data_type var ) ; 
 func ( ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 } 
 int func ( data_type var , data_type var ) 
 { 
 if ( var <= nums | | var <= nums ) 
 return - nums ; 
 while ( var ! = var ) 
 { 
 if ( var > var ) 
 { 
 var = var - var ; 
 } 
 else if ( var > var ) 
 { 
 var = var - var ; 
 } 
 } 
 return var ; 
 } 
 int call_func ( data_type var , data_type var ) ; 
 func ( ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 } 
 int func ( data_type var , data_type var ) 
 { 
 int var , var , var ; 
 var = ( int ) call_func ( var - var ) ; 
 for ( var = var ; var > nums ; var - - ) 
 { 
 if ( var <= var ) 
 { 
 if ( var % var = = nums & & var % var = = nums ) 
 { 
 return var ; 
 } 
 } 
 if ( var > var ) 
 { 
 if ( var % var = = nums & & var % var = = nums ) 
 { 
 return var ; 
 } 
 } 
 } 
 return var ; 
 } 
 int func ( data_type var , data_type var ) 
 { 
 static int var = - nums ; 
 static int var = - nums ; 
 static int var ; 
 if ( var < nums | | var < nums ) 
 return - nums ; 
 if ( var ! = var | | var ! = var ) 
 { 
 var = var ; 
 var = var ; 
 var = var > var var var : var ; 
 } 
 while ( var > nums ) 
 { 
 if ( var % var = = nums & & var % var = = nums ) 
 { 
 return var - - ; 
 } 
 var - - ; 
 } 
 return - nums ; 
 } 
 func ( ) 
 { 
 int var [ nums ] [ nums ] , var , var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 var [ var ] [ var ] = ( var / var ) * ( var / var ) ; 
 } 
 } 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 printf ( words , var [ var ] [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 } 
 void func ( data_type var ) 
 { 
 var = nums ; 
 } 
 func ( ) 
 { 
 int var = nums ; 
 call_func ( var ) ; 
 printf ( words , var ) ; 
 } 
 void func ( data_type var [ ] ) 
 { 
 int var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 var [ var ] = var ; 
 } 
 } 
 func ( ) 
 { 
 static int var [ ] = { nums , nums , nums , nums } , var ; 
 call_func ( var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 } 
 func ( ) 
 { 
 int var , var , var [ nums ] = { nums } ; 
 call_func ( struct_name ( NULL ) ) ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 var = call_func ( ) % nums + nums ; 
 + + var [ var ] ; 
 } 
 printf ( words , words , words ) ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 printf ( words , var , var [ var ] ) ; 
 } 
 } 
 func ( ) 
 { 
 int var [ nums ] , var , var , var , var , var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 scanf ( words , & var [ var ] ) ; 
 } 
 var = var = var [ nums ] ; 
 var = var = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var [ var ] > var ) 
 { 
 var = var [ var ] ; 
 var = var ; 
 } 
 else if ( var [ var ] < var ) 
 { 
 var = var [ var ] ; 
 var = var ; 
 } 
 } 
 printf ( words , var , var ) ; 
 printf ( words , var , var ) ; 
 } 
 func ( ) 
 { 
 char var [ nums ] ; 
 int var , var ; 
 gets ( var ) ; 
 if ( var [ nums ] ! = words ) 
 { 
 var = nums ; 
 } 
 else 
 { 
 var = nums ; 
 } 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 { 
 if ( var [ var ] ! = words & & var [ var - nums ] = = words ) 
 { 
 var + + ; 
 } 
 } 
 printf ( words , var ) ; 
 } 
 void call_func ( data_type struct_name [ ] , data_type var ) ; 
 func ( ) 
 { 
 char var [ nums ] , var ; 
 printf ( words ) ; 
 gets ( var ) ; 
 printf ( words ) ; 
 var = call_func ( ) ; 
 call_func ( var , var ) ; 
 call_func ( var ) ; 
 } 
 void func ( data_type struct_name [ ] , data_type var ) 
 { 
 int var , var ; 
 for ( var = var = nums ; [ var ] ! = words ; var + + ) 
 { 
 if ( [ var ] ! = var ) 
 { 
 [ var ] = [ var ] ; 
 var + + ; 
 } 
 } 
 [ var ] = words ; 
 } 
 int call_func ( data_type struct_name [ ] , data_type var [ ] ) ; 
 func ( ) 
 { 
 char var [ nums ] , var [ nums ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 printf ( words ) ; 
 gets ( var ) ; 
 if ( func ( var , var ) > nums ) 
 { 
 printf ( words ) ; 
 } 
 else if ( func ( var , var ) < nums ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 int func ( data_type struct_name [ ] , data_type var [ ] ) 
 { 
 int var ; 
 for ( var = nums ; [ var ] = = var [ var ] ; var + + ) 
 { 
 if ( [ var ] = = words ) return nums ; 
 } 
 return ( [ var ] - var [ var ] ) ; 
 } 
 func ( ) 
 { 
 int var , var , var = nums , var = nums ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 scanf ( words , & var ) ; 
 if ( var >= nums ) 
 { 
 var + = var ; 
 var + + ; 
 } 
 } 
 printf ( words , var , var ) ; 
 } 
 #define var nums 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var = var [ nums ] , var = var [ nums ] , var = nums , var = nums ; 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] > var ) 
 { 
 var = var [ var ] ; 
 var = var ; 
 } 
 if ( var [ var ] < var ) 
 { 
 var = var [ var ] ; 
 var = var ; 
 } 
 } 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 func ( ) 
 { 
 int var [ var ] , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] ) ; 
 } 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 #define var nums 
 func ( ) 
 { 
 int var [ var ] [ var ] , var , var , var , var = nums ; 
 var var = nums ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] [ var ] ) ; 
 } 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var = = var | | var + var = = var - nums ) 
 var + = var [ var ] [ var ] ; 
 if ( ( var = = var | | var + var = = var - nums ) & & var % nums = = nums & & var % nums = = nums ) 
 var * = var [ var ] [ var ] ; 
 } 
 } 
 printf ( words , var , var ) ; 
 } 
 #define var nums 
 void call_func ( data_type var [ ] [ var ] , data_type var ) ; 
 void call_func ( data_type var [ ] [ var ] , data_type var ) ; 
 func ( ) 
 { 
 int var [ var ] [ var ] , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 } 
 void func ( data_type var [ ] [ var ] , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var [ var ] [ nums ] = nums ; 
 var [ var ] [ var ] = nums ; 
 } 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 for ( var = nums ; var <= var - nums ; var + + ) 
 { 
 var [ var ] [ var ] = var [ var - nums ] [ var - nums ] + var [ var - nums ] [ var ] ; 
 } 
 } 
 } 
 void func ( data_type var [ ] [ var ] , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 printf ( words , var [ var ] [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 } 
 #define var nums 
 void call_func ( data_type var [ ] [ var ] , data_type var ) ; 
 void call_func ( data_type var [ ] [ var ] , data_type var ) ; 
 func ( ) 
 { 
 int var [ var ] [ var ] , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 } 
 void func ( data_type var [ ] [ var ] , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 if ( var = = nums | | var = = var ) 
 { 
 var [ var ] [ var ] = nums ; 
 } 
 else 
 { 
 var [ var ] [ var ] = var [ var - nums ] [ var - nums ] + var [ var - nums ] [ var ] ; 
 } 
 } 
 } 
 } 
 void func ( data_type var [ ] [ var ] , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 printf ( words , var [ var ] [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 } 
 #define var nums 
 #define var nums 
 func ( ) 
 { 
 int var [ var ] [ var ] = { nums , nums , nums , nums , nums , nums } ; 
 int var , var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var = var [ var ] [ var - nums ] ; 
 for ( var = var - nums ; var >= nums ; var - - ) 
 { 
 var [ var ] [ var + nums ] = var [ var ] [ var ] ; 
 } 
 var [ var ] [ nums ] = var ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 } 
 #define var nums 
 #define var nums 
 void func ( data_type var [ var ] [ var ] ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] [ var ] ) ; 
 } 
 } 
 } 
 void func ( data_type var [ var ] [ var ] , data_type var [ var ] [ var ] , data_type var [ var ] [ var ] ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] [ var ] = var [ var ] [ var ] + var [ var ] [ var ] ; 
 } 
 } 
 } 
 void func ( data_type var [ var ] [ var ] ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 } 
 func ( ) 
 { 
 int var [ var ] [ var ] , var [ var ] [ var ] , var [ var ] [ var ] ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 call_func ( var , var , var ) ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 } 
 #define var nums 
 #define var nums 
 func ( data_type var [ var ] [ var ] , data_type var [ var ] [ var ] , data_type var [ var ] [ var ] ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] [ var ] = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] [ var ] = var [ var ] [ var ] + var [ var ] [ var ] * var [ var ] [ var ] ; 
 } 
 } 
 } 
 } 
 void func ( data_type var [ var ] [ var ] ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 } 
 func ( ) 
 { 
 int var [ var ] [ var ] , var [ var ] [ var ] , var [ var ] [ var ] , var , var ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] [ var ] ) ; 
 } 
 } 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] [ var ] ) ; 
 } 
 } 
 call_func ( var , var , var ) ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 } 
 #define var nums 
 func ( ) 
 { 
 char var [ var ] ; 
 int var , var , var = nums , var = nums , var = nums , var = nums ; 
 printf ( words ) ; 
 gets ( var ) ; 
 for ( var = nums ; var [ var ] ! = words ; var + + ) 
 { 
 if ( var [ var ] >= words & & var [ var ] <= words | | var [ var ] >= words & & var [ var ] <= words ) 
 var + + ; 
 else if ( var [ var ] >= words & & var [ var ] <= words ) 
 var + + ; 
 else if ( var [ var ] = = words ) 
 var + + ; 
 else 
 var + + ; 
 } 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 } 
 #define var nums 
 void call_func ( data_type var [ ] , data_type var [ ] ) ; 
 func ( ) 
 { 
 char var [ var ] , var [ var ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 } 
 void func ( data_type var [ ] , data_type var [ ] ) 
 { 
 int var = nums , var ; 
 var = call_func ( var ) - nums ; var 
 while ( var [ var ] ! = words ) 
 { 
 var [ var ] = var [ var ] ; 
 var + + ; 
 var - - ; 
 } 
 var [ var ] ! = words ; 
 } 
 #define var nums 
 void call_func ( data_type var [ ] ) ; 
 func ( ) 
 { 
 char var [ var ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 call_func ( var ) ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 } 
 void func ( data_type var [ ] ) 
 { 
 int var , var , var ; 
 char var ; 
 var = call_func ( var ) ; 
 for ( var = nums , var = var - nums ; var < var ; var + + , var - - ) 
 { 
 var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 } 
 #define var nums 
 void call_func ( data_type var [ ] , data_type var [ ] ) ; 
 func ( ) 
 { 
 char [ var ] , var [ var ] ; 
 printf ( words ) ; 
 gets ( ) ; 
 printf ( words ) ; 
 gets ( var ) ; 
 call_func ( struct_name , var ) ; 
 printf ( words ) ; 
 call_func ( struct_name ) ; 
 } 
 void func ( data_type var [ ] , data_type var [ ] ) 
 { 
 var int var , var ; 
 var = call_func ( var ) ; 
 for ( var = nums ; var <= call_func ( var ) ; var + + , var + + ) 
 { 
 var [ var ] = var [ var ] ; 
 } 
 } 
 #define var nums 
 void call_func ( data_type var [ ] , data_type var [ ] ) ; 
 func ( ) 
 { 
 char [ var ] , var [ var ] ; 
 printf ( words ) ; 
 gets ( ) ; 
 printf ( words ) ; 
 gets ( var ) ; 
 call_func ( struct_name , var ) ; 
 printf ( words ) ; 
 call_func ( struct_name ) ; 
 } 
 void func ( data_type var [ ] , data_type var [ ] ) 
 { 
 int var = nums , var ; 
 while ( var [ var ] ! = words ) 
 { 
 var + + ; 
 } 
 for ( var = nums ; var [ var ] ! = words ; var + + , var + + ) 
 { 
 var [ var ] = var [ var ] ; 
 } 
 var [ var ] = words ; 
 } 
 func ( ) 
 { 
 static int var [ ] = { nums , nums , nums } ; 
 int , var , * var = NULL ; 
 = nums ; 
 var = var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 = * ( var + var ) ; 
 } 
 printf ( words , ) ; 
 } 
 func ( ) 
 { 
 int var [ ] = { nums , nums , nums , nums , nums } ; 
 int * var = NULL ; 
 var = var ; 
 printf ( words , * var ) ; 
 printf ( words , * ( + + var ) ) ; 
 printf ( words , * + + var ) ; 
 printf ( words , * ( var - - ) ) ; 
 printf ( words , * var + + ) ; 
 printf ( words , * var ) ; 
 printf ( words , + + ( * var ) ) ; 
 printf ( words , * var ) ; 
 } 
 char var [ ] = words ; 
 char * var = words ; 
 func ( ) 
 { 
 int var = nums ; 
 printf ( words , * var , var + nums ) ; 
 while ( func ( * ( var + var ) ) ) 
 { 
 var + + ; 
 } 
 printf ( words , var ) ; 
 while ( - - var ) 
 { 
 call_func ( * ( var + var ) ) ; 
 } 
 printf ( words , & var [ nums ] ) ; 
 } 
 func ( data_type var , data_type * var [ ] ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 } 
 #define var nums 
 var int call_func ( data_type * var ) ; 
 func ( ) 
 { 
 char var [ var ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 printf ( words , call_func ( var ) ) ; 
 } 
 var int func ( data_type * var ) 
 { 
 var int var ; 
 var = nums ; 
 for ( ; * var ! = words ; var + + ) 
 { 
 var + + ; 
 } 
 return var ; 
 } 
 #define var nums 
 var int call_func ( data_type * var ) ; 
 func ( ) 
 { 
 char var [ var ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 printf ( words , call_func ( var ) ) ; 
 } 
 var int func ( data_type struct_name [ ] ) 
 { 
 char * var = ; 
 while ( * var ! = words ) 
 { 
 var + + ; 
 } 
 return var - ; 
 } 
 int call_func ( data_type * var , data_type * var ) ; 
 func ( ) 
 { 
 char var [ nums ] , var [ nums ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 printf ( words ) ; 
 gets ( var ) ; 
 if ( func ( var , var ) > nums ) 
 { 
 printf ( words ) ; 
 } 
 else if ( func ( var , var ) < nums ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 int func ( data_type * var , data_type * var ) 
 { 
 for ( ; * var = = * var ; var + + , var + + ) 
 { 
 if ( * var = = words ) return nums ; 
 } 
 return ( * var - * var ) ; 
 } 
 void call_func ( data_type var , data_type var , data_type * var ) ; 
 func ( ) 
 { 
 int var , var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 call_func ( var , var , & var ) ; 
 printf ( words , var ) ; 
 } 
 void func ( data_type var , data_type var , data_type * var ) 
 { 
 * var = var + var ; 
 } 
 void call_func ( data_type * var [ ] , data_type var ) ; 
 func ( ) 
 { 
 char * var [ ] = { words , words , words , words } ; 
 int var = sizeof ( var ) / sizeof ( char * ) ; 
 printf ( words , var ) ; 
 call_func ( var , var ) ; 
 } 
 void func ( data_type * var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 } 
 #define var nums 
 void call_func ( data_type * var , data_type * var ) ; 
 void call_func ( data_type var [ ] , data_type var [ ] , data_type var ) ; 
 void call_func ( data_type var [ ] , data_type var ) ; 
 void call_func ( data_type var [ ] , data_type var ) ; 
 func ( ) 
 { 
 int var [ var ] , var [ var ] , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var , var ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 call_func ( var , var ) ; 
 printf ( words ) ; 
 call_func ( var , var ) ; 
 } 
 void func ( data_type * var , data_type * var ) 
 { 
 int var ; 
 var = * var ; 
 * var = * var ; 
 * var = var ; 
 } 
 void func ( data_type var [ ] , data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( & var [ var ] , & var [ var ] ) ; 
 } 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , & var [ var ] ) ; 
 } 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , var [ var ] ) ; 
 } 
 printf ( words ) ; 
 } 
 int call_func ( data_type var [ ] , data_type var , data_type * var ) ; 
 int call_func ( data_type var [ ] , data_type var , data_type * var ) ; 
 func ( ) 
 { 
 int var [ nums ] , var , var , var , var , var ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 scanf ( words , & var [ var ] ) ; 
 } 
 var = call_func ( var , nums , & var ) ; 
 var = call_func ( var , nums , & var ) ; 
 printf ( words , 
 var , var , var , var ) ; 
 } 
 int func ( data_type var [ ] , data_type var , data_type * var ) 
 { 
 int var , var ; 
 var = var [ nums ] ; 
 * var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] > var ) 
 { 
 var = var [ var ] ; 
 * var = var ; 
 } 
 } 
 return var ; 
 } 
 int func ( data_type var [ ] , data_type var , data_type * var ) 
 { 
 int var , var ; 
 var = var [ nums ] ; 
 * var = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var [ var ] < var ) 
 { 
 var = var [ var ] ; 
 * var = var ; 
 } 
 } 
 return var ; 
 } 
 void call_func ( data_type var [ ] , data_type var , data_type * var , data_type * var ) ; 
 void call_func ( data_type var [ ] , data_type var , data_type * var , data_type * var ) ; 
 func ( ) 
 { 
 int var [ nums ] , var , var , var , var , var ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 scanf ( words , & var [ var ] ) ; 
 } 
 call_func ( var , nums , & var , & var ) ; 
 call_func ( var , nums , & var , & var ) ; 
 printf ( words , 
 var , var , var , var ) ; 
 } 
 void func ( data_type var [ ] , data_type var , data_type * var , data_type * var ) 
 { 
 int var ; 
 * var = var [ nums ] ; 
 * var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] > * var ) 
 { 
 * var = var [ var ] ; 
 * var = var ; 
 } 
 } 
 } 
 void func ( data_type var [ ] , data_type var , data_type * var , data_type * var ) 
 { 
 int var ; 
 * var = var [ nums ] ; 
 * var = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var [ var ] < * var ) 
 { 
 * var = var [ var ] ; 
 * var = var ; 
 } 
 } 
 } 
 void call_func ( data_type var [ ] , data_type var , data_type * var , data_type * var , data_type * var , 
 data_type * var ) ; 
 func ( ) 
 { 
 int var [ nums ] , var , var , var , var , var ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 scanf ( words , & var [ var ] ) ; 
 } 
 call_func ( var , nums , & var , & var , & var , & var ) ; 
 printf ( words , 
 var , var , var , var ) ; 
 } 
 void func ( data_type var [ ] , data_type var , data_type * var , data_type * var , data_type * var , 
 data_type * var ) 
 { 
 int var ; 
 * var = var [ nums ] ; 
 * var = nums ; 
 * var = var [ nums ] ; 
 * var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] > * var ) 
 { 
 * var = var [ var ] ; 
 * var = var ; 
 } 
 else if ( var [ var ] < * var ) 
 { 
 * var = var [ var ] ; 
 * var = var ; 
 } 
 } 
 } 
 void func ( data_type var [ ] , data_type var [ ] ) 
 { 
 int var = nums , var = nums ; 
 while ( var [ var ] ! = words ) 
 { 
 var + + ; 
 } 
 while ( var [ var ] ! = words ) 
 { 
 var [ var ] = var [ var ] ; 
 var + + ; 
 var + + ; 
 } 
 var [ var ] = words ; 
 } 
 func ( ) 
 { 
 char [ nums ] ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 gets ( ) ; 
 gets ( var ) ; 
 call_func ( struct_name , var ) ; 
 printf ( words ) ; 
 call_func ( struct_name ) ; 
 } 
 void func ( data_type * var , data_type * var ) 
 { 
 while ( * var ! = words ) 
 { 
 var + + ; 
 } 
 while ( * var ! = words ) 
 { 
 * var = * var ; 
 var + + ; 
 var + + ; 
 } 
 * var = words ; 
 } 
 func ( ) 
 { 
 char [ nums ] ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 gets ( ) ; 
 gets ( var ) ; 
 call_func ( struct_name , var ) ; 
 printf ( words ) ; 
 call_func ( struct_name ) ; 
 } 
 void call_func ( data_type * var ) ; 
 func ( ) 
 { 
 char var [ nums ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 call_func ( var ) ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 } 
 void func ( data_type * var ) 
 { 
 int var ; 
 char var ; 
 char * var ; 
 char * var ; 
 var = call_func ( var ) ; 
 for ( var = var , var = var + var - nums ; var < var ; var + + , var - - ) 
 { 
 var = * var ; 
 * var = * var ; 
 * var = var ; 
 } 
 } 
 void call_func ( data_type * var ) ; 
 func ( ) 
 { 
 char var [ nums ] ; 
 printf ( words ) ; 
 gets ( var ) ; 
 call_func ( var ) ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 } 
 void func ( data_type * var ) 
 { 
 int var = nums ; 
 char var ; 
 char * var = var ; 
 char * var ; 
 for ( ; * var ! = words ; var + + ) var + + ; 
 for ( var = var , var = var + var - nums ; var < var ; var + + , var - - ) 
 { 
 var = * var ; 
 * var = * var ; 
 * var = var ; 
 } 
 } 
 func ( ) 
 { 
 char var [ nums ] , * var , * var ; 
 int var ; 
 printf ( words ) ; 
 gets ( var ) ; 
 var = call_func ( var ) ; 
 var = var ; 
 var = var + var - nums ; 
 while ( ( * var = = * var ) & & ( var < var ) ) 
 { 
 var + + ; 
 var - - ; 
 } 
 if ( var < var ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 #define var nums 
 #define var nums 
 void call_func ( data_type ( * var ) [ var ] , data_type ( * var ) [ var ] , data_type var , data_type var ) ; 
 void call_func ( data_type ( * struct_name ) [ var ] , data_type var , data_type var ) ; 
 void call_func ( data_type ( * struct_name ) [ var ] , data_type var , data_type var ) ; 
 func ( ) 
 { 
 int [ var ] [ var ] ; 
 int var [ var ] [ var ] ; 
 printf ( words ) ; 
 call_func ( struct_name , var , var ) ; 
 call_func ( struct_name , var , var , var ) ; 
 printf ( words ) ; 
 call_func ( var , var , var ) ; 
 } 
 void func ( data_type ( * var ) [ var ] , data_type ( * var ) [ var ] , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 * ( * ( var + var ) + var ) = * ( * ( var + var ) + var ) ; 
 } 
 } 
 } 
 void func ( data_type ( * struct_name ) [ var ] , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , * ( + var ) + var ) ; 
 } 
 } 
 } 
 void func ( data_type ( * struct_name ) [ var ] , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , * ( * ( + var ) + var ) ) ; 
 } 
 printf ( words ) ; 
 } 
 } 
 #define var nums 
 #define var nums 
 void call_func ( data_type * var , data_type * var , data_type var , data_type var ) ; 
 void call_func ( data_type * struct_name , data_type var , data_type var ) ; 
 void call_func ( data_type * struct_name , data_type var , data_type var ) ; 
 func ( ) 
 { 
 int [ var ] [ var ] ; 
 int var [ var ] [ var ] ; 
 printf ( words ) ; 
 call_func ( * struct_name , var , var ) ; 
 call_func ( * struct_name , * var , var , var ) ; 
 printf ( words ) ; 
 call_func ( * var , var , var ) ; 
 } 
 void func ( data_type * var , data_type * var , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 * ( var + var * var + var ) = * ( var + var * var + var ) ; 
 } 
 } 
 } 
 void func ( data_type * struct_name , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 scanf ( words , + var * var + var ) ; 
 } 
 } 
 } 
 void func ( data_type * struct_name , data_type var , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( words , * ( + var * var + var ) ) ; 
 } 
 printf ( words ) ; 
 } 
 } 
 func ( ) 
 { 
 int var ; 
 static char * var [ ] = { words , words , words , 
 words , words , words , words , words , words , 
 words , words , words , words } ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( ( var <= nums ) & & ( var >= nums ) ) 
 { 
 printf ( words , var , var [ var ] ) ; 
 } 
 else 
 { 
 printf ( words , var [ nums ] ) ; 
 } 
 } 
 func ( ) 
 { 
 char * var [ ] = { words , words , words , words , words } ; 
 int var , var , var , var = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 for ( var = var + nums ; var < nums ; var + + ) 
 { 
 for ( var = var + nums ; var < nums ; var + + ) 
 { 
 var + + ; 
 printf ( words , var , 
 var [ var ] , var [ var ] , var [ var ] ) ; 
 } 
 } 
 } 
 } 
 struct 
 { 
 var ; 
 int var ; 
 } var [ nums ] = { nums , nums , nums , nums } ; 
 func ( ) 
 { 
 printf ( words , var [ nums ] . var * var [ nums ] . var ) ; 
 } 
 struct 
 { 
 var ; 
 char [ nums ] ; 
 } var ; 
 void func ( struct var var ) 
 { 
 var . var = nums ; 
 call_func ( var . struct_name , words ) ; 
 } 
 func ( ) 
 { 
 var . var = nums ; 
 call_func ( var . struct_name , words ) ; 
 call_func ( var ) ; 
 printf ( words , var . var , var . ) ; 
 } 
 int func ( var data_type var ) 
 { 
 int var , var = nums , var = nums ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 if ( ( var & var ) = = var ) 
 var + + ; 
 var < <= nums ; 
 } 
 return var ; 
 } 
 func ( ) 
 { 
 var int var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , call_func ( var ) ) ; 
 } 
 struct 
 { 
 int var ; 
 struct struct_name * struct_var ; 
 } ; 
 typedef struct struct_name struct_var ; 
 var * var , * var ; 
 int var = nums ; 
 var * func ( data_type var ) 
 { 
 var * var ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 var - > var = NULL ; 
 var - > var = var ; 
 return var ; 
 } 
 var * func ( data_type var ) 
 { 
 if ( var = = nums ) 
 { 
 var = call_func ( var ) ; 
 var = var ; 
 var + + ; 
 } 
 else 
 { 
 var - > var = call_func ( var ) ; 
 var = var - > var ; 
 var + + ; 
 } 
 } 
 int func ( void ) 
 { 
 var * var ; 
 int var ; 
 var = var ; 
 for ( ; ; ) 
 { 
 if ( var - > var = = NULL ) 
 { 
 break ; 
 } 
 else 
 { 
 var = var ; 
 var = var - > var ; 
 var - - ; 
 } 
 } 
 if ( var = = nums ) return - nums ; 
 var - > var = NULL ; 
 var = var - > var ; 
 free ( var ) ; 
 return var ; 
 } 
 func ( ) 
 { 
 int var [ nums ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } ; 
 int var [ nums ] ; 
 int var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 call_func ( var [ var ] ) ; 
 printf ( words , var , var [ var ] ) ; 
 } 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 var [ var ] = call_func ( ) ; 
 printf ( words , nums - var , var [ var ] ) ; 
 } 
 } 
 #define var 
 struct 
 { 
 struct struct_name struct_var ; 
 struct struct_name struct_var ; 
 double var ; 
 double var ; 
 } ; 
 typedef struct struct_name struct_var ; 
 var var [ var ] = { nums } ; 
 float func ( var * var ) 
 { 
 int var ; 
 float var = nums . nums , var = nums . nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var + = ( var + var ) - > var ; 
 var + = ( var + var ) - > var ; 
 } 
 return var + var ; 
 } 
 void func ( var * var , data_type var ) 
 { 
 int var ; 
 float var = nums . nums , var = nums . nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( ( var + var ) - > var . var ! = var ) continue ; 
 var + = ( var + var ) - > var ; 
 var + = ( var + var ) - > var ; 
 } 
 printf ( words , var ) ; 
 printf ( words ) ; 
 printf ( words , var , var , var + var ) ; 
 } 
 void func ( var * var ) 
 { 
 int var ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( ( var + var ) - > var . var ! = nums ) 
 { 
 printf ( words , ( var + var ) - > var . var , 
 ( var + var ) - > var . var , ( var + var ) - > var . var ) ; 
 printf ( words , ( var + var ) - > var . var , 
 ( var + var ) - > var . var , ( var + var ) - > var . var ) ; 
 } 
 if ( ( var + var ) - > var ! = nums ) 
 printf ( words , ( var + var ) - > var ) ; 
 if ( ( var + var ) - > var ! = nums ) 
 printf ( words , ( var + var ) - > var ) ; 
 } 
 printf ( words , 
 call_func ( var ) ) ; 
 } 
 void func ( var * var ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( ( var + var ) - > var . var ! = var ) continue ; 
 if ( ( var + var ) - > var . var ! = nums ) 
 { 
 printf ( words , ( var + var ) - > var . var , 
 ( var + var ) - > var . var , ( var + var ) - > var . var ) ; 
 printf ( words , ( var + var ) - > var . var , 
 ( var + var ) - > var . var , ( var + var ) - > var . var ) ; 
 } 
 if ( ( var + var ) - > var ! = nums ) 
 printf ( words , ( var + var ) - > var ) ; 
 if ( ( var + var ) - > var ! = nums ) 
 printf ( words , ( var + var ) - > var ) ; 
 } 
 call_func ( var , var ) ; 
 } 
 void func ( var * var ) 
 { 
 printf ( words ) ; 
 call_func ( & var - > var ) ; 
 printf ( words , var - > var . var , var - > var . var , 
 var - > var . var ) ; 
 call_func ( & var - > var ) ; 
 printf ( words , var - > var . var , var - > var . var , 
 var - > var . var ) ; 
 } 
 void func ( var * var ) 
 { 
 char var [ nums ] ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 scanf ( words , & var ) ; 
 if ( var [ nums ] = = words ) 
 var - > var = call_func ( var ) ; 
 else 
 var - > var = call_func ( var ) ; 
 } 
 void func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 func ( ) 
 { 
 char var ; 
 int var ; 
 var = nums ; 
 while ( nums ) 
 { 
 call_func ( ) ; 
 var = call_func ( nums ) ; 
 switch ( var ) 
 { 
 case words : call_func ( var + var ) ; 
 var + + ; 
 break ; 
 case words : call_func ( var ) ; 
 break ; 
 case words : call_func ( var ) ; 
 break ; 
 case words : call_func ( nums ) ; 
 default : break ; 
 } 
 } 
 } 
 struct 
 { 
 int var ; 
 struct struct_name * struct_var ; 
 } ; 
 struct struct_name * struct_var ; 
 struct struct_name * struct_var ( int var ) 
 { 
 struct struct_name * struct_var ; 
 var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 var - > var = NULL ; 
 var - > var = var + nums ; 
 printf ( words ) ; 
 return var ; 
 } 
 void func ( struct struct_name * var ) 
 { 
 struct struct_name * struct_var ; 
 int var = nums ; 
 var = var ; 
 do { 
 printf ( words , var , var - > var ) ; 
 var = var - > var ; 
 var + + ; 
 } while ( var ! = NULL ) ; 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var , struct struct_name * struct_var ) 
 { 
 if ( var = = var ) { 
 var = var - > var ; 
 free ( var ) ; 
 return var ; 
 } 
 if ( var - > var = = NULL ) { 
 var - > var = NULL ; 
 free ( var ) ; 
 return var ; 
 } 
 else 
 { 
 var - > var = var - > var ; 
 free ( var ) ; 
 return var - > var ; 
 } 
 } 
 func ( ) 
 { 
 int var = nums , var = nums ; 
 struct struct_name * struct_var , * var ; 
 char var ; 
 var = NULL ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var = = nums ) 
 { 
 var = call_func ( var ) ; 
 var = var ; 
 } 
 else 
 { 
 var - > var = call_func ( var ) ; 
 var = var - > var ; 
 } 
 } 
 call_func ( var ) ; 
 var = nums ; 
 var = var ; 
 for ( ; ; ) 
 { 
 if ( ( var % nums ) = = nums ) 
 { 
 var = call_func ( var , var ) ; 
 var + + ; 
 var - - ; 
 if ( var < nums ) break ; 
 } 
 else 
 { 
 var = var ; 
 var = var - > var ; 
 if ( var = = NULL ) 
 var = var ; 
 var + + ; 
 } 
 } 
 call_func ( var ) ; 
 } 
 int func ( data_type var ) 
 { 
 if ( var > nums ) 
 return ( var * call_func ( var - nums ) ) ; 
 else 
 return nums ; 
 } 
 func ( ) 
 { 
 int var ; 
 var = call_func ( nums ) ; 
 printf ( words , var ) ; 
 } 
 int func ( data_type var ) 
 { 
 static int var = nums ; 
 var / = nums ; 
 var = var * nums ; 
 if ( var ) 
 { 
 var * = var ; 
 return ( call_func ( var - nums ) ) ; 
 } 
 else 
 return var ; 
 } 
 func ( ) 
 { 
 int var , var , var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 var = call_func ( nums + var ) ; 
 printf ( words , var ) ; 
 } 
 } 
 void func ( data_type var ) 
 { 
 if ( var / nums > nums ) 
 call_func ( var / nums ) ; 
 printf ( words , var % nums ) ; 
 } 
 func ( ) 
 { 
 call_func ( nums ) ; 
 } 
 void func ( data_type * var , data_type * var ) 
 { 
 int var ; 
 var = * var ; 
 * var = * var ; 
 * var = var ; 
 } 
 int * func ( data_type * var , data_type var , data_type var ) 
 { 
 int var , var ; 
 int var = var ; 
 int var = var , var = var ; 
 var = * ( var + var ) ; 
 if ( var = = var ) 
 return ; 
 else 
 { 
 while ( nums ) 
 { 
 for ( var = var ; var > var ; var - - ) 
 if ( var > * ( var + var ) ) 
 break ; 
 call_func ( var + var , var + var ) ; 
 var = var + nums ; 
 var = var ; 
 if ( var > var ) break ; 
 for ( var = var ; var < var ; var + + ) 
 if ( var < * ( var + var ) ) 
 break ; 
 call_func ( var + var , var + var ) ; 
 var = var - nums ; 
 var = var ; 
 if ( var = = var | | var > var | | var < var ) break ; 
 } 
 call_func ( var , var , var - nums ) ; 
 if ( var + nums > var ) 
 var = var - nums ; 
 call_func ( var , var + nums , var ) ; 
 } 
 } 
 func ( ) 
 { 
 int var [ nums ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } ; 
 int var ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 call_func ( var , nums , nums ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 } 
 int call_func ( var data_type * var ) ; 
 int func ( data_type var , data_type * var [ ] ) 
 { 
 int var ; 
 if ( var < nums ) 
 { 
 printf ( words ) ; 
 return - nums ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( call_func ( var [ var ] ) = = nums ) 
 call_func ( var [ var ] ) ; 
 } 
 return nums ; 
 } 
 int func ( var data_type * var ) 
 { 
 #define var nums 
 int var , var , var = nums ; 
 char var [ var ] ; 
 var = call_func ( var , var | var ) ; 
 if ( var = = - nums ) 
 return nums ; 
 while ( ( var = func ( var , var , var - nums ) ) > nums ) 
 { 
 var [ var ] = words ; 
 printf ( var ) ; 
 } 
 if ( var = = - nums ) 
 var = nums ; 
 call_func ( var ) ; 
 #undef var 
 return var ; 
 } 
 int func ( var data_type * var , var data_type * var ) 
 { 
 #define var nums 
 char var [ var ] ; 
 int var = - nums ; 
 int var = - nums ; 
 int var = nums ; 
 int var ; 
 var = call_func ( var , var | var ) ; 
 if ( var = = - nums ) 
 goto var ; 
 var = call_func ( var , var | var | var | var ) ; 
 if ( var = = - nums ) 
 goto var ; 
 while ( ( var = func ( var , var , var ) ) > nums ) 
 { 
 if ( call_func ( var , var , var ) = = - nums ) 
 goto var ; 
 } 
 if ( var = = nums ) 
 goto var ; 
 var : 
 var = nums ; 
 var : 
 if ( var ! = - nums ) 
 call_func ( var ) ; 
 if ( var ! = - nums ) 
 call_func ( var ) ; 
 #undef var 
 return var ; 
 } 
 #define words 
 #define var 
 #define var 
 typedef struct 
 { 
 char var [ var ] ; 
 char var [ var ] ; 
 } var ; 
 int var ; 
 var * var = NULL ; 
 int call_func ( void ) ; 
 void call_func ( void ) ; 
 int call_func ( var data_type * var ) ; 
 var char * call_func ( data_type var ) ; 
 void call_func ( data_type * var ) ; 
 int func ( data_type var , data_type * var [ ] ) 
 { 
 int var ; 
 if ( var < nums ) 
 { 
 printf ( words ) ; 
 return nums ; 
 } 
 if ( ! func ( ) ) 
 { 
 printf ( words ) ; 
 return nums ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 int var = call_func ( var [ var ] ) ; 
 if ( var = = - nums ) 
 call_func ( var [ var ] ) ; 
 else if ( var = = - nums ) 
 printf ( words ) ; 
 else 
 printf ( words var var var : % words 
 var [ var ] , 
 call_func ( var ) ) ; 
 } 
 call_func ( ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 FILE * var = NULL ; 
 int var = nums , var ; 
 var = fopen ( var , words ) ; 
 if ( var = = NULL ) 
 goto var ; 
 if ( call_func ( var , words , & var ) ! = nums ) 
 goto var ; 
 call_func ( ) ; 
 var = ( var * ) malloc ( var * sizeof ( var ) ) ; 
 if ( var = = NULL ) 
 goto var ; 
 memset ( var , nums , var * sizeof ( var ) ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 char * var ; 
 var = call_func ( var [ var ] . var , var , var ) ; 
 if ( var = = NULL ) 
 goto var ; 
 call_func ( var [ var ] . var ) ; 
 var = call_func ( var [ var ] . var , var , var ) ; 
 if ( var = = NULL ) 
 goto var ; 
 call_func ( var [ var ] . var ) ; 
 } 
 var = nums ; 
 goto var ; 
 var : 
 var = nums ; 
 call_func ( ) ; 
 var : 
 if ( var ! = NULL ) 
 fclose ( var ) ; 
 return var ; 
 } 
 int func ( var data_type * var ) 
 { 
 int var = - nums , var ; 
 int var , var ; 
 char var [ var ] ; 
 var = call_func ( var , var | var ) ; 
 if ( var = = - nums ) 
 goto var ; 
 var = call_func ( var , var , var ) ; 
 if ( var = = - nums ) 
 goto var ; 
 var = - nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 int var = call_func ( var [ var ] . var , 
 var , 
 call_func ( var [ var ] . var ) ) ; 
 if ( var = = nums ) 
 { 
 var = var ; 
 break ; 
 } 
 } 
 goto var ; 
 var : 
 var = - nums ; 
 var : 
 if ( var ! = - nums ) 
 call_func ( var ) ; 
 return var ; 
 } 
 var char * func ( data_type var ) 
 { 
 if ( var < nums | | var > var - nums ) 
 return words ; 
 else 
 return var [ var ] . var ; 
 } 
 void func ( void ) 
 { 
 if ( var ! = NULL ) 
 free ( var ) ; 
 var = NULL ; 
 } 
 void func ( data_type * var ) 
 { 
 char * var = call_func ( var , words ) ; 
 if ( var ! = NULL ) 
 * var = words ; 
 } 
 #define var 
 struct 
 { 
 struct struct_name struct_var ; 
 struct struct_name struct_var ; 
 double var ; 
 double var ; 
 } ; 
 typedef struct struct_name struct_var ; 
 var var [ var ] = { nums } ; 
 float func ( var var , data_type var ) 
 { 
 int var ; 
 float var = nums . nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var . var . var = = var ) 
 var + = var . var ; 
 } 
 return var ; 
 } 
 float func ( var var , data_type var ) 
 { 
 int var ; 
 float var = nums . nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var . var . var = = var ) 
 var + = var . var ; 
 } 
 return var ; 
 } 
 float func ( var * var ) 
 { 
 int var ; 
 float var = nums . nums , var = nums . nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var + = ( var + var ) - > var ; 
 var + = ( var + var ) - > var ; 
 } 
 return var + var ; 
 } 
 void func ( var * var , data_type var ) 
 { 
 int var ; 
 float var = nums . nums , var = nums . nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( ( var + var ) - > var . var ! = var ) continue ; 
 var + = ( var + var ) - > var ; 
 var + = ( var + var ) - > var ; 
 } 
 printf ( words , var ) ; 
 printf ( words ) ; 
 printf ( words , var , var , var + var ) ; 
 } 
 void func ( var * var ) 
 { 
 int var ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( ( var + var ) - > var . var ! = nums ) 
 { 
 printf ( words , ( var + var ) - > var . var , 
 ( var + var ) - > var . var , ( var + var ) - > var . var ) ; 
 printf ( words , ( var + var ) - > var . var , 
 ( var + var ) - > var . var , ( var + var ) - > var . var ) ; 
 } 
 if ( ( var + var ) - > var ! = nums ) 
 printf ( words , ( var + var ) - > var ) ; 
 if ( ( var + var ) - > var ! = nums ) 
 printf ( words , ( var + var ) - > var ) ; 
 } 
 printf ( words , 
 call_func ( var ) ) ; 
 } 
 void func ( var * var ) 
 { 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( ( var + var ) - > var . var ! = var ) continue ; 
 if ( ( var + var ) - > var . var ! = nums ) 
 { 
 printf ( words , ( var + var ) - > var . var , 
 ( var + var ) - > var . var , ( var + var ) - > var . var ) ; 
 printf ( words , ( var + var ) - > var . var , 
 ( var + var ) - > var . var , ( var + var ) - > var . var ) ; 
 } 
 if ( ( var + var ) - > var ! = nums ) 
 printf ( words , ( var + var ) - > var ) ; 
 if ( ( var + var ) - > var ! = nums ) 
 printf ( words , ( var + var ) - > var ) ; 
 } 
 call_func ( var , var ) ; 
 } 
 void func ( var * var ) 
 { 
 printf ( words ) ; 
 call_func ( & var - > var ) ; 
 printf ( words , var - > var . var , var - > var . var , 
 var - > var . var ) ; 
 call_func ( & var - > var ) ; 
 printf ( words , var - > var . var , var - > var . var , 
 var - > var . var ) ; 
 } 
 char func ( var * var ) 
 { 
 char var [ nums ] ; 
 printf ( words ) ; 
 call_func ( var ) ; 
 scanf ( words , & var ) ; 
 if ( var [ nums ] = = words ) 
 var - > var = call_func ( var ) ; 
 else 
 var - > var = call_func ( var ) ; 
 } 
 void func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 int func ( void ) 
 { 
 int var ; 
 FILE * var = fopen ( words , words ) ; 
 if ( var = = NULL ) 
 { 
 return nums ; 
 } 
 var = fread ( var , sizeof ( var ) , var , var ) ; 
 fclose ( var ) ; 
 return var ; 
 } 
 void func ( data_type var ) 
 { 
 int var ; 
 FILE * var = fopen ( words , words ) ; 
 if ( var = = NULL ) 
 { 
 call_func ( words ) ; 
 return ; 
 } 
 var = fwrite ( var , sizeof ( var ) , var , var ) ; 
 if ( var ! = var ) 
 call_func ( words ) ; 
 fclose ( var ) ; 
 } 
 func ( ) 
 { 
 char var ; 
 int var ; 
 var = call_func ( ) ; 
 while ( nums ) 
 { 
 call_func ( ) ; 
 var = call_func ( nums ) ; 
 switch ( var ) 
 { 
 case words : call_func ( var + var ) ; 
 var + + ; 
 break ; 
 case words : call_func ( var ) ; 
 break ; 
 case words : call_func ( var ) ; 
 break ; 
 case words : call_func ( var ) ; 
 call_func ( nums ) ; 
 default : break ; 
 } 
 } 
 } 
 #define var var 
 #define var var 
 #define var nums 
 #define var nums 
 #define var var 
 #define var nums 
 int var , var ; 
 int var ; 
 struct 
 { 
 int var ; 
 int var ; 
 int var ; 
 } var ; 
 struct 
 { 
 int var [ var ] ; 
 int var [ var ] ; 
 int ; 
 int var ; 
 int var ; 
 } var ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void ( int var , int var ) ; 
 int call_func ( ) ; 
 func ( ) 
 { 
 int var = var , var ; 
 call_func ( var ) ; 
 call_func ( & var , & var , words ) ; 
 var = call_func ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 getch ( ) ; 
 call_func ( ) ; 
 } 
 void ( int var , int var ) 
 { 
 int var = nums ; 
 int var = nums ; 
 call_func ( nums ) ; 
 call_func ( var , var , var + var , var ) ; 
 call_func ( var , var + nums , var + var - nums , var + nums ) ; 
 call_func ( var , var , var , var + var ) ; 
 call_func ( var + nums , var , var + nums , var + var - nums ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var + var , var + var , var + var ) ; 
 call_func ( var + nums , var + var - nums , var + var , var + var - nums ) ; 
 call_func ( var + var - nums , var + nums , var + var - nums , var + var - nums ) ; 
 call_func ( var + var , var + nums , var + var , var + var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var + nums , var + nums , var + var - nums , var + var - nums ) ; 
 } 
 void func ( ) 
 { int var ; 
 for ( var = nums ; var <= nums ; var + = nums ) 
 { 
 ( var , nums ) ; 
 ( var , nums ) ; 
 } 
 for ( var = nums ; var <= nums ; var + = nums ) 
 { 
 ( nums , var ) ; 
 ( nums , var ) ; 
 } 
 } 
 int func ( ) 
 { int var ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 call_func ( nums , nums ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 switch ( var ) 
 { 
 case nums : return nums ; 
 case nums : return nums ; 
 case nums : return nums ; 
 default : 
 call_func ( ) ; 
 call_func ( ) ; 
 } 
 } 
 void func ( void ) 
 { 
 call_func ( ( var var ) struct_name ( nums ) ) ; 
 var . var = nums ; 
 var . var = nums ; 
 var . var = nums ; 
 var . var [ nums ] = nums ; var . var [ nums ] = nums ; 
 var . var [ nums ] = nums ; var . var [ nums ] = nums ; 
 var . = nums ; 
 do 
 { 
 while ( ! func ( ) ) 
 { 
 if ( var . var = = nums ) 
 do 
 { 
 var . var = call_func ( ) % nums + nums ; 
 var . var = call_func ( ) % nums + nums ; 
 var . var = nums ; 
 } while ( var . var % nums ! = nums | | var . var % nums ! = nums ) ; 
 if ( var . var = = nums ) 
 { 
 call_func ( var ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( var . var , var . var , var . var + nums , var . var + nums ) ; 
 } 
 for ( var = var . - nums ; var > nums ; var - - ) 
 { 
 var . var [ var ] = var . var [ var - nums ] ; 
 var . var [ var ] = var . var [ var - nums ] ; 
 } 
 
 switch ( var . var ) 
 { 
 case nums : var . var [ nums ] + = nums ; break ; 
 case nums : var . var [ nums ] - = nums ; break ; 
 case nums : var . var [ nums ] - = nums ; break ; 
 case nums : var . var [ nums ] + = nums ; break ; 
 } 
 for ( var = nums ; var < var . ; var + + ) 
 { 
 if ( var . var [ var ] = = var . var [ nums ] & & var . var [ var ] = = var . var [ nums ] ) 
 { 
 call_func ( ) ; 
 var . var = nums ; 
 break ; 
 } 
 } 
 if ( var . var [ nums ] < nums | | var . var [ nums ] > nums | | var . var [ nums ] < nums | | 
 var . var [ nums ] > nums ) 
 { 
 call_func ( ) ; 
 var . var = nums ; 
 break ; 
 } 
 if ( var . var [ nums ] = = var . var & & var . var [ nums ] = = var . var ) 
 { 
 call_func ( nums ) ; 
 call_func ( var . var , var . var , var . var + nums , var . var + nums ) ; 
 var . + + ; 
 var . var = nums ; 
 } 
 call_func ( nums ) ; 
 for ( var = nums ; var < var . ; var + + ) 
 { call_func ( nums , nums , nums ) ; 
 call_func ( var . var [ var ] , var . var [ var ] , var . var [ var ] + nums , 
 var . var [ var ] + nums ) ; 
 } 
 call_func ( var ) ; 
 call_func ( nums ) ; 
 call_func ( var . var [ var . struct_name - nums ] , var . var [ var . struct_name - nums ] , 
 var . var [ var . struct_name - nums ] + nums , var . var [ var . struct_name - nums ] + nums ) ; 
 } 
 if ( var . var = = nums ) 
 break ; 
 var = call_func ( nums ) ; 
 if ( var = = var & & var . var ! = nums ) 
 var . var = nums ; 
 else 
 if ( var = = var & & var . var ! = nums ) 
 var . var = nums ; 
 else 
 if ( var = = var & & var . var ! = nums ) 
 var . var = nums ; 
 else 
 if ( var = = var & & var . var ! = nums ) 
 var . var = nums ; 
 } while ( var ! = var ) ; 
 } 
 void func ( void ) 
 { 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 } 
 #define var nums . nums 
 #define var var 
 float var = - nums , var = - nums , var = - nums ; 
 func ( ) 
 { 
 int var , var , var , var = nums ; 
 char var [ nums ] ; 
 float var ; 
 var = var ; 
 call_func ( var ) ; 
 call_func ( & var , & var , words ) ; 
 call_func ( var ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , var ) ; 
 for ( var = nums ; var <= nums * var ; var + = var / nums ) 
 { 
 call_func ( nums + nums * call_func ( - var ) , nums + nums * call_func ( - var ) , var ) ; 
 } 
 for ( var = nums ; var <= nums * var ; var + = var / nums ) 
 { 
 call_func ( var ) ; 
 call_func ( nums + nums * call_func ( - var ) , nums + nums * call_func ( - var ) , nums ) ; 
 call_func ( var , var ) ; 
 call_func ( nums + nums * call_func ( - var ) , nums + nums * call_func ( - var ) , var ) ; 
 } 
 call_func ( var ) ; 
 for ( var = nums ; var <= nums * var ; var + = var / nums ) 
 { 
 call_func ( var , var , nums ) ; 
 call_func ( nums + nums * call_func ( - var ) , nums + nums * call_func ( - var ) , var ) ; 
 var - - ; 
 if ( var < nums ) 
 var + = nums ; 
 } 
 while ( ! func ( ) ) 
 { 
 call_func ( ) ; 
 call_func ( nums ) ; 
 } 
 var = call_func ( nums ) ; 
 if ( var = = var ) 
 { 
 call_func ( ) ; 
 call_func ( nums ) ; 
 } 
 getch ( ) ; 
 call_func ( ) ; 
 } 
 func ( ) 
 { 
 struct struct_name * struct_var ; 
 float , var , var ; 
 int var , var ; 
 var var ; 
 ( & var ) ; 
 var = call_func ( & var ) ; 
 var = var - > var ; 
 var = var - > var ; 
 = var - > var ; 
 var = ( var + ( var * nums + ) / nums ) * var / nums - var / nums ; 
 var = ( var + / nums ) * ( var / nums ) - var / nums ; 
 if ( var ! = ( - nums ) & & var ! = ( - nums ) & & var ! = ( - nums ) ) 
 { call_func ( nums ) ; 
 call_func ( nums , nums , nums + nums * call_func ( var ) , nums + nums * call_func ( var ) ) ; 
 call_func ( nums , nums , nums + nums * call_func ( var ) , nums + nums * call_func ( var ) ) ; 
 call_func ( nums , nums , nums + nums * call_func ( ( var ) * ( var / nums ) + var / nums ) , nums + nums * call_func ( ( var ) * ( var / nums ) + var / nums ) ) ; 
 } 
 call_func ( var ) ; 
 call_func ( nums , nums , nums + nums * call_func ( var ) , nums + nums * call_func ( var ) ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums , nums + nums * call_func ( var ) , nums + nums * call_func ( var ) ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums , nums + nums * call_func ( ( struct_name ) * ( var / nums ) + var / nums ) , nums + nums * call_func ( ( struct_name ) * ( var / nums ) + var / nums ) ) ; 
 var = ; 
 var = var ; 
 var = var ; 
 #define var sizeof ( struct ) 
 #define var words 
 #define var var [ var ] . var , var [ var ] . var , var [ var ] . var , var [ var ] . var , var [ var ] . var , var [ var ] . var 
 struct 
 { int var ; 
 char var [ nums ] ; 
 double var ; 
 double var ; 
 double var ; 
 double var ; 
 } ; 
 struct struct_name struct_var [ nums ] ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void func ( ) 
 { int var ; 
 call_func ( ) ; 
 scanf ( words , & var ) ; 
 while ( var ) 
 { switch ( var ) 
 { case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 case nums : call_func ( ) ; break ; 
 default : break ; 
 } 
 getch ( ) ; 
 call_func ( ) ; 
 scanf ( words , & var ) ; 
 } 
 } 
 void func ( ) 
 { int var , var = nums ; 
 char var [ nums ] ; 
 FILE * var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) 
 var + + ; 
 } 
 fclose ( var ) ; 
 if ( var = = nums ) 
 printf ( words ) ; 
 else 
 { 
 system ( words ) ; 
 call_func ( ) ; 
 } 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 fwrite ( & var [ var ] , var , nums , var ) ; 
 } 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 while ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] . var = = var [ var ] . var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 fclose ( var ) ; 
 return ; 
 } 
 printf ( words ) ; 
 scanf ( words , var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 var [ var ] . var = var [ var ] . var + var [ var ] . var + var [ var ] . var ; 
 if ( fwrite ( & var [ var ] , var , nums , var ) ! = nums ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 } 
 else 
 { 
 printf ( words , var [ var ] . var ) ; 
 var + + ; 
 } 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 } 
 fclose ( var ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 int var , var = nums ; 
 var = fopen ( words , words ) ; 
 while ( ! feof ( var ) ) 
 { 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) 
 var + + ; 
 } 
 fclose ( var ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 printf ( var , var ) ; 
 } 
 } 
 
 void func ( ) 
 { 
 system ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 struct struct_name struct_var ; 
 int var = nums , var = nums , var = nums ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 while ( ! feof ( var ) ) 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) 
 var + + ; 
 fclose ( var ) ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 return ; } 
 for ( var = nums ; var < var - nums ; var + + ) 
 for ( var = var + nums ; var < var ; var + + ) 
 if ( var [ var ] . var < var [ var ] . var ) 
 { var = var [ var ] ; var [ var ] = var [ var ] ; var [ var ] = var ; } 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 for ( var = nums ; var < var ; var + + ) 
 if ( fwrite ( & var [ var ] , var , nums , var ) ! = nums ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 } 
 fclose ( var ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { 
 FILE * var ; 
 int var , var , var , var = nums ; 
 char var [ nums ] ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; return ; } 
 while ( ! feof ( var ) ) 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) var + + ; 
 fclose ( var ) ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var = = var [ var ] . var ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 for ( var = var ; var < var ; var + + ) 
 var [ var ] = var [ var + nums ] ; 
 var - - ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 for ( var = nums ; var < var ; var + + ) 
 if ( fwrite ( & var [ var ] , var , nums , var ) ! = nums ) 
 { printf ( words ) ; 
 getch ( ) ; } 
 fclose ( var ) ; 
 printf ( words ) ; 
 return ; 
 } 
 } 
 printf ( words ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 int var , var , var = nums ; 
 char var [ nums ] ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 while ( ! feof ( var ) ) if ( fread ( & var [ var ] , var , nums , var ) = = nums ) var + + ; 
 fclose ( var ) ; 
 if ( var = = nums ) { printf ( words ) ; return ; } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var = = var [ var ] . var ) 
 { printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 printf ( words ) ; 
 printf ( var , var ) ; 
 break ; 
 } 
 } 
 if ( var = = var ) printf ( words ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 int var , var , var = nums , var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 while ( ! feof ( var ) ) 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) var + + ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 fclose ( var ) ; 
 return ; 
 } 
 call_func ( ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var = = var [ var ] . var ) 
 { 
 printf ( words ) ; 
 
 printf ( words ) ; 
 scanf ( words , var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var ] . var ) ; 
 printf ( words ) ; 
 
 var [ var ] . var = var [ var ] . var + var [ var ] . var + var [ var ] . var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 for ( var = nums ; var < var ; var + + ) 
 if ( fwrite ( & var [ var ] , var , nums , var ) ! = nums ) 
 { printf ( words ) ; getch ( ) ; } 
 fclose ( var ) ; 
 return ; 
 } 
 } 
 printf ( words ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 int var , var , var , var = nums , var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 while ( ! feof ( var ) ) 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) var + + ; 
 if ( var = = nums ) { printf ( words ) ; 
 fclose ( var ) ; 
 return ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var = = var [ var ] . var ) 
 break ; 
 for ( var = var - nums ; var > var ; var - - ) 
 var [ var + nums ] = var [ var ] ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var + nums ] . var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] . var = = var [ var ] . var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 fclose ( var ) ; 
 return ; 
 } 
 printf ( words ) ; 
 scanf ( words , var [ var + nums ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var + nums ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var + nums ] . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var [ var + nums ] . var ) ; 
 var [ var + nums ] . var = var [ var + nums ] . var + var [ var + nums ] . var + var [ var + nums ] . var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 for ( var = nums ; var <= var ; var + + ) 
 if ( fwrite ( & var [ var ] , var , nums , var ) ! = nums ) 
 { printf ( words ) ; getch ( ) ; } 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { FILE * var ; 
 int var = nums ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { printf ( words ) ; return ; } 
 while ( ! feof ( var ) ) 
 if ( fread ( & var [ var ] , var , nums , var ) = = nums ) 
 var + + ; 
 if ( var = = nums ) { printf ( words ) ; fclose ( var ) ; return ; } 
 printf ( words , var ) ; 
 fclose ( var ) ; 
 } 
 #define var sizeof ( struct ) 
 #define var 
 struct 
 { int var ; 
 char var [ nums ] ; 
 int var ; 
 struct struct_name * struct_var ; 
 } ; 
 typedef struct struct_name struct_var ; 
 int var , var ; 
 void call_func ( ) ; 
 var * call_func ( void ) ; 
 var * call_func ( var * var ) ; 
 var * call_func ( var * var ) ; 
 var * call_func ( var * var ) ; 
 var * ( var * var , var * var ) ; 
 void call_func ( var * var ) ; 
 call_func ( var * var ) ; 
 var * func ( void ) 
 { 
 var * var ; 
 var * var , * var , * var , * var ; 
 int var , var ; 
 char var [ nums ] ; 
 var = nums ; 
 var = var = var = ( var * ) malloc ( var ) ; 
 printf ( words var , var nums var ! words 
 var : printf ( words call_func ( var > nums ) : words 
 scanf ( words , & var - > var ) ; 
 while ( var - > var < nums ) 
 { 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 } 
 
 if ( var - > var = = nums ) 
 goto var ; 
 else 
 { 
 var = var ; 
 if ( var > nums ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var - > var ! = var - > var ) 
 var = var - > var ; 
 else 
 { 
 printf ( words ) ; 
 goto var ; 
 
 } 
 } 
 } 
 } 
 printf ( words var : words 
 scanf ( words , & var - > var ) ; 
 printf ( words var var : words 
 scanf ( words , & var - > var ) ; 
 while ( var - > var ! = nums ) 
 { 
 var = var + nums ; 
 if ( var = = nums ) 
 var = var ; 
 else 
 var - > var = var ; 
 var = var ; 
 var = ( var * ) malloc ( var ) ; 
 printf ( words var , var nums var ! words 
 var : printf ( words call_func ( var > nums ) : words 
 scanf ( words , & var - > var ) ; 
 while ( var - > var < nums ) 
 { call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; } 
 
 if ( var - > var = = nums ) 
 goto var ; 
 else 
 { 
 var = var ; 
 if ( var > nums ) 
 { for ( var = nums ; var < var ; var + + ) 
 { if ( var - > var ! = var - > var ) 
 var = var - > var ; 
 else 
 { printf ( words ) ; 
 goto var ; 
 
 } 
 } 
 } 
 } 
 printf ( words var : words 
 scanf ( words , & var - > var ) ; 
 printf ( words var var : words 
 scanf ( words , & var - > var ) ; 
 } 
 var : var = var ; 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = var + nums ; var <= var ; var + + ) 
 { 
 var = var ; 
 var = var - > var ; 
 if ( var - > var > var - > var ) 
 { 
 var = var - > var ; 
 var - > var = var - > var ; 
 var - > var = var ; 
 
 call_func ( var , var - > var ) ; 
 call_func ( var - > var , var - > var ) ; 
 call_func ( var - > var , var ) ; 
 
 
 } 
 } 
 var = var ; var = var ; 
 } 
 var - > var = NULL ; 
 printf ( words var : % var var ! words 
 getch ( ) ; 
 return ( var ) ; 
 } 
 var * func ( var * var ) 
 { 
 var * var , * var ; 
 int var = nums ; 
 char var [ nums ] ; 
 FILE * var ; 
 printf ( words var var var var : words 
 scanf ( words , var ) ; 
 if ( ( var = fopen ( var , words ) ) = = NULL ) 
 { 
 printf ( words var var var ! words 
 getch ( ) ; 
 return nums ; 
 } 
 else 
 { 
 var = ( var * ) malloc ( var ) ; 
 call_func ( var , words , & var - > var , var - > var , & var - > var ) ; 
 printf ( words , var - > var , var - > var , var - > var ) ; 
 var = NULL ; 
 do 
 { 
 var = var + nums ; 
 if ( var = = nums ) 
 var = var ; 
 else 
 var - > var = var ; 
 var = var ; 
 var = ( var * ) malloc ( var ) ; 
 call_func ( var , words , & var - > var , var - > var , & var - > var ) ; 
 printf ( words , var - > var , var - > var , var - > var ) ; 
 } while ( ! feof ( var ) ) ; 
 var - > var = var ; 
 var - > var = NULL ; 
 var = var + nums ; 
 } 
 printf ( words ) ; 
 getch ( ) ; 
 fclose ( var ) ; 
 return ( var ) ; 
 } 
 var * func ( var * var ) 
 { 
 int var ; 
 var * var , * var ; 
 printf ( words var var var : words 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 while ( var ! = nums ) 
 { 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 return ( var ) ; 
 } 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 var = var ; 
 while ( var ! = var - > var & & var - > var ! = NULL ) 
 { 
 var = var ; 
 var = var - > var ; 
 } 
 if ( var = = var - > var ) 
 { 
 printf ( words , var - > var , var - > var , var - > var ) ; 
 printf ( words ) ; 
 } 
 else 
 printf ( words , var ) ; 
 printf ( words var var var : words 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 } 
 printf ( words ) ; 
 call_func ( ) ; 
 return ( var ) ; 
 } 
 var * func ( var * var ) 
 { 
 var * var , * var ; 
 int var ; 
 printf ( words var var call_func ( var nums var ) : words 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 while ( var ! = nums ) 
 { 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 return ( var ) ; 
 } 
 var = var ; 
 while ( var ! = var - > var & & var - > var ! = NULL ) 
 
 { 
 var = var ; 
 var = var - > var ; 
 } 
 if ( var = = var - > var ) 
 
 { 
 if ( var = = var ) 
 var = var - > var ; 
 
 else 
 var - > var = var - > var ; 
 
 printf ( words , var ) ; 
 var = var - nums ; 
 } 
 else 
 printf ( words , var ) ; 
 
 printf ( words var var var : words 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 } 
 var var 
 printf ( words ) ; 
 #endif 
 printf ( words , var ) ; 
 getch ( ) ; 
 return ( var ) ; 
 } 
 var * ( var * var , var * var ) 
 { 
 var * var , * var , * var , * var , * var ; 
 int var , var ; 
 char var [ nums ] ; 
 var = var = ( var * ) malloc ( var ) ; 
 printf ( words var var var ! words 
 var : printf ( words call_func ( var > nums ) : words 
 scanf ( words , & var - > var ) ; 
 
 while ( var - > var < nums ) 
 { 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 } 
 
 if ( var - > var = = nums ) 
 goto var ; 
 else 
 { 
 var = var ; 
 if ( var > nums ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var - > var ! = var - > var ) 
 var = var - > var ; 
 else 
 { 
 printf ( words ) ; 
 goto var ; 
 
 } 
 } 
 } 
 } 
 
 printf ( words var : words 
 scanf ( words , var - > var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 var = var ; 
 var = var ; 
 if ( var = = NULL ) 
 { 
 var = var ; 
 var - > var = NULL ; 
 } 
 else 
 { 
 if ( var - > var = = NULL ) 
 { 
 var - > var = var ; 
 var - > var = NULL ; 
 } 
 else 
 { 
 while ( var - > var ! = NULL ) 
 { 
 var = var ; 
 var = var - > var ; 
 } 
 var - > var = var ; 
 var - > var = NULL ; 
 } 
 } 
 var = var + nums ; 
 var = var ; 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = var + nums ; var <= var ; var + + ) 
 { 
 var = var ; 
 var = var - > var ; 
 if ( var - > var > var - > var ) 
 { 
 var = var - > var ; 
 var - > var = var - > var ; 
 var - > var = var ; 
 
 call_func ( var , var - > var ) ; 
 call_func ( var - > var , var - > var ) ; 
 call_func ( var - > var , var ) ; 
 
 
 } 
 var = var ; 
 var = var ; 
 } 
 } 
 var : 
 printf ( words , var ) ; 
 getch ( ) ; 
 return ( var ) ; 
 } 
 
 
 void func ( var * var ) 
 { 
 var * var ; 
 if ( var = = NULL ) 
 printf ( words ) ; 
 else 
 { 
 printf ( words , var ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 var = var ; 
 do 
 { printf ( words , var - > var , var - > var , var - > var ) ; 
 printf ( words ) ; 
 var = var - > var ; 
 } while ( var ! = NULL ) ; 
 getch ( ) ; 
 } 
 } 
 func ( var * var ) 
 { 
 FILE * var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words var var var ! words 
 return nums ; 
 } 
 else 
 { 
 while ( var ! = NULL ) 
 { 
 call_func ( var , words , var - > var , var - > var , var - > var ) ; 
 var = var - > var ; 
 } 
 printf ( words ) ; 
 getch ( ) ; 
 } 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 system ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 func ( ) 
 { 
 int var ; 
 var * var = nums , * var = nums ; 
 call_func ( ) ; 
 scanf ( words , & var ) ; 
 while ( nums ) 
 { 
 switch ( var ) 
 { 
 case nums : var = call_func ( ) ; break ; 
 case nums : var = call_func ( var ) ; break ; 
 case nums : var = call_func ( var ) ; break ; 
 case nums : var = call_func ( var ) ; break ; 
 case nums : var = ( var , var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( var ) ; break ; 
 case nums : call_func ( nums ) ; 
 default : printf ( words ) ; 
 } 
 call_func ( ) ; 
 scanf ( words , & var ) ; 
 } 
 } 
 #define var words 
 #define var words 
 #define var words 
 #define var words 
 #define var var - > var . var , var - > var . var , var - > var . var , var - > var . var , var - > var . var , var - > var . var , var - > var . var 
 int var = nums ; 
 struct 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 int var ; 
 } ; 
 struct 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 } ; 
 typedef struct 
 { 
 struct struct_name struct_var ; 
 struct struct_name * struct_var ; 
 } , * ; 
 typedef struct 
 { 
 struct struct_name struct_var ; 
 struct struct_name * struct_var ; 
 } , * var ; 
 void func ( ) 
 { 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 call_func ( words ) ; 
 } 
 void func ( var var ) 
 { 
 struct struct_name * struct_var , * var , * ; 
 char var [ nums ] ; 
 var = var ; 
 = var - > var ; 
 while ( var - > var ! = NULL ) 
 var = var - > var ; 
 while ( nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums ) 
 break ; 
 
 while ( ) 
 { 
 if ( strcmp ( - > var . var , var ) = = nums ) 
 { 
 printf ( words % words , var ) ; 
 return ; 
 } 
 = - > var ; 
 } 
 var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 call_func ( var - > var . var , var ) ; 
 printf ( words ) ; 
 scanf ( words , var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 var = nums ; 
 } 
 } 
 void func ( ) 
 { 
 printf ( var ) ; 
 printf ( var ) ; 
 printf ( var ) ; 
 } 
 void func ( struct_name * var ) 
 { 
 struct_name * struct_var ; 
 var = var ; 
 printf ( var , var ) ; 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var [ nums ] , * var ; 
 int var , var , var = nums ; 
 char var [ nums ] , var [ nums ] ; 
 if ( ! var - > var ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = var - > var ; 
 while ( var ! = NULL ) 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 { 
 [ var ] = var ; 
 var + + ; 
 break ; 
 } 
 else 
 var = var - > var ; 
 } 
 else if ( var = = nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = var - > var ; 
 while ( var ! = NULL ) 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 { 
 [ var ] = var ; 
 var + + ; 
 var = var - > var ; 
 } 
 else 
 var = var - > var ; 
 } 
 if ( var = = nums ) 
 printf ( words ) ; 
 else 
 { 
 call_func ( ) ; 
 for ( var = nums ; var < var ; var + + ) 
 call_func ( struct_name [ var ] ) ; 
 } 
 } 
 void func ( var var , var var ) 
 { 
 struct_name * struct_var [ nums ] , * var ; 
 char var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] ; 
 struct_name * struct_var , * var ; 
 int var = nums , var = nums , var = nums , var ; 
 var = var ; 
 while ( var - > var ! = NULL ) 
 var = var - > var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = var - > var ; 
 while ( var ! = NULL ) 
 { 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 { 
 var [ var ] = var ; 
 var + + ; 
 } 
 var = var - > var ; 
 } 
 printf ( words , var ) ; 
 call_func ( ) ; 
 for ( var = nums ; var < var ; var + + ) 
 call_func ( var [ var ] ) ; 
 if ( var = = nums ) 
 printf ( words var var for var ! words 
 else 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 var = ( ) malloc ( sizeof ( ) ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var - > var . var , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( var - > var . var , var ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( strcmp ( var [ var ] - > var . var , var ) = = nums ) 
 { 
 if ( var [ var ] - > var . var < nums ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 return ; 
 } 
 printf ( words , var [ var ] - > var . var ) ; 
 var = nums ; 
 break ; 
 } 
 if ( var = = nums ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 return ; 
 } 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var [ var ] - > var . var = var [ var ] - > var . var - var ; 
 var - > var . var = var ; 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 printf ( words ) ; 
 getch ( ) ; 
 var = nums ; 
 } 
 } 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var ; 
 char var [ nums ] , var ; 
 var = var - > var ; 
 if ( ! var ) 
 { 
 printf ( words for var var var ! words 
 return ; 
 } 
 else 
 { 
 printf ( words ) ; 
 call_func ( ) ; 
 scanf ( words , & var ) ; 
 if ( var = = words | | var = = words ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 while ( var ! = NULL ) 
 if ( strcmp ( var - > var . var , var ) = = nums ) 
 break ; 
 else 
 var = var - > var ; 
 if ( var ) 
 { 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var . var ) ; 
 printf ( words ) ; 
 var = nums ; 
 } 
 else 
 printf ( words var var ! words 
 } 
 } 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var ; 
 var = var - > var ; 
 call_func ( ) ; 
 if ( var - > var = = NULL ) 
 printf ( words ) ; 
 else 
 while ( var ! = NULL ) 
 { 
 call_func ( var ) ; 
 var = var - > var ; 
 } 
 } 
 void func ( var var ) 
 { 
 FILE * var ; 
 struct_name * struct_var ; 
 int var = nums , var = nums ; 
 var = fopen ( words , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words var var ! words 
 return ; 
 } 
 var = var - > var ; 
 while ( var ) 
 { 
 if ( fwrite ( var , sizeof ( ) , nums , var ) = = nums ) 
 { 
 var = var - > var ; 
 var + + ; 
 } 
 else 
 { 
 var = nums ; 
 break ; 
 } 
 } 
 if ( var ) 
 { 
 printf ( words , var ) ; 
 var = nums ; 
 } 
 fclose ( var ) ; 
 } 
 void func ( var var ) 
 { 
 FILE * var ; 
 struct_name * struct_var ; 
 int var = nums , var = nums ; 
 var = fopen ( words , words ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words var var ! words 
 return ; 
 } 
 var = var - > var ; 
 while ( var ) 
 { 
 if ( fwrite ( var , sizeof ( ) , nums , var ) = = nums ) 
 { 
 var = var - > var ; 
 var + + ; 
 } 
 else 
 { 
 var = nums ; 
 break ; 
 } 
 } 
 if ( var ) 
 { 
 printf ( words , var ) ; 
 var = nums ; 
 } 
 fclose ( var ) ; 
 } 
 func ( ) 
 { 
 FILE * var , * var ; 
 struct_name * struct_var , * var ; 
 char var , var ; 
 struct_name struct_var ; 
 var var ; 
 struct_name * struct_var , * var ; 
 int var ; 
 var = ( ) malloc ( sizeof ( ) ) ; 
 var - > var = NULL ; 
 var = var ; 
 var = ( ) malloc ( sizeof ( ) ) ; 
 var - > var = NULL ; 
 var = var ; 
 var = fopen ( words , words ) ; 
 if ( ( var = = NULL ) ) 
 { 
 printf ( words var var var ! words 
 return nums ; 
 } 
 while ( ! feof ( var ) ) 
 { 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( fread ( var , sizeof ( ) , nums , var ) = = nums ) 
 { 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 
 } 
 } 
 fclose ( var ) ; 
 var = fopen ( words , words ) ; 
 if ( ( var = = NULL ) ) 
 { 
 printf ( words var var var ! words 
 return nums ; 
 } 
 
 while ( ! feof ( var ) ) 
 { 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( fread ( var , sizeof ( ) , nums , var ) = = nums ) 
 { 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 
 } 
 } 
 fclose ( var ) ; 
 while ( nums ) 
 { 
 call_func ( ) ; 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 if ( var = = nums ) 
 { 
 if ( var = = nums ) 
 { 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = words | | var = = words ) 
 { 
 call_func ( var ) ; 
 call_func ( var ) ; 
 } 
 } 
 printf ( words ) ; 
 break ; 
 } 
 switch ( var ) 
 { 
 case nums : 
 call_func ( var ) ; break ; 
 case nums : 
 call_func ( var ) ; break ; 
 case nums : 
 call_func ( var , var ) ; break ; 
 case nums : 
 call_func ( var ) ; break ; 
 case nums : 
 call_func ( var ) ; break ; 
 case nums : 
 call_func ( var ) ; call_func ( var ) ; break ; 
 case nums : 
 return nums ; 
 } 
 printf ( words ) ; 
 getch ( ) ; 
 } 
 } 
 typedef struct 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 } ; 
 typedef struct 
 { 
 struct struct_name struct_var ; 
 struct struct_name * struct_var ; 
 } , * ; 
 void func ( data_type * var , data_type var , data_type * var ) 
 { 
 char var [ nums ] ; 
 do { 
 printf ( var ) ; 
 scanf ( words , var ) ; 
 if ( call_func ( var ) > var ) printf ( words ) ; 
 } while ( call_func ( var ) > var ) ; 
 call_func ( var , var ) ; 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var , * var ; 
 var = var ; 
 while ( nums ) 
 { 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( ! var ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 call_func ( var - > var . var , nums , words ) ; 
 if ( strcmp ( var - > var . var , words ) = = nums ) 
 break ; 
 call_func ( var - > var . var , nums , words ) ; 
 call_func ( var - > var . var , nums , words ) ; 
 call_func ( var - > var . var , nums , words ) ; 
 call_func ( var - > var . var , nums , words ) ; 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 } 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var , * var ; 
 char [ nums ] ; 
 var = var ; 
 var = var - > var ; 
 printf ( words ) ; 
 scanf ( words , ) ; 
 while ( var ) 
 { 
 if ( strcmp ( , var - > var . var ) = = nums ) 
 { var - > var = var - > var ; 
 free ( var ) ; 
 printf ( words ) ; 
 break ; 
 } 
 else 
 { 
 var = var ; 
 var = var - > var ; 
 } 
 } 
 getch ( ) ; 
 } 
 void func ( struct_name * var ) 
 { 
 printf ( words ) ; 
 printf ( words , var - > var . var ) ; 
 printf ( words , var - > var . var ) ; 
 printf ( words , var - > var . var ) ; 
 printf ( words , var - > var . var ) ; 
 printf ( words , var - > var . var ) ; 
 } 
 void func ( var var ) 
 { 
 char var [ nums ] ; 
 struct_name * struct_var ; 
 var = var - > var ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 while ( var ) 
 { if ( strcmp ( var - > var . var , var ) = = nums ) 
 { 
 call_func ( var ) ; 
 getch ( ) ; 
 break ; 
 } 
 else 
 var = var - > var ; 
 } 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var ; 
 var = var - > var ; 
 while ( var ! = NULL ) 
 { 
 call_func ( var ) ; 
 var = var - > var ; 
 } 
 getch ( ) ; 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var ; 
 FILE * var ; 
 var = var - > var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 printf ( words ) ; 
 while ( var ) 
 { 
 fwrite ( var , sizeof ( ) , nums , var ) ; 
 var = var - > var ; 
 } 
 fclose ( var ) ; 
 getch ( ) ; 
 } 
 void func ( var var ) 
 { 
 struct_name * struct_var , * var ; 
 FILE * var ; 
 var - > var = NULL ; 
 var = var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } ; 
 printf ( words ) ; 
 while ( ! feof ( var ) ) 
 { 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( ! var ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 if ( fread ( var , sizeof ( ) , nums , var ) ! = nums ) 
 break ; 
 else 
 { 
 var - > var = NULL ; 
 var - > var = var ; 
 var = var ; 
 } 
 } 
 fclose ( var ) ; 
 getch ( ) ; 
 } 
 func ( ) 
 { 
 int var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 do 
 { 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } while ( var < nums | | var > nums ) ; 
 return var ; 
 } 
 func ( ) 
 { 
 struct_name struct_var ; 
 var = ( ) malloc ( sizeof ( ) ) ; 
 if ( ! var ) 
 { 
 printf ( words ) ; 
 return ; 
 } 
 var - > var = NULL ; 
 system ( words ) ; 
 while ( nums ) 
 { 
 system ( words ) ; 
 switch ( func ( ) ) 
 { 
 case nums : 
 call_func ( var ) ; 
 break ; 
 case nums : 
 call_func ( var ) ; 
 break ; 
 case nums : 
 call_func ( var ) ; 
 break ; 
 case nums : 
 call_func ( var ) ; 
 break ; 
 case nums : 
 call_func ( var ) ; 
 break ; 
 case nums : 
 call_func ( var ) ; 
 break ; 
 case nums : 
 call_func ( nums ) ; 
 } 
 } 
 } 
 typedef struct 
 { 
 int var ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 var char var ; 
 char var [ nums ] ; 
 int var ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char [ nums ] ; 
 struct struct_name * struct_var ; 
 } var ; 
 
 char var [ nums ] ; 
 var * var , * var ; 
 char var , var ; 
 
 void call_func ( void ) ; 
 void call_func ( void ) ; 
 void call_func ( void ) ; 
 void call_func ( void ) ; 
 void call_func ( void ) ; 
 void call_func ( void ) ; 
 void call_func ( void ) ; 
 void call_func ( void ) ; 
 void call_func ( void ) ; 
 int call_func ( data_type struct_name ) ; 
 int call_func ( data_type struct_name ) ; 
 char * call_func ( data_type * var , data_type * struct_name , data_type var ) ; 
 var * call_func ( data_type * var ) ; 
 var * call_func ( data_type var ) ; 
 var * call_func ( data_type * var ) ; 
 var * call_func ( data_type * var ) ; 
 void call_func ( var * var , data_type * var , data_type * var ) ; 
 void call_func ( void ) ; 
 void call_func ( data_type var , data_type var ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void func ( ) 
 { 
 FILE * var ; 
 var * var ; 
 int var = nums ; 
 char var = words ; 
 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 
 do { 
 var + + ; 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 printf ( words , var ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > var ) ; 
 
 printf ( words ) ; 
 scanf ( words , & var - > ) ; 
 
 var - > var = NULL ; 
 if ( var = = NULL ) 
 { 
 var = var ; 
 var = var ; 
 } else { 
 var - > var = var ; 
 var = var ; 
 } 
 
 fwrite ( var , sizeof ( var ) , nums , var ) ; 
 
 var = nums ; 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 fflush ( stdin ) ; 
 var = getch ( ) ; 
 
 if ( func ( var ) ! = words ) 
 { 
 fclose ( var ) ; 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 
 system ( words ) ; 
 } while ( nums ) ; 
 } 
 void func ( data_type var , data_type var ) 
 { 
 while ( var - - ) 
 call_func ( var ) ; 
 
 printf ( words ) ; 
 return ; 
 } 
 void func ( ) 
 { 
 FILE * var , * var ; 
 char var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] , var ; 
 int var ; 
 char var = words ; 
 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 getch ( ) ; 
 
 do { 
 printf ( words ) ; 
 for ( var = nums ; var < nums & & ( ( var [ var ] = getch ( ) ) ! = nums ) ; var + + ) 
 call_func ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums & & ( ( var [ var ] = getch ( ) ) ! = nums ) ; var + + ) 
 call_func ( words ) ; 
 
 var [ var ] = words ; 
 var [ var ] = words ; 
 
 if ( strcmp ( var , var ) ! = nums ) 
 printf ( words ) ; 
 else break ; 
 
 } while ( nums ) ; 
 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 
 var = nums ; 
 while ( var [ var ] ) 
 { 
 
 var [ var ] = ( var [ var ] var var ) ; 
 call_func ( var [ var ] , var ) ; 
 var + + ; 
 } 
 
 fclose ( var ) ; 
 printf ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 
 } else { 
 var = nums ; 
 while ( ! feof ( var ) & & var < nums ) 
 var [ var + + ] = ( call_func ( var ) var ) ; 
 
 
 var [ var ] = words ; 
 
 if ( var >= nums ) var - - ; 
 while ( var [ var ] ! = - nums & & var >= nums ) 
 var - - ; 
 
 var [ var ] = words ; 
 call_func ( var , var ) ; 
 } 
 } 
 void func ( ) 
 { 
 int var = nums ; 
 var * var , * var ; 
 char var [ nums ] , var ; 
 
 system ( words ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 
 var = var ; 
 var = var ; 
 while ( var ) 
 { 
 if ( strcmp ( var - > var , var ) = = nums ) 
 { 
 var = nums ; 
 system ( words ) ; 
 
 printf ( words , var - > var ) ; 
 call_func ( words , nums ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 
 fflush ( stdin ) ; 
 var = call_func ( ) ; 
 
 if ( var ! = words & & var ! = words ) return ; 
 if ( var = = var ) var = var - > var ; 
 else var - > var = var - > var ; 
 
 free ( var ) ; 
 var = nums ; 
 call_func ( ) ; 
 return ; 
 } else { 
 var = var ; 
 var = var - > var ; 
 } 
 } 
 if ( ! var ) 
 { 
 call_func ( words , nums ) ; 
 printf ( words , var ) ; 
 getch ( ) ; 
 } 
 return ; 
 } 
 void func ( var * var , data_type * var , data_type * var ) 
 { 
 if ( var ) 
 { 
 printf ( words , var , var ) ; 
 call_func ( words , nums ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > ) ; 
 call_func ( words , nums ) ; 
 } else { 
 call_func ( words , nums ) ; 
 printf ( words , var , var ) ; 
 } 
 return ; 
 } 
 var * func ( data_type * var ) 
 { 
 var * var ; 
 var = var ; 
 
 while ( var ) 
 { 
 if ( strcmp ( var , var - > var ) = = nums ) return var ; 
 var = var - > var ; 
 } 
 return NULL ; 
 } 
 var * func ( data_type var ) 
 { 
 var * var ; 
 
 var = var ; 
 while ( var ) 
 { 
 if ( var = = var - > var ) return var ; 
 var = var - > var ; 
 } 
 return NULL ; 
 } 
 var * func ( data_type * var ) 
 { 
 var * var ; 
 
 var = var ; 
 while ( var ) 
 { 
 if ( ( strcmp ( var , var - > var ) = = nums ) | | 
 ( strcmp ( var , var - > var ) = = nums ) | | 
 ( strcmp ( var , var - > var ) = = nums ) ) 
 return var ; 
 var = var - > var ; 
 
 } 
 return NULL ; 
 } 
 var * func ( data_type * var ) 
 { 
 var * var ; 
 
 var = var ; 
 while ( var ) 
 { 
 if ( strcmp ( var , var - > var ) = = nums ) return var ; 
 var = var - > var ; 
 } 
 return NULL ; 
 } 
 void func ( ) 
 { 
 int var , var = nums , var ; 
 char var [ nums ] ; 
 var * var ; 
 
 system ( words ) ; 
 
 do { 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 
 do { 
 fflush ( stdin ) ; 
 var = call_func ( ) ; 
 system ( words ) ; 
 
 switch ( var ) 
 { 
 case words : 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 
 var = call_func ( var ) ; 
 call_func ( var , words , var ) ; 
 getch ( ) ; 
 break ; 
 
 case words : 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 
 var = call_func ( var ) ; 
 call_func ( var , var , nums ) ; 
 call_func ( var , words , var ) ; 
 getch ( ) ; 
 break ; 
 
 case words : 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 
 var = call_func ( var ) ; 
 call_func ( var , words , var ) ; 
 getch ( ) ; 
 break ; 
 
 case words : 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 
 var = call_func ( var ) ; 
 call_func ( var , words , var ) ; 
 getch ( ) ; 
 break ; 
 
 case words : 
 var = nums ; 
 break ; 
 } 
 } while ( var < words | | var > words ) ; 
 
 system ( words ) ; 
 if ( var ) break ; 
 } while ( nums ) ; 
 } 
 void func ( ) 
 { 
 var * var ; 
 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 var = var ; 
 
 while ( var ) 
 { 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > var ) ; 
 printf ( words , var - > ) ; 
 call_func ( words , nums ) ; 
 var = var - > var ; 
 } 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 void func ( ) 
 { 
 int var , var = nums ; 
 char var [ nums ] ; 
 
 do { 
 printf ( words ) ; 
 for ( var = nums ; var < nums & & ( ( var [ var ] = getch ( ) ) ! = nums ) ; var + + ) 
 call_func ( words ) ; 
 
 var [ var ] = words ; 
 if ( strcmp ( var , var ) ) 
 { 
 printf ( words ) ; 
 system ( words ) ; 
 var - - ; 
 } else break ; 
 } while ( var > nums ) ; 
 
 if ( ! var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 } 
 void func ( ) 
 { 
 char var ; 
 
 system ( words ) ; 
 
 do { 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 
 do { 
 fflush ( stdin ) ; 
 var = call_func ( ) ; 
 system ( words ) ; 
 
 switch ( var ) 
 { 
 case words : 
 call_func ( ) ; 
 break ; 
 case words : 
 if ( var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 break ; 
 } 
 
 call_func ( ) ; 
 break ; 
 case words : 
 if ( var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 break ; 
 } 
 
 call_func ( ) ; 
 break ; 
 case words : 
 if ( var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 break ; 
 } 
 
 call_func ( ) ; 
 break ; 
 case words : 
 if ( var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 break ; 
 } 
 
 call_func ( ) ; 
 break ; 
 case words : 
 if ( var ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 break ; 
 } 
 
 call_func ( ) ; 
 break ; 
 case words : 
 call_func ( ) ; 
 break ; 
 case words : 
 call_func ( ) ; 
 call_func ( nums ) ; 
 } 
 } while ( var < words | | var > words ) ; 
 
 
 system ( words ) ; 
 } while ( nums ) ; 
 } 
 int func ( data_type var ) { 
 int var ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 
 return ( var ) ; 
 } 
 int func ( data_type var ) { 
 int var ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 
 return ( var ) ; 
 } 
 char * func ( data_type * var , data_type * var , data_type var ) 
 { 
 char * var ; 
 var = malloc ( sizeof ( char ) * var ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 return NULL ; 
 } 
 printf ( words , var , var ) ; 
 printf ( words , var ) ; 
 scanf ( words , var ) ; 
 
 return var ; 
 } 
 void func ( ) 
 { 
 var * var ; 
 char var [ nums ] , * var ; 
 int var ; 
 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 
 var = call_func ( var ) ; 
 call_func ( var , words , var ) ; 
 
 if ( var ) 
 { 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 
 do { 
 fflush ( stdin ) ; 
 var = call_func ( ) ; 
 switch ( var ) 
 { 
 case words : 
 var = call_func ( words , var - > var , nums ) ; 
 if ( var ! = NULL ) 
 { 
 call_func ( var - > var , var ) ; 
 free ( var ) ; 
 } 
 break ; 
 case words : 
 var - > var = call_func ( var - > var ) ; 
 break ; 
 case words : 
 var = call_func ( words , var - > var , nums ) ; 
 if ( var ! = NULL ) 
 { 
 call_func ( var - > var , var ) ; 
 free ( var ) ; 
 } 
 break ; 
 case words : 
 var - > var = call_func ( var - > var ) ; 
 break ; 
 case words : 
 var = call_func ( words , var - > var , nums ) ; 
 if ( var ! = NULL ) 
 { 
 call_func ( var - > var , var ) ; 
 free ( var ) ; 
 } 
 break ; 
 case words : 
 var = call_func ( words , var - > var , nums ) ; 
 if ( var ! = NULL ) 
 { 
 call_func ( var - > var , var ) ; 
 free ( var ) ; 
 } 
 break ; 
 case words : 
 var = call_func ( words , var - > var , nums ) ; 
 if ( var ! = NULL ) 
 { 
 call_func ( var - > var , var ) ; 
 free ( var ) ; 
 } 
 break ; 
 case words : 
 var = call_func ( words , var - > var , nums ) ; 
 if ( var = = NULL ) 
 { 
 call_func ( var - > var , var ) ; 
 free ( var ) ; 
 } 
 break ; 
 case words : 
 var = call_func ( words , var - > struct_name , nums ) ; 
 if ( var ! = NULL ) 
 { 
 call_func ( var - > struct_name , var ) ; 
 free ( var ) ; 
 } 
 break ; 
 case words : 
 return ; 
 } 
 } while ( var < words | | var > words ) ; 
 
 var = nums ; 
 call_func ( ) ; 
 printf ( words ) ; 
 getch ( ) ; 
 } 
 return ; 
 } 
 
 void func ( void ) 
 { 
 FILE * var ; 
 var * var ; 
 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 var = nums ; 
 return ; 
 } 
 
 while ( ! feof ( var ) ) 
 { 
 var = ( var * ) malloc ( sizeof ( var ) ) ; 
 if ( var = = NULL ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 
 fread ( var , sizeof ( var ) , nums , var ) ; 
 if ( feof ( var ) ) break ; 
 
 if ( var = = NULL ) 
 { 
 var = var ; 
 var = var ; 
 } else { 
 var - > var = var ; 
 var = var ; 
 } 
 var - > var = NULL ; 
 } 
 var = nums ; 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 char var [ nums ] , var [ nums ] , var ; 
 int var ; 
 FILE * var ; 
 
 system ( words ) ; 
 
 printf ( words ) ; 
 for ( var = nums ; var < nums & & ( ( var [ var ] = getch ( ) ) ! = nums ) ; var + + ) 
 call_func ( words ) ; 
 
 var [ var ] = words ; 
 if ( strcmp ( var , var ) ! = nums ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 do { 
 printf ( words ) ; 
 for ( var = nums ; var < nums & & ( ( var [ var ] = getch ( ) ) ! = nums ) ; var + + ) 
 call_func ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums & & ( ( var [ var ] = getch ( ) ) ! = nums ) ; var + + ) 
 call_func ( words ) ; 
 
 var [ var ] = words ; 
 var [ var ] = words ; 
 
 if ( strcmp ( var , var ) ! = nums ) 
 printf ( words ) ; 
 else break ; 
 
 } while ( nums ) ; 
 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 } 
 
 var = nums ; 
 while ( var [ var ] ) 
 { 
 call_func ( var [ var ] , var ) ; 
 var + + ; 
 } 
 
 fclose ( var ) ; 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 void func ( ) 
 { 
 FILE * var ; 
 var * var ; 
 
 if ( var = = nums ) return ; 
 
 if ( ( var = fopen ( words , words ) ) = = NULL ) 
 { 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 
 var = var ; 
 while ( var ) 
 { 
 fwrite ( var , sizeof ( var ) , nums , var ) ; 
 var = var - > var ; 
 } 
 
 var = nums ; 
 fclose ( var ) ; 
 } 
 void func ( ) 
 { 
 var * var ; 
 int var = nums , var = nums , = nums , var = nums ; 
 
 var = var ; 
 while ( var ) 
 { 
 var + + ; 
 var + = var - > var ; 
 char var [ nums ] ; 
 call_func ( var , var - > var , nums ) ; 
 if ( ( strcmp ( var , words ) = = nums ) | | ( strcmp ( var - > var , words ) = = nums ) ) + + ; 
 else var + + ; 
 var = var - > var ; 
 } 
 
 printf ( words ) ; 
 call_func ( words , nums ) ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 printf ( words , ) ; 
 printf ( words , var ) ; 
 call_func ( words , nums ) ; 
 printf ( words ) ; 
 getch ( ) ; 
 return ; 
 } 
 int func ( void ) 
 { 
 var = var = NULL ; 
 var = var = nums ; 
 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 system ( words ) ; 
 return nums ; 
 } 
 var call_func ( var , words ) 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 FILE * var ; 
 FILE * var ; 
 struct 
 { 
 int var ; 
 int var ; 
 int var ; 
 char var [ nums ] ; 
 } ; 
 struct 
 { 
 int var ; 
 int var ; 
 char var [ nums ] ; 
 } ; 
 struct 
 { 
 int var ; 
 char var [ nums ] ; 
 int var ; 
 var var ; 
 } ; 
 struct 
 { 
 int var ; 
 char var [ nums ] ; 
 } ; 
 struct struct_name struct_var [ nums ] ; 
 int var = nums ; 
 int var ; 
 int var = nums ; 
 struct struct_name struct_var [ nums ] ; 
 void func ( ) 
 { 
 if ( var ! = NULL ) 
 fclose ( var ) ; 
 if ( var ! = NULL ) 
 fclose ( var ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 } 
 var var func ( var var ) 
 { 
 var var = ( var ) var ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var = nums ; 
 if ( var ! = var ) 
 printf ( words ) ; 
 while ( nums ) 
 { 
 var = call_func ( var , var , nums , nums ) ; 
 if ( var >= nums ) 
 { 
 var [ var ] = words ; 
 call_func ( var , words , var ) ; 
 printf ( words , var ) ; 
 fwrite ( var , sizeof ( char ) , call_func ( var ) , var ) ; 
 fflush ( var ) ; 
 if ( strcmp ( words , var ) = = nums ) 
 { 
 call_func ( ) ; 
 } 
 } 
 } 
 return nums ; 
 } 
 var var func ( var var ) 
 { 
 var var = ( var ) var ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var = nums ; 
 if ( var ! = var ) 
 printf ( words ) ; 
 while ( nums ) 
 { 
 var = call_func ( var , var , nums , nums ) ; 
 if ( var >= nums ) 
 { 
 var [ var ] = words ; 
 call_func ( var , words , var ) ; 
 printf ( words , var ) ; 
 fwrite ( var , sizeof ( char ) , call_func ( var ) , var ) ; 
 fflush ( var ) ; 
 if ( strcmp ( words , var ) = = nums ) 
 { 
 call_func ( ) ; 
 } 
 } 
 } 
 return nums ; 
 } 
 void func ( ) 
 { 
 var var ; 
 struct struct_name struct_var ; 
 struct struct_name struct_var ; 
 int var = nums ; 
 int var = - nums ; 
 int var = nums ; 
 struct struct_name * struct_var ; 
 char * var ; 
 var var ; 
 char var [ ] = words ; 
 int var = sizeof ( struct ) ; 
 int var = nums ; 
 var var = nums ; 
 int var ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 var = fopen ( words , words ) ; 
 var = call_func ( var , var , nums ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( words ) ; 
 var = call_func ( * ( struct struct_name * ) * var - > var ) ; 
 var . var = var ; 
 var . var = call_func ( var ) ; 
 var . var . var . var = call_func ( var ) ; 
 var = call_func ( var , ( struct struct_name * ) & var , sizeof ( struct struct_name ) ) ; 
 while ( var ! = nums & & var > nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var . var = var ; 
 var . var = call_func ( var ) ; 
 var . var . var . var = call_func ( var ) ; 
 var = call_func ( var , ( struct struct_name * ) & var , sizeof ( struct struct_name ) ) ; 
 var - - ; 
 if ( var <= nums ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 } 
 while ( var > nums ) 
 { 
 printf ( words ) ; 
 call_func ( var , nums ) ; 
 var = call_func ( var , ( struct struct_name * ) & var , & var ) ; 
 if ( var ! = var ) 
 { 
 call_func ( var , var , sizeof ( var ) , nums ) ; 
 call_func ( NULL , nums , var , ( var ) var , nums , & var ) ; 
 break ; 
 } 
 printf ( words ) ; 
 var - - ; 
 if ( var <= nums ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 } 
 while ( nums ) 
 { 
 memset ( var , nums , nums ) ; 
 scanf ( words , var ) ; 
 if ( func ( var ) > nums ) 
 { 
 var = call_func ( var , var , call_func ( var ) , nums ) ; 
 if ( var < nums ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 call_func ( var , words , var ) ; 
 printf ( words , var ) ; 
 fwrite ( var , sizeof ( char ) , call_func ( var ) , var ) ; 
 } 
 if ( strcmp ( words , var ) = = nums ) 
 { 
 call_func ( ) ; 
 } 
 } 
 } 
 } 
 int func ( data_type * var ) 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var = nums ; 
 int var = nums ; 
 int var = nums ; 
 int var = nums ; 
 int var ; 
 memset ( var , nums , nums ) ; 
 call_func ( var , var , nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var [ var ] = = words ) 
 { 
 var + + ; 
 var = nums ; 
 if ( call_func ( var ) > nums ) 
 var = nums ; 
 memset ( var , nums , nums ) ; 
 } 
 else 
 { 
 var [ var + + ] = var [ var ] ; 
 } 
 if ( var = = nums & & var ! = nums ) 
 var = nums ; 
 } 
 return var ; 
 } 
 void func ( ) 
 { 
 var var ; 
 struct struct_name struct_var ; 
 char var [ nums ] ; 
 int var = nums ; 
 int var ; 
 var var = nums ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 int var ; 
 int var ; 
 int var ; 
 var = call_func ( var , var , nums ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( call_func ( var ) = = nums ) 
 call_func ( var , words ) ; 
 else 
 { 
 var = call_func ( var ) ; 
 while ( ! var & & var > nums ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = call_func ( var ) ; 
 var - - ; 
 if ( var <= nums ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 } 
 } 
 var = fopen ( words , words ) ; 
 var . var = var ; 
 var . var = call_func ( nums ) ; 
 var . var . var . var = call_func ( var ) ; 
 var = call_func ( var , ( struct struct_name * ) & var , sizeof ( struct struct_name ) ) ; 
 if ( var = = nums ) 
 { 
 var = call_func ( var , var , nums , nums ) ; 
 if ( var > nums ) 
 { 
 printf ( words , var ) ; 
 call_func ( NULL , nums , var , ( var ) var , nums , & var ) ; 
 } 
 while ( nums ) 
 { 
 memset ( var , nums , nums ) ; 
 scanf ( words , var ) ; 
 if ( func ( var ) > nums ) 
 { 
 var = call_func ( var , var , call_func ( var ) , nums ) ; 
 if ( var < nums ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 call_func ( var , words , var ) ; 
 printf ( words , var ) ; 
 fwrite ( var , sizeof ( char ) , call_func ( var ) , var ) ; 
 fflush ( var ) ; 
 } 
 if ( strcmp ( words , var ) = = nums ) 
 { 
 call_func ( ) ; 
 } 
 } 
 } 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 var var func ( var var ) 
 { 
 var var = ( var ) var ; 
 var var ; 
 char var [ nums ] ; 
 int var = nums ; 
 int var , var ; 
 int var ; 
 struct struct_name struct_var ; 
 struct struct_name * struct_var ; 
 if ( var ! = var ) 
 printf ( words , var ) ; 
 while ( nums ) 
 { 
 var = call_func ( var , var , nums , nums ) ; 
 if ( var >= nums ) 
 { 
 var = ( struct ) var ; 
 switch ( var - > var ) 
 { 
 case var : 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var [ var ] . var = = var - > var ) 
 { 
 var = var [ var ] . var ; 
 memset ( & var , nums , sizeof ( var ) ) ; 
 var . var = var ; 
 call_func ( var . var , var - > var ) ; 
 var = call_func ( var , ( data_type * ) & var , sizeof ( var ) , nums ) ; 
 if ( var < nums ) 
 printf ( words ) ; 
 } 
 } 
 break ; 
 case var : 
 memset ( & var , nums , sizeof ( var ) ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var [ var ] . var ! = var - > var & & var [ var ] . var ! = nums ) 
 { 
 var . var [ var ] = var [ var ] . var ; 
 } 
 } 
 var . var = var ; 
 call_func ( var , ( data_type * ) & var , sizeof ( var ) , nums ) ; 
 break ; 
 case var : 
 printf ( words ) ; 
 return nums ; 
 break ; 
 } 
 } 
 } 
 return nums ; 
 } 
 var var func ( var var ) 
 { 
 struct struct_name struct_var ; 
 var var ; 
 int * var ; 
 int var ; 
 var = ( int * ) var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var [ var ] . var ! = ( * var ) ) 
 { 
 var = var [ var ] . var ; 
 var . var = var ; 
 call_func ( var . var , words , ( * var ) ) ; 
 call_func ( var , ( data_type * ) & var , sizeof ( var ) , nums ) ; 
 } 
 } 
 return nums ; 
 } 
 void func ( ) 
 { 
 var var ; 
 struct struct_name struct_var ; 
 struct struct_name struct_var ; 
 int var ; 
 var var ; 
 struct struct_name * struct_var ; 
 char * var ; 
 struct struct_name struct_var ; 
 int var = nums ; 
 int var = nums ; 
 var var = nums ; 
 char var [ ] = words ; 
 int var = sizeof ( struct ) ; 
 int var ; 
 var = call_func ( words ) ; 
 var = call_func ( * ( struct struct_name * ) * var - > var ) ; 
 var . var = var ; 
 var . var = call_func ( nums ) ; 
 var . var . var . var = call_func ( var ) ; 
 var = call_func ( var , var , nums ) ; 
 if ( var = = var ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 var = call_func ( var , ( struct struct_name * ) & var , sizeof ( struct struct_name ) ) ; 
 if ( var < nums ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 while ( nums ) 
 { 
 call_func ( var , nums ) ; 
 var = call_func ( var , ( struct struct_name * ) & var , & var ) ; 
 if ( var ! = var ) 
 { 
 printf ( words ) ; 
 if ( var < var ) 
 { 
 call_func ( NULL , nums , var , ( var ) var , nums , & var ) ; 
 var [ var ] . var = var + nums ; 
 var [ var ] . var = var ; 
 var [ var ] . var = nums ; 
 var . var = var ; 
 var . var = var ; 
 var = var + nums ; 
 call_func ( var . var , words , var ) ; 
 call_func ( var , ( data_type * ) & var , sizeof ( var ) , nums ) ; 
 if ( var > nums ) 
 call_func ( NULL , nums , var , ( var ) & var , nums , & var ) ; 
 var + + ; 
 } 
 else 
 call_func ( var , var , sizeof ( var ) , nums ) ; 
 } 
 } 
 call_func ( ) ; 
 } 
 var var func ( var var ) 
 { 
 var var = ( var ) var ; 
 int var ; 
 char var [ nums ] ; 
 var ; 
 struct struct_name struct_var ; 
 struct struct_name * struct_var ; 
 int var ; 
 while ( nums ) 
 { 
 var = call_func ( var , var , nums , nums ) ; 
 if ( var >= nums ) 
 { 
 var = ( struct ) var ; 
 if ( var - > var = = var ) 
 { 
 var = call_func ( var - > var ) ; 
 var . var = var ; 
 call_func ( var , ( data_type * ) & var , sizeof ( var ) , nums ) ; 
 } 
 if ( var - > var = = var ) 
 { 
 var = call_func ( var - > var ) ; 
 var [ var + + ] . var = var ; 
 printf ( words ) ; 
 var = nums ; 
 } 
 if ( var - > var = = var ) 
 { 
 printf ( words , var - > var ) ; 
 } 
 if ( var - > var = = var ) 
 { 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 if ( var - > var [ var ] ! = var & & var - > var [ var ] ! = nums ) 
 { 
 var [ var + + ] . var = var - > var [ var ] ; 
 printf ( words ) ; 
 var = nums ; 
 } 
 } 
 if ( ! var ) 
 printf ( words ) ; 
 } 
 } 
 } 
 return nums ; 
 } 
 void func ( ) 
 { 
 call_func ( ) ; 
 call_func ( nums ) ; 
 } 
 void func ( ) 
 { 
 var var ; 
 struct struct_name struct_var ; 
 int var ; 
 char var [ nums ] ; 
 var var = nums ; 
 struct struct_name struct_var ; 
 char var [ nums ] ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var . var = var ; 
 var . var = call_func ( nums ) ; 
 var . var . var . var = call_func ( var ) ; 
 var = call_func ( var , var , nums ) ; 
 var = call_func ( var , ( struct struct_name * ) & var , sizeof ( struct struct_name ) ) ; 
 if ( var < nums ) 
 { 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 call_func ( NULL , nums , var , ( var ) var , nums , & var ) ; 
 while ( nums ) 
 { 
 memset ( var , nums , nums ) ; 
 scanf ( words , var ) ; 
 if ( var ) 
 { 
 if ( sizeof ( var ) > nums ) 
 { 
 memset ( & var , nums , sizeof ( var ) ) ; 
 call_func ( var . var , var ) ; 
 var . var = var [ nums ] . var ; 
 var . var = var ; 
 var . var = var ; 
 call_func ( var , ( data_type * ) & var , sizeof ( var ) , nums ) ; 
 } 
 if ( strcmp ( words , var ) = = nums ) 
 { 
 memset ( & var , nums , sizeof ( var ) ) ; 
 call_func ( var . var , words ) ; 
 var . var = var ; 
 var . var = var ; 
 call_func ( var , ( data_type * ) & var , sizeof ( var ) , nums ) ; 
 call_func ( ) ; 
 } 
 } 
 else 
 printf ( words ) ; 
 call_func ( nums ) ; 
 } 
 } 
 int func ( void ) 
 { 
 int var = nums ; 
 var var ; 
 call_func ( call_func ( nums , nums ) , & var ) ; 
 do 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 } while ( var < nums | | var > nums ) ; 
 switch ( var ) 
 { 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 } 
 printf ( words ) ; 
 return nums ; 
 } 
 var call_func ( var , words ) 
 var var ; 
 var * var ; 
 var var ; 
 char var [ nums ] ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void func ( ) 
 { 
 system ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 
 } 
 void func ( ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 call_func ( ) ; 
 } 
 else 
 { 
 call_func ( nums ) ; 
 } 
 } 
 int func ( ) 
 { 
 int var ; 
 
 call_func ( & var ) ; 
 
 call_func ( ) ; 
 
 scanf ( words , & var ) ; 
 
 while ( var ) 
 { 
 switch ( var ) 
 { 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( nums ) ; 
 default : break ; 
 } 
 scanf ( words , & var ) ; 
 } 
 } 
 void func ( ) 
 { 
 
 if ( ! func ( & var , words , words , words , words , nums , NULL , nums ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 
 if ( func ( & var , words ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 var = call_func ( & var ) ; 
 if ( func ( var ) ! = NULL ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( ( var = func ( var ) ) ) 
 { 
 call_func ( var , words , var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] ) ; 
 } 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 call_func ( var ) ; 
 } 
 call_func ( & var ) ; 
 } 
 call_func ( ) ; 
 } 
 void func ( ) 
 { 
 int var ; 
 
 char var [ nums ] ; 
 char * var ; 
 char * var ; 
 char * var ; 
 
 char * var ; 
 char var [ nums ] = { words } ; 
 
 
 if ( ! func ( & var , words , words , words , words , nums , NULL , nums ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 if ( func ( & var , words ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 var = call_func ( & var ) ; 
 var = call_func ( var ) ; 
 var = call_func ( var ) ; 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 
 var = words ; 
 call_func ( var , var ) ; 
 call_func ( var , words 
 call_func ( var , var ) ; 
 call_func ( var , words , words ) ; 
 if ( func ( var ) ! = NULL ) 
 { 
 
 do 
 { 
 if ( ! strcmp ( var , var [ nums ] ) ) 
 { 
 
 printf ( words ) ; 
 getch ( ) ; 
 call_func ( var ) ; 
 call_func ( & var ) ; 
 call_func ( ) ; 
 return ; 
 } 
 } while ( var = call_func ( var ) ) ; 
 } 
 
 var = ( char * ) malloc ( nums ) ; 
 var = ( char * ) malloc ( nums ) ; 
 var = ( char * ) malloc ( nums ) ; 
 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 call_func ( var , var ) ; 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 call_func ( var , words , words ) ; 
 call_func ( var , var ) ; 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 call_func ( var , words , words ) ; 
 call_func ( var , var ) ; 
 func ( var , words ) words 
 
 
 if ( call_func ( & var , var ) ! = nums ) 
 { 
 call_func ( var , words , call_func ( & var ) ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 call_func ( var ) ; 
 } 
 call_func ( & var ) ; 
 } 
 call_func ( ) ; 
 } 
 void func ( ) 
 { 
 char var [ nums ] ; 
 char * var ; 
 char var [ nums ] = { words } ; 
 char var [ nums ] = { words } ; 
 
 char * var ; 
 char * var ; 
 char * var ; 
 
 if ( ! func ( & var , words , words , words , words , nums , NULL , nums ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 
 
 printf ( words ) ; 
 
 scanf ( words , var ) ; 
 var = words ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 
 
 
 
 if ( func ( & var , var ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 var = call_func ( & var ) ; 
 if ( func ( var ) ! = NULL ) 
 { 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( ( var = func ( var ) ) ) 
 { 
 call_func ( var , words , var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] ) ; 
 } 
 printf ( words ) ; 
 } 
 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 
 var = words 
 call_func ( var , var ) ; 
 
 var = ( char * ) malloc ( nums ) ; 
 var = ( char * ) malloc ( nums ) ; 
 var = ( char * ) malloc ( nums ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 
 call_func ( var , var ) ; 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 call_func ( var , words , var = words ) ; 
 call_func ( var , var ) ; 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 call_func ( var , words , var = words ) ; 
 call_func ( var , var ) ; 
 
 call_func ( var , words var var = words 
 call_func ( var , var ) ; 
 
 
 if ( func ( & var , var ) ! = nums ) 
 { 
 call_func ( var , words , call_func ( & var ) ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 call_func ( var ) ; 
 } 
 call_func ( & var ) ; 
 call_func ( ) ; 
 } 
 void func ( ) 
 { 
 char var [ nums ] ; 
 char * var ; 
 char var [ nums ] = { words } ; 
 char var [ nums ] = { words } ; 
 if ( ! func ( & var , words , words , words , words , nums , NULL , nums ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = words ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 
 
 
 if ( func ( & var , var ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 var = call_func ( & var ) ; 
 if ( func ( var ) ! = NULL ) 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( ( var = func ( var ) ) ) 
 { 
 call_func ( var , words , var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] ) ; 
 } 
 printf ( words ) ; 
 } 
 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 if ( strcmp ( var , words ) = = nums | | strcmp ( var , words ) = = nums ) 
 { 
 var = words ; 
 printf ( words , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 
 
 if ( func ( & var , var ) ! = nums ) 
 { 
 call_func ( var , words , call_func ( & var ) ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 } 
 call_func ( var ) ; 
 } 
 call_func ( & var ) ; 
 call_func ( ) ; 
 } 
 void func ( ) 
 { 
 char var [ nums ] ; 
 char * var ; 
 char var [ nums ] = { words } ; 
 
 if ( ! func ( & var , words , words , words , words , nums , NULL , nums ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = words ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 
 if ( func ( & var , var ) ) 
 { 
 printf ( words ) ; 
 } 
 else 
 { 
 var = call_func ( & var ) ; 
 if ( func ( var ) ! = NULL ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 while ( ( var = func ( var ) ) ) 
 { 
 call_func ( var , words , var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] ) ; 
 } 
 printf ( words ) ; 
 } 
 else 
 { 
 printf ( words ) ; 
 } 
 call_func ( var ) ; 
 } 
 call_func ( & var ) ; 
 } 
 call_func ( ) ; 
 } 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 var var 
 #ifndef var 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #endif 
 #endif 
 #define var nums 
 #define var words 
 #define var words 
 var nums 
 #define var 
 #define var words 
 #define var nums 
 #define var words 
 #define words 
 #define words 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] [ var ] = { words } ; 
 var var = call_func ( var , var ) ; 
 var var [ var ] ; 
 var var [ var ] ; 
 char var [ var * var + var - nums ] ; 
 char var [ var * var + var - nums ] ; 
 int var ; 
 int var ; 
 int var ; 
 char var [ ( var + var ) * ( var ) + ( var - nums ) * nums + nums ] = words ; 
 var var ; 
 char var [ var ] ; 
 char var [ var ] ; 
 var var ; 
 var var ; 
 switch ( var ) 
 { 
 case var : 
 call_func ( ) ; 
 call_func ( var , var , nums , var | var | var | var | var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , words % words , var ) ; 
 call_func ( var , var , var , var , nums , nums ) ; 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 call_func ( var [ nums ] . var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var = var ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var , var ) ; 
 call_func ( & var , words ) ; 
 if ( ! func ( var , var , var ) ) 
 { 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( var [ nums ] . var , words ) ; 
 var [ nums ] . var = var ; 
 call_func ( var [ nums ] . var , words , var [ nums ] . var ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 var [ nums ] . var = var ; 
 call_func ( var , words , var , var ) ; 
 call_func ( & var , var ) ; 
 var = call_func ( & var ) ; 
 var = call_func ( var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var = call_func ( var ) ; 
 call_func ( var [ nums ] . var , words , var [ nums ] ) ; 
 call_func ( var , var , var , var ) ; 
 if ( ! func ( var , var , var ) ) 
 { 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 } 
 call_func ( var ) ; 
 call_func ( var , words , var ) ; 
 call_func ( & var , var ) ; 
 var = call_func ( & var ) ; 
 var = call_func ( var ) ; 
 var = ( var ) call_func ( var [ nums ] ) ; 
 if ( var ! = var ) 
 { 
 call_func ( var , words , words , var ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( & var , words ) ; 
 call_func ( var , words % words , var ) ; 
 call_func ( var , var , var , var , nums , nums ) ; 
 call_func ( var , words , words , var ) ; 
 break ; 
 case var : 
 call_func ( var , var , var , var ) ; 
 break ; 
 case var : 
 var = nums ; 
 call_func ( var [ nums ] . var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var = var ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , var + var , var [ var ] . var , var ) ; 
 } 
 if ( func ( var , var , var ) > nums ) 
 { 
 call_func ( var , var , var , var , var , var ) ; 
 } 
 else 
 { 
 call_func ( var , words , words , var ) ; 
 } 
 case var : 
 call_func ( var , nums ) ; 
 break ; 
 } 
 return var ; 
 break ; 
 case var : 
 if ( var = = var ) 
 { 
 var = ( var ) var ; 
 if ( var = = var - > var ) 
 { 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 return nums ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , var , var , var , var ) ; 
 call_func ( var , var + var , var ) ; 
 } 
 var = call_func ( call_func ( var , var ) , var , nums , ( var ) var ) ; 
 call_func ( call_func ( var , var ) , var , var , nums ) ; 
 } 
 } 
 return nums ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return var ; 
 } 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 #ifndef var 
 #define var 
 var var call_func ( var var , var var , var var , var var ) ; 
 var var 
 void func ( var var , data_type ( * var ) [ var ] , data_type var ) 
 { 
 var var ; 
 int var ; 
 var . var = var | var | var ; 
 if ( var = = nums ) 
 { 
 var . var = var ; 
 var . var = nums ; 
 } 
 else 
 { 
 var . var = var ; 
 var . var = nums ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var . var = var [ var ] ; 
 call_func ( var , var , & var ) ; 
 } 
 } 
 void func ( var var , data_type * var , data_type var , data_type * var , data_type var , data_type var ) 
 { 
 char var [ var ] ; 
 int var ; 
 var var ; 
 int var ; 
 int var ; 
 if ( var ) 
 { 
 call_func ( var , var , nums , nums ) ; 
 } 
 if ( ( var = = NULL ) | | ( func ( var ) = = nums ) ) 
 { 
 call_func ( var , words , var ) ; 
 } 
 else 
 { 
 call_func ( var , words , var , var ) ; 
 } 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var ) ; 
 return ; 
 } 
 var = call_func ( & var ) ; 
 var = ( int ) call_func ( var ) ; 
 var . var = var ; 
 var . var = var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var . var = var ; 
 var = call_func ( var ) ; 
 var . var = nums ; 
 var . var = words ; 
 call_func ( var , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , var , var , var [ var + var ] ) ; 
 } 
 } 
 call_func ( var ) ; 
 } 
 void func ( var var , data_type * var , data_type * var , data_type var ) 
 { 
 int var = call_func ( var , var , nums , nums ) ; 
 char var [ var ] ; 
 char var [ var ] ; 
 if ( var = = - nums ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 return ; 
 } 
 if ( var ! = func ( call_func ( var ) , words , words , var | var , nums ) ) 
 { 
 return ; 
 } 
 call_func ( var , var , nums , var , var ) ; 
 if ( var = = var ) 
 { 
 call_func ( var , words % words , var , var , var ) ; 
 } 
 if ( var = = var ) 
 { 
 call_func ( var , words , var , var , var ) ; 
 } 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 } 
 call_func ( var , var ) ; 
 call_func ( var , words , words , var | var , nums ) ; 
 } 
 var func ( data_type * var , data_type * var , data_type * var ) 
 { 
 char var [ var ] ; 
 call_func ( var , words , var , var , var ) ; 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 return nums ; 
 } 
 return nums ; 
 } 
 var func ( var * var , data_type var , data_type * var , data_type * var ) 
 { 
 int var = nums ; 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( func ( var [ var ] . var ) > nums ) 
 { 
 if ( var = = nums ) 
 { 
 if ( var [ var ] . var = = var ) 
 { 
 call_func ( var , words , var [ var ] . var ) ; 
 } 
 else if ( var [ var ] . var = = var ) 
 { 
 call_func ( var , words % words , var [ var ] . var ) ; 
 } 
 call_func ( var , words , var [ var ] . var ) ; 
 var + + ; 
 } 
 else 
 { 
 if ( var [ var ] . var = = var ) 
 { 
 call_func ( var , words , var , var [ var ] . var ) ; 
 } 
 else if ( var [ var ] . var = = var ) 
 { 
 call_func ( var , words % words , var , var [ var ] . var ) ; 
 } 
 call_func ( var , words , var , var [ var ] . var ) ; 
 } 
 } 
 } 
 return var ; 
 } 
 var func ( var * var , data_type var , data_type * var ) 
 { 
 int var = nums ; 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( func ( var [ var ] . var ) > nums ) 
 { 
 if ( var = = nums ) 
 { 
 if ( var [ var ] . var = = var ) 
 { 
 call_func ( var , words , var [ var ] . var , var [ var ] . var ) ; 
 } 
 else if ( var [ var ] . var = = var ) 
 { 
 call_func ( var , words % words , var [ var ] . var , var [ var ] . var ) ; 
 } 
 } 
 else 
 { 
 if ( var [ var ] . var = = var ) 
 { 
 call_func ( var , words , var , var [ var ] . var , var [ var ] . var ) ; 
 } 
 else if ( var [ var ] . var = = var ) 
 { 
 call_func ( var , words % words , var , var [ var ] . var , var [ var ] . var ) ; 
 } 
 } 
 var + + ; 
 } 
 } 
 return var ; 
 } 
 var func ( data_type * var , data_type * var ) 
 { 
 call_func ( & var , words ) ; 
 if ( func ( & var ) ) 
 { 
 return nums ; 
 } 
 var = call_func ( & var ) ; 
 var = call_func ( var ) ; 
 call_func ( var , words , var , var [ nums ] ) ; 
 return nums ; 
 } 
 void func ( var var , data_type * var , data_type * var , data_type var , data_type * var , data_type var ) 
 { 
 char var [ var ] ; 
 char var [ var ] ; 
 int var ; 
 var = call_func ( var , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 return ; 
 } 
 call_func ( var , var , nums , var , var ) ; 
 if ( var = = var ) 
 { 
 call_func ( var , words % words , var , var , var , var ) ; 
 } 
 if ( var = = var ) 
 { 
 call_func ( var , words , var , var , var , var ) ; 
 } 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 return ; 
 } 
 call_func ( var , var , var , words , nums , nums ) ; 
 call_func ( var , words , words , var ) ; 
 } 
 void func ( var var , var * var , data_type * var , data_type ( * var ) [ var ] , data_type var , data_type var ) 
 { 
 var var ; 
 var var ; 
 int var ; 
 if ( func ( * var ) = = nums ) 
 { 
 call_func ( var , & var ) ; 
 var . var = var . var + nums * ( var / nums ) ; 
 var . var = var . var + ( var % nums ) * ( var . var - var . var ) / nums ; 
 var = ( var . var - var . var ) / nums ; 
 * var = call_func ( var , var , var , var | var | var | var , var . var , var . var , nums , var , var , nums , var , nums ) ; 
 call_func ( * var , var , nums , var | var | var | var | var ) ; 
 call_func ( * var , var , var ) ; 
 call_func ( * var , var ) ; 
 call_func ( var , var , ( var ) * var , nums ) ; 
 } 
 } 
 void func ( var var , var var , data_type * var , data_type * var , data_type var ) 
 { 
 char var [ var ] ; 
 char var [ var ] ; 
 call_func ( var , var , var ) ; 
 if ( func ( var ) > nums ) 
 { 
 call_func ( var , words % struct_name % words , var , var , words ) ; 
 call_func ( var , var , var , var , nums , nums ) ; 
 } 
 var call_func ( var , words ) 
 var call_func ( var , words ) 
 var var 
 #define var 
 #else 
 #define var extern 
 #endif 
 #define var nums 
 var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 #ifndef var 
 #define var 
 typedef struct 
 { 
 char var [ var ] ; 
 char var [ var ] ; 
 int var ; 
 } var ; 
 #endif 
 void call_func ( var var , data_type ( * var ) [ var ] , data_type var ) ; 
 void call_func ( var var , data_type * var , data_type var , data_type * var , data_type var , data_type var ) ; 
 void call_func ( var var , data_type * var , data_type * var , data_type var ) ; 
 var call_func ( data_type * var , data_type * var , data_type * var ) ; 
 var call_func ( var * var , data_type var , data_type * var , data_type * var ) ; 
 var call_func ( var * var , data_type var , data_type * var ) ; 
 var call_func ( data_type * var , data_type * var ) ; 
 void call_func ( var var , data_type * var , data_type * var , data_type var , data_type * var , data_type var ) ; 
 void call_func ( var var , var * var , data_type * var , data_type ( * var ) [ var ] , data_type var , data_type var ) ; 
 void call_func ( var var , var var , data_type * var , data_type * var , data_type var ) ; 
 #define var nums 
 #define var nums 
 var var call_func ( var , var , var , var ) ; 
 var var call_func ( var , var , var , var ) ; 
 var var call_func ( var var , var var , var var , var var ) ; 
 int var func ( var var , var var , 
 var var , data_type var ) 
 { 
 var var ; 
 char var [ var ] ; 
 char var [ var ] ; 
 char var [ var ] ; 
 char var [ var ] ; 
 FILE * var ; 
 var = fopen ( words , words ) ; 
 if ( var = = NULL ) 
 { 
 var = fopen ( words , words ) ; 
 call_func ( var , words , words , words , words , words ) ; 
 fclose ( var ) ; 
 call_func ( NULL , call_func ( words ) , words , var | var , nums ) ; 
 call_func ( nums ) ; 
 } 
 call_func ( var , words , var , var , var , var ) ; 
 fclose ( var ) ; 
 call_func ( & var ) ; 
 if ( ! func ( & var , var , var , var , var , nums , NULL , nums ) ) 
 { 
 call_func ( NULL , call_func ( words ) , words , var ) ; 
 return nums ; 
 } 
 var = var ; 
 call_func ( var , call_func ( var ) , NULL , var ) ; 
 while ( func ( & var , NULL , nums , nums ) ) 
 
 { 
 call_func ( & var ) ; 
 call_func ( & var ) ; 
 } 
 
 return var . var ; 
 
 } 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] ; 
 char var [ var ] ; 
 char var [ var ] ; 
 switch ( var ) 
 { 
 
 case var : 
 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 call_func ( call_func ( var , var ) , var , var ) ; 
 call_func ( call_func ( var , var ) , var , var ) ; 
 call_func ( var , words % words % words , var , var ) ; 
 if ( func ( & var , var ) ) 
 { 
 call_func ( NULL , call_func ( words ) , words , var ) ; 
 call_func ( nums ) ; 
 } 
 var = call_func ( & var ) ; 
 if ( func ( var ) ! = nums ) 
 { 
 call_func ( var , nums ) ; 
 var = call_func ( var ) ; 
 call_func ( var , words , var [ var ] ) ; 
 var = call_func ( var [ var ] ) ; 
 call_func ( call_func ( var , call_func ( var ) , NULL , var ) , var ) ; 
 } 
 else 
 { 
 call_func ( NULL , call_func ( words ) , words , var ) ; 
 return nums ; 
 } 
 call_func ( var ) ; 
 call_func ( & var , words ) ; 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 call_func ( nums ) ; 
 break ; 
 } 
 return var ; 
 break ; 
 case var : 
 call_func ( nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return nums ; 
 } 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ nums ] [ nums ] = { words , words , words , words , words } ; 
 var var ; 
 var var ; 
 int var [ nums ] ; 
 var var ; 
 var var ; 
 var var [ nums ] ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 var var ; 
 int var ; 
 int var ; 
 var var ; 
 switch ( var ) 
 { 
 case var : 
 call_func ( var , var , nums , nums , nums , nums , var | var ) ; 
 
 var = call_func ( var , var , words , var | var | var , nums , nums , nums , nums , var , NULL , var , NULL ) ; 
 call_func ( var , var , sizeof ( var ) , nums ) ; 
 var = call_func ( nums , nums , var , nums , nums ) ; 
 var = call_func ( var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var , nums , ( var ) ( var ) var ) ; 
 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 var [ var ] = call_func ( var , call_func ( var , call_func ( var + var ) ) ) ; 
 } 
 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 var [ var ] . var = var [ var ] ; 
 var [ var ] . var = ( int ) var [ var ] ; 
 var [ var ] . var = var ; 
 var [ var ] . var = var ; 
 } 
 
 var [ nums ] . var = var ; 
 var [ nums ] . var = var ; 
 var [ nums ] . var = var ; 
 
 var [ nums ] . var = var ; 
 var [ nums ] . var = var ; 
 call_func ( var , var , nums , ( var ) ( var ) var ) ; 
 call_func ( var , var , nums , call_func ( nums , nums ) ) ; 
 call_func ( var , var , nums , nums ) ; 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 if ( var > nums ) 
 { 
 call_func ( var , call_func ( var ) , var , var ) ; 
 } 
 else 
 { 
 call_func ( var , words , words , var ) ; 
 } 
 break ; 
 case var : 
 call_func ( var , call_func ( var ) , var , var ) ; 
 break ; 
 case var : 
 call_func ( var , call_func ( var ) , var , var ) ; 
 break ; 
 case var : 
 call_func ( var , call_func ( var ) , var , var ) ; 
 break ; 
 case var : 
 call_func ( var , call_func ( var ) , var , var ) ; 
 break ; 
 case var : 
 call_func ( var , call_func ( var ) , var , var ) ; 
 break ; 
 case var : 
 call_func ( var , call_func ( var ) , var , var ) ; 
 break ; 
 case var : 
 call_func ( var , call_func ( var ) , var , var ) ; 
 break ; 
 case var : 
 call_func ( var , call_func ( var ) , var , var ) ; 
 break ; 
 break ; 
 case var : 
 call_func ( var , call_func ( var ) , var , var ) ; 
 break ; 
 case var : 
 call_func ( var , call_func ( var ) , var , var ) ; 
 break ; 
 case var : 
 call_func ( var , call_func ( var ) , var , var ) ; 
 break ; 
 case var : 
 call_func ( var , call_func ( var ) , var , var ) ; 
 break ; 
 case var : 
 call_func ( var , call_func ( var ) , var , var ) ; 
 break ; 
 case var : 
 call_func ( var , call_func ( var ) , var , var ) ; 
 break ; 
 case var : 
 call_func ( var , call_func ( var ) , var , var ) ; 
 break ; 
 case var : 
 call_func ( var , call_func ( var ) , var , var ) ; 
 break ; 
 case var : 
 call_func ( nums ) ; 
 break ; 
 case var : 
 call_func ( nums ) ; 
 break ; 
 } 
 return nums ; 
 break ; 
 case var : 
 var = call_func ( var , & var ) ; 
 call_func ( var , & var ) ; 
 var = var . var - var . var ; 
 var = var . var - var . var ; 
 var = call_func ( var ) ; 
 var = call_func ( var , call_func ( var ) ) ; 
 call_func ( var , sizeof ( var ) , & var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , nums , nums , var , var , var , nums , nums , var . var , var . var , var ) ; 
 call_func ( var ) ; 
 call_func ( var , & var ) ; 
 return nums ; 
 case var : 
 call_func ( nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return nums ; 
 } 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] ; 
 char var [ var ] ; 
 char var [ var ] ; 
 char var [ var ] ; 
 FILE * var ; 
 switch ( var ) 
 { 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 if ( func ( var ) = = nums | | call_func ( var ) = = nums | | call_func ( var ) = = nums | | call_func ( var ) = = nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 var = fopen ( words , words ) ; 
 if ( var = = NULL ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( var , words , var , var , var , var ) ; 
 call_func ( var , words , words , var | var , nums ) ; 
 call_func ( var , nums ) ; 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 } 
 return nums ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 } 
 return nums ; 
 #define var nums 
 #define var words 
 #define var words 
 #define var 
 #define var words 
 var words 
 var words 
 #define words 
 #define var words 
 #define var 
 #define var 
 #define var words 
 #define var nums 
 #define words 
 #define words 
 #define words 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words } ; 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words , words } ; 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words } ; 
 var var = call_func ( var , var ) ; 
 static var var ; 
 static var var ; 
 var var [ var ] ; 
 var var [ var ] ; 
 char var [ var * var + var - nums ] ; 
 char var [ var * var + var - nums ] ; 
 int var ; 
 int var ; 
 char var [ ( var + var ) * ( var ) + ( var - nums ) * nums + nums ] = words ; 
 var var ; 
 char var [ var ] ; 
 var var ; 
 var 
 char var [ var ] ; 
 var var ; 
 #endif 
 switch ( var ) 
 { 
 case var : 
 call_func ( ) ; 
 call_func ( var , var , nums , var | var | var | var | var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , words , var ) ; 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var ) ; 
 return nums ; 
 } 
 var = call_func ( & var ) ; 
 var = call_func ( var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var = call_func ( var ) ; 
 call_func ( call_func ( var , var ) , var , nums , ( var ) var [ nums ] ) ; 
 call_func ( call_func ( var , var ) , var , nums , ( var ) var [ nums ] ) ; 
 } 
 call_func ( var ) ; 
 call_func ( call_func ( var , var ) , words ) ; 
 call_func ( var , & var , words , var , var , nums ) ; 
 call_func ( var , & var , words , var , var , nums ) ; 
 call_func ( call_func ( var , var ) , var ) ; 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var = var ; 
 } 
 var [ nums ] . var = var ; 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( call_func ( var , var ) , var , var , ( var ) var [ nums ] . var ) ; 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( call_func ( var , var ) , var , var , ( var ) var [ nums ] . var ) ; 
 if ( strcmp ( var [ nums ] . var , var [ nums ] . var ) = = nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( & var ) ; 
 call_func ( var [ nums ] . var , words , var . var , var . var , var . var , var . var , var . var , var . var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( & var , words ) ; 
 if ( ! func ( var , var , var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( var , var , var ) ; 
 call_func ( var , words % words % words , var , var , var , var [ nums ] . var , var , var [ nums ] . var , var , var [ nums ] . var ) ; 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( var , words % words % words , var , var , var , var [ nums ] . var , var , var [ nums ] . var , var , var [ nums ] . var ) ; 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( & var , words ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var , var , var , nums , nums ) ; 
 call_func ( var , words , words , var ) ; 
 break ; 
 case var : 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , & var , words , var , var , nums ) ; 
 } 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , & var , words , var , var , nums ) ; 
 } 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 break ; 
 case var : 
 if ( func ( var ) = = var ) 
 { 
 call_func ( call_func ( var , var ) , var , var , var , var ) ; 
 } 
 break ; 
 case var : 
 if ( func ( var ) = = var ) 
 { 
 call_func ( call_func ( var , var ) , var , var , var , var ) ; 
 } 
 break ; 
 } 
 return var ; 
 break ; 
 case var : 
 var = ( var ) var ; 
 if ( var = = var - > var ) 
 { 
 var = call_func ( var - > var , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 return nums ; 
 } 
 call_func ( var - > var , var , nums , var , var ) ; 
 if ( var - > var = = var ) 
 { 
 call_func ( call_func ( var , var ) , var ) ; 
 } 
 if ( var - > var = = var ) 
 { 
 call_func ( call_func ( var , var ) , var ) ; 
 } 
 } 
 return nums ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return var ; 
 } 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 #ifndef var 
 #define var 
 var var call_func ( var var , var var , var var , var var ) ; 
 #define var nums 
 #define var words 
 #define var words 
 var nums 
 #define var 
 #define var words 
 #define var words 
 #define var nums 
 #define var words 
 #define words 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words , words } ; 
 var var = call_func ( var , var ) ; 
 var var [ var ] ; 
 var var [ var ] ; 
 char var [ var * var + var - nums ] ; 
 char var [ var * var + var - nums ] ; 
 int var ; 
 int var ; 
 int var ; 
 char var [ ( var + var ) * ( var ) + ( var - nums ) * nums + nums ] = words ; 
 var var ; 
 char var [ var ] ; 
 var var ; 
 char var [ var ] ; 
 var var ; 
 switch ( var ) 
 { 
 case var : 
 call_func ( ) ; 
 call_func ( var , var , nums , var | var | var | var | var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , var , var , words , nums , nums ) ; 
 call_func ( var , words , var ) ; 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var ) ; 
 return nums ; 
 } 
 var = call_func ( & var ) ; 
 var = call_func ( var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var = call_func ( var ) ; 
 call_func ( call_func ( var , var ) , var , nums , ( var ) var [ nums ] ) ; 
 } 
 call_func ( var ) ; 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var = var ; 
 } 
 var [ nums ] . var = var ; 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( call_func ( var , var ) , var , var , ( var ) var [ nums ] . var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( & var , words ) ; 
 if ( ! func ( var , var , var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( var [ nums ] . var , words ) ; 
 var [ nums ] . var = var ; 
 call_func ( var [ nums ] . var , words , var [ nums ] . var ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 var [ nums ] . var = var ; 
 call_func ( var , words , var , var ) ; 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 var = call_func ( & var ) ; 
 var = call_func ( var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var = call_func ( var ) ; 
 call_func ( var [ nums ] . var , words , var [ nums ] ) ; 
 call_func ( var , var , var , var ) ; 
 if ( ! func ( var , var , var ) ) 
 { 
 call_func ( var , words , words , var ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 } 
 call_func ( var ) ; 
 call_func ( var , words , var ) ; 
 call_func ( & var , var ) ; 
 var = call_func ( & var ) ; 
 var = call_func ( var ) ; 
 var = ( var ) call_func ( var [ nums ] ) ; 
 if ( var ! = var ) 
 { 
 call_func ( var , words , words , var ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( & var , words ) ; 
 call_func ( var , var , var , words , nums , nums ) ; 
 call_func ( var , words , words , var ) ; 
 break ; 
 case var : 
 call_func ( var , var , var , var ) ; 
 break ; 
 case var : 
 var = nums ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var = var ; 
 } 
 var [ nums ] . var = var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , var + var , var [ var ] . var , var ) ; 
 } 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 call_func ( var [ nums ] . var , words ) ; 
 } 
 else 
 { 
 call_func ( call_func ( var , var ) , var , var , ( var ) var [ nums ] . var ) ; 
 } 
 if ( func ( var , var , var ) > nums ) 
 { 
 call_func ( var , var , var , var , var , var ) ; 
 } 
 else 
 { 
 call_func ( var , words , words , var ) ; 
 } 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 break ; 
 } 
 return var ; 
 break ; 
 case var : 
 if ( var = = var ) 
 { 
 var = ( var ) var ; 
 if ( var = = var - > var ) 
 { 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 return nums ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , var , var , var , var ) ; 
 call_func ( var , var + var , var ) ; 
 } 
 call_func ( var , var , var - nums , var , var ) ; 
 var = call_func ( call_func ( var , var ) , var , nums , ( var ) var ) ; 
 call_func ( call_func ( var , var ) , var , var , nums ) ; 
 } 
 } 
 return nums ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return var ; 
 } 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 #ifndef var 
 #define var 
 var var call_func ( var var , var var , var var , var var ) ; 
 #endif 
 #define var nums 
 #define var words 
 #define var words 
 var nums 
 #define var 
 #define var 
 #define var words 
 var words 
 var words 
 #define words 
 #define var words 
 #define var 
 #define var 
 #define var words 
 #define var nums 
 #define words 
 #define words 
 #define words 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words } ; 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words , words } ; 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words } ; 
 var var = call_func ( var , var ) ; 
 static var var ; 
 static var var ; 
 var var [ var ] ; 
 var var [ var ] ; 
 char var [ var * var + var - nums ] ; 
 char var [ var * var + var - nums ] ; 
 int var ; 
 int var ; 
 char var [ ( var + var ) * ( var ) + ( var - nums ) * nums + nums ] = words ; 
 var var ; 
 char var [ var ] ; 
 var var ; 
 double var ; 
 double var ; 
 var 
 char var [ var ] ; 
 var var ; 
 #endif 
 switch ( var ) 
 { 
 case var : 
 call_func ( ) ; 
 call_func ( var , words ) ; 
 call_func ( var , var , nums , var | var | var | var | var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , words , var ) ; 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 var = call_func ( & var ) ; 
 var = call_func ( var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var = call_func ( var ) ; 
 call_func ( call_func ( var , var ) , var , nums , ( var ) var [ nums ] ) ; 
 } 
 call_func ( var ) ; 
 call_func ( call_func ( var , var ) , words ) ; 
 call_func ( var , & var , words , var , var , nums ) ; 
 call_func ( var , & var , words , var , var , nums ) ; 
 call_func ( call_func ( var , var ) , var ) ; 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var = var ; 
 } 
 var [ nums ] . var = var ; 
 var [ nums ] . var = var ; 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( & var ) ; 
 call_func ( var [ nums ] . var , words , var . var , var . var , var . var , var . var , var . var , var . var ) ; 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( call_func ( var , var ) , var , var , ( var ) var [ nums ] . var ) ; 
 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( var , var , var , var ) ; 
 if ( func ( var ) < nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 var = call_func ( var ) ; 
 if ( ( int ) ( var * nums ) < nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 if ( ( int ) ( var * nums ) > nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( var , words % words , var , var , var [ nums ] . var ) ; 
 call_func ( & var , var ) ; 
 var = call_func ( & var ) ; 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 var = call_func ( var ) ; 
 var = call_func ( var [ nums ] ) * call_func ( var [ nums ] . var ) ; 
 call_func ( var , words , var ) ; 
 call_func ( var , var , var ) ; 
 var = var * var ; 
 call_func ( var ) ; 
 call_func ( var [ nums ] . var , words , var ) ; 
 call_func ( var , var , var [ nums ] . var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( & var , words ) ; 
 if ( ! func ( var , var , var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( var , var , var ) ; 
 call_func ( var , words % words % words , var , var , var , var [ nums ] . var , var , var [ nums ] . var , var , var [ nums ] . var ) ; 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( & var , words ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var , var , var , nums , nums ) ; 
 call_func ( var , words , words , var ) ; 
 case var : 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , & var , words , var , var , nums ) ; 
 } 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , & var , words , var , var , nums ) ; 
 } 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 break ; 
 case var : 
 if ( func ( var ) = = var ) 
 { 
 call_func ( call_func ( var , var ) , var , var , var , var ) ; 
 } 
 break ; 
 case var : 
 if ( func ( var ) = = var ) 
 { 
 call_func ( call_func ( var , var ) , var , var , var , var ) ; 
 } 
 break ; 
 } 
 return var ; 
 break ; 
 case var : 
 var = ( var ) var ; 
 if ( var = = var - > var ) 
 { 
 var = call_func ( var - > var , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 return nums ; 
 } 
 call_func ( var - > var , var , nums , var , var ) ; 
 if ( var - > var = = var ) 
 { 
 call_func ( call_func ( var , var ) , var ) ; 
 } 
 if ( var - > var = = var ) 
 { 
 call_func ( call_func ( var , var ) , var ) ; 
 } 
 } 
 return nums ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return var ; 
 } 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 #ifndef var 
 #define var 
 var var call_func ( var var , var var , var var , var var ) ; 
 #define var nums 
 #define var nums 
 #define var words 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words } ; 
 char var [ var ] [ var ] = { words , words , words , words } ; 
 var var = call_func ( var , var ) ; 
 int var ; 
 int var ; 
 char var [ var ] ; 
 char var [ var ] ; 
 char var [ var ] = words ; 
 int var ; 
 int var ; 
 switch ( var ) 
 { 
 case var : 
 call_func ( ) ; 
 call_func ( var , words ) ; 
 call_func ( var , var , nums , var | var | var | var | var ) ; 
 call_func ( var , var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( call_func ( var , var ) , var , nums , ( var ) var [ var ] ) ; 
 } 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = var ) 
 { 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 call_func ( call_func ( var , var ) , var , var ) ; 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 switch ( var ) 
 { 
 case nums : 
 call_func ( var , words % words , var ) ; 
 break ; 
 case nums : 
 call_func ( var , words % words , var ) ; 
 break ; 
 case nums : 
 call_func ( var , words % words , var ) ; 
 break ; 
 case nums : 
 call_func ( var , words % words , var ) ; 
 break ; 
 default : 
 return nums ; 
 } 
 if ( var = = var ) 
 { 
 call_func ( var , words , var ) ; 
 } 
 } 
 if ( var = = var ) 
 { 
 call_func ( call_func ( var , var ) , var , var ) ; 
 call_func ( call_func ( var , var ) , var , var ) ; 
 call_func ( var , words % struct_name / nums / nums / words % struct_name / nums / nums / words , var , var , var ) ; 
 } 
 call_func ( var , var , var , var , nums , nums ) ; 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 break ; 
 case var : 
 call_func ( var ) ; 
 } 
 return var ; 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return var ; 
 } 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 #ifndef var 
 #define var 
 var var call_func ( var var , var var , var var , var var ) ; 
 #define var nums 
 #define var words 
 #define var words 
 var nums 
 #define var 
 #define var words 
 var words 
 var words 
 #define words 
 #define var words 
 #define var 
 #define var 
 #define var words 
 #define var nums 
 #define words 
 #define words 
 #define words 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words } ; 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words , words } ; 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words } ; 
 var var = call_func ( var , var ) ; 
 static var var ; 
 static var var ; 
 var var [ var ] ; 
 var var [ var ] ; 
 char var [ var * var + var - nums ] ; 
 char var [ var * var + var - nums ] ; 
 int var ; 
 int var ; 
 char var [ ( var + var ) * ( var ) + ( var - nums ) * nums + nums ] = words ; 
 var var ; 
 char var [ var ] ; 
 var var ; 
 double var ; 
 double var ; 
 char var [ var ] ; 
 var var ; 
 switch ( var ) 
 { 
 case var : 
 call_func ( ) ; 
 call_func ( var , var , nums , var | var | var | var | var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , words , var ) ; 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 var = call_func ( & var ) ; 
 var = call_func ( var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var = call_func ( var ) ; 
 call_func ( call_func ( var , var ) , var , nums , ( var ) var [ nums ] ) ; 
 } 
 call_func ( var ) ; 
 call_func ( call_func ( var , var ) , words ) ; 
 call_func ( var , & var , words , var , var , nums ) ; 
 call_func ( var , & var , words , var , var , nums ) ; 
 call_func ( call_func ( var , var ) , var ) ; 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var = var ; 
 } 
 var [ nums ] . var = var ; 
 var [ nums ] . var = var ; 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( & var ) ; 
 call_func ( var [ nums ] . var , words , var . var , var . var , var . var , var . var , var . var , var . var ) ; 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( call_func ( var , var ) , var , var , ( var ) var [ nums ] . var ) ; 
 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( var , var , var , var ) ; 
 if ( func ( var ) < nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 var = call_func ( var ) ; 
 if ( ( int ) ( var * nums ) < nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 if ( ( int ) ( var * nums ) > nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( var , words % words , var , var , var [ nums ] . var ) ; 
 call_func ( & var , var ) ; 
 var = call_func ( & var ) ; 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 var = call_func ( var ) ; 
 var = call_func ( var [ nums ] ) * call_func ( var [ nums ] . var ) ; 
 call_func ( var , words , var ) ; 
 call_func ( var , var , var ) ; 
 var = var * var ; 
 call_func ( var ) ; 
 call_func ( var [ nums ] . var , words , var ) ; 
 call_func ( var , var , var [ nums ] . var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( & var , words ) ; 
 if ( ! func ( var , var , var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( var , var , var ) ; 
 call_func ( var , words % words % words , var , var , var , var [ nums ] . var , var , var [ nums ] . var , var , var [ nums ] . var ) ; 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( & var , words ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var , var , var , nums , nums ) ; 
 call_func ( var , words , words , var ) ; 
 break ; 
 case var : 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , & var , words , var , var , nums ) ; 
 } 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , & var , words , var , var , nums ) ; 
 } 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 break ; 
 case var : 
 if ( func ( var ) = = var ) 
 { 
 call_func ( call_func ( var , var ) , var , var , var , var ) ; 
 } 
 break ; 
 case var : 
 if ( func ( var ) = = var ) 
 { 
 call_func ( call_func ( var , var ) , var , var , var , var ) ; 
 } 
 break ; 
 } 
 return var ; 
 break ; 
 case var : 
 var = ( var ) var ; 
 if ( var = = var - > var ) 
 { 
 var = call_func ( var - > var , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 return nums ; 
 } 
 call_func ( var - > var , var , nums , var , var ) ; 
 if ( var - > var = = var ) 
 { 
 call_func ( call_func ( var , var ) , var ) ; 
 } 
 if ( var - > var = = var ) 
 { 
 call_func ( call_func ( var , var ) , var ) ; 
 } 
 } 
 return nums ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return var ; 
 } 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 #ifndef var 
 #define var 
 var var call_func ( var var , var var , var var , var var ) ; 
 #define var nums 
 #define var nums 
 #define var words 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words } ; 
 char var [ var ] [ var ] = { words , words , words , words } ; 
 var var = call_func ( var , var ) ; 
 int var ; 
 int var ; 
 char var [ var ] ; 
 char var [ var ] ; 
 char var [ var ] = words ; 
 int var ; 
 int var ; 
 switch ( var ) 
 { 
 case var : 
 call_func ( ) ; 
 call_func ( var , words ) ; 
 call_func ( var , var , nums , var | var | var | var | var ) ; 
 call_func ( var , var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( call_func ( var , var ) , var , nums , ( var ) var [ var ] ) ; 
 } 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = var ) 
 { 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 call_func ( call_func ( var , var ) , var , var ) ; 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 switch ( var ) 
 { 
 case nums : 
 call_func ( var , words % words , var ) ; 
 break ; 
 case nums : 
 call_func ( var , words % words , var ) ; 
 break ; 
 case nums : 
 call_func ( var , words % words , var ) ; 
 break ; 
 case nums : 
 call_func ( var , words % words , var ) ; 
 break ; 
 default : 
 return nums ; 
 } 
 if ( var = = var ) 
 { 
 call_func ( var , words , var ) ; 
 } 
 } 
 if ( var = = var ) 
 { 
 call_func ( call_func ( var , var ) , var , var ) ; 
 call_func ( call_func ( var , var ) , var , var ) ; 
 call_func ( var , words % struct_name / nums / nums / words % struct_name / nums / nums / words , var , var , var ) ; 
 } 
 call_func ( var , var , var , var , nums , nums ) ; 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 break ; 
 case var : 
 call_func ( var ) ; 
 } 
 return var ; 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return var ; 
 } 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 var var call_func ( var var , var var , var var , var var ) ; 
 #define var nums 
 #define var words 
 #define var words 
 var nums 
 var 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] [ var ] = { words } ; 
 var var = call_func ( var , var ) ; 
 var var [ var ] ; 
 char var [ var * var + var - nums ] ; 
 char var [ var * var + var - nums ] ; 
 int var ; 
 int var ; 
 int var ; 
 char var [ ( var + var ) * ( var ) + ( var - nums ) * nums + nums ] = words ; 
 var var ; 
 char var [ var ] ; 
 switch ( var ) 
 { 
 case var : 
 call_func ( ) ; 
 call_func ( var , var , nums , var | var | var | var | var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , var , var , words , nums , nums ) ; 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 call_func ( var [ nums ] . var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var = var ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var , var ) ; 
 if ( ! func ( var , var , var ) ) 
 { 
 return nums ; 
 } 
 call_func ( var , var , var , words , nums , nums ) ; 
 call_func ( var , words , words , var ) ; 
 break ; 
 case var : 
 call_func ( var , var , var , var ) ; 
 break ; 
 case var : 
 var = nums ; 
 call_func ( var [ nums ] . var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , var + var , var [ var ] . var , var ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var = var ; 
 } 
 if ( func ( var , var , var ) > nums ) 
 { 
 call_func ( var , var , var , var , var , var ) ; 
 } 
 else 
 { 
 call_func ( var , words , words , var ) ; 
 } 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 break ; 
 } 
 return var ; 
 break ; 
 case var : 
 if ( var = = var ) 
 { 
 var = ( var ) var ; 
 if ( var = = var - > var ) 
 { 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 return nums ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , var , var , var , var ) ; 
 call_func ( var , var + var , var ) ; 
 } 
 } 
 } 
 return nums ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return var ; 
 } 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 #ifndef var 
 #define var 
 var var call_func ( var var , var var , var var , var var ) ; 
 #endif 
 #define var nums 
 #define var words 
 #define var words 
 var nums 
 #define var 
 #define var words 
 var words 
 #define words 
 #define var 
 #define var words 
 #define var nums 
 #define words 
 #define words 
 #define words 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words } ; 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words , words } ; 
 var var = call_func ( var , var ) ; 
 static var var ; 
 var var [ var ] ; 
 char var [ var * var + var - nums ] ; 
 char var [ var * var + var - nums ] ; 
 int var ; 
 int var ; 
 char var [ ( var + var ) * ( var ) + ( var - nums ) * nums + nums ] = words ; 
 var var ; 
 char var [ var ] ; 
 var var ; 
 double var ; 
 double var ; 
 var 
 char var [ var ] ; 
 var var ; 
 #endif 
 switch ( var ) 
 { 
 case var : 
 call_func ( ) ; 
 call_func ( var , words ) ; 
 call_func ( var , var , nums , var | var | var | var | var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , words , var ) ; 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var ) ; 
 return nums ; 
 } 
 var = call_func ( & var ) ; 
 var = call_func ( var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var = call_func ( var ) ; 
 call_func ( call_func ( var , var ) , var , nums , ( var ) var [ nums ] ) ; 
 } 
 call_func ( var ) ; 
 call_func ( call_func ( var , var ) , words ) ; 
 call_func ( var , & var , words , var , var , nums ) ; 
 call_func ( call_func ( var , var ) , var ) ; 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var = var ; 
 } 
 var [ nums ] . var = var ; 
 var [ nums ] . var = var ; 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( call_func ( var , var ) , var , var , ( var ) var [ nums ] . var ) ; 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( & var ) ; 
 call_func ( var [ nums ] . var , words , var . var , var . var , var . var , var . var , var . var , var . var ) ; 
 call_func ( var , var , var , var ) ; 
 if ( func ( var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 var = call_func ( var ) ; 
 if ( ( int ) ( var * nums ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 if ( ( int ) ( var * nums ) > nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , words % words , var , var , var [ nums ] . var ) ; 
 call_func ( & var , var ) ; 
 var = call_func ( & var ) ; 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 var = call_func ( var ) ; 
 var = call_func ( var [ nums ] ) * call_func ( var [ nums ] . var ) ; 
 call_func ( var , words , var ) ; 
 call_func ( var , var , var ) ; 
 var = var * var ; 
 call_func ( var ) ; 
 call_func ( var [ nums ] . var , words , var ) ; 
 call_func ( var , var , var [ nums ] . var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( & var , words ) ; 
 if ( ! func ( var , var , var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( var , words % words % words , var , var , var , var [ nums ] . var , var , var [ nums ] . var , var , words ) ; 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( & var , words ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var , var , var , nums , nums ) ; 
 call_func ( var , words , words , var ) ; 
 break ; 
 case var : 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , & var , words , var , var , nums ) ; 
 } 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 break ; 
 case var : 
 if ( func ( var ) = = var ) 
 { 
 call_func ( call_func ( var , var ) , var , var , var , var ) ; 
 } 
 break ; 
 } 
 return var ; 
 break ; 
 case var : 
 var = ( var ) var ; 
 if ( var = = var - > var ) 
 { 
 var = call_func ( var - > var , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 return nums ; 
 } 
 call_func ( var - > var , var , nums , var , var ) ; 
 if ( var - > var = = var ) 
 { 
 call_func ( call_func ( var , var ) , var ) ; 
 } 
 } 
 return nums ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return var ; 
 } 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 #ifndef var 
 #define var 
 var var call_func ( var var , var var , var var , var var ) ; 
 #endif 
 #define var nums 
 #define var nums 
 #define var words 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words } ; 
 char var [ var ] [ var ] = { words , words , words , words } ; 
 var var = call_func ( var , var ) ; 
 int var ; 
 int var ; 
 char var [ var ] ; 
 char var [ var ] ; 
 char var [ var ] = words ; 
 int var ; 
 int var ; 
 switch ( var ) 
 { 
 case var : 
 call_func ( ) ; 
 call_func ( var , words ) ; 
 call_func ( var , var , nums , var | var | var | var | var ) ; 
 call_func ( var , var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( call_func ( var , var ) , var , nums , ( var ) var [ var ] ) ; 
 } 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = var ) 
 { 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 call_func ( call_func ( var , var ) , var , var ) ; 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 switch ( var ) 
 { 
 case nums : 
 call_func ( var , words % words , var ) ; 
 break ; 
 case nums : 
 call_func ( var , words % words , var ) ; 
 break ; 
 case nums : 
 call_func ( var , words % words , var ) ; 
 break ; 
 case nums : 
 call_func ( var , words % words , var ) ; 
 break ; 
 default : 
 return nums ; 
 } 
 if ( var = = var ) 
 { 
 call_func ( var , words , var ) ; 
 } 
 } 
 if ( var = = var ) 
 { 
 call_func ( call_func ( var , var ) , var , var ) ; 
 call_func ( call_func ( var , var ) , var , var ) ; 
 call_func ( var , words % struct_name / nums / nums / words % struct_name / nums / nums / words , var , var , var ) ; 
 } 
 call_func ( var , var , var , var , nums , nums ) ; 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 break ; 
 case var : 
 call_func ( var ) ; 
 } 
 return var ; 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return var ; 
 } 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 #ifndef var 
 #define var 
 var var call_func ( var var , var var , var var , var var ) ; 
 #endif 
 #define var nums 
 #define var words 
 #define var words 
 var nums 
 #define var words 
 var words 
 #define words 
 #define var 
 #define var words 
 #define var nums 
 #define words 
 #define words 
 #define words 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words } ; 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words , words } ; 
 var var = call_func ( var , var ) ; 
 static var var ; 
 var var [ var ] ; 
 char var [ var * var + var - nums ] ; 
 char var [ var * var + var - nums ] ; 
 int var ; 
 int var ; 
 char var [ ( var + var ) * ( var ) + ( var - nums ) * nums + nums ] = words ; 
 var var ; 
 char var [ var ] ; 
 var var ; 
 double var ; 
 double var ; 
 char var [ var ] ; 
 var var ; 
 switch ( var ) 
 { 
 case var : 
 call_func ( ) ; 
 call_func ( var , var , nums , var | var | var | var | var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , words , var ) ; 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 var = call_func ( & var ) ; 
 var = call_func ( var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var = call_func ( var ) ; 
 call_func ( call_func ( var , var ) , var , nums , ( var ) var [ nums ] ) ; 
 } 
 call_func ( var ) ; 
 call_func ( call_func ( var , var ) , words ) ; 
 call_func ( var , & var , words , var , var , nums ) ; 
 call_func ( call_func ( var , var ) , var ) ; 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var = var ; 
 } 
 var [ nums ] . var = var ; 
 var [ nums ] . var = var ; 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( call_func ( var , var ) , var , var , ( var ) var [ nums ] . var ) ; 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( & var ) ; 
 call_func ( var [ nums ] . var , words , var . var , var . var , var . var , var . var , var . var , var . var ) ; 
 call_func ( var , var , var , var ) ; 
 if ( func ( var ) < nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 var = call_func ( var ) ; 
 if ( ( int ) ( var * nums ) < nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 if ( ( int ) ( var * nums ) > nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( var , words % words , var , var , var [ nums ] . var ) ; 
 call_func ( & var , var ) ; 
 var = call_func ( & var ) ; 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 var = call_func ( var ) ; 
 var = call_func ( var [ nums ] ) * call_func ( var [ nums ] . var ) ; 
 call_func ( var , words , var ) ; 
 call_func ( var , var , var ) ; 
 var = var * var ; 
 call_func ( var ) ; 
 call_func ( var [ nums ] . var , words , var ) ; 
 call_func ( var , var , var [ nums ] . var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( & var , words ) ; 
 if ( ! func ( var , var , var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( var , words % words % words , var , var , var , var [ nums ] . var , var , var [ nums ] . var , var , words ) ; 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( & var , words ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var , var , var , nums , nums ) ; 
 call_func ( var , words , words , var ) ; 
 break ; 
 case var : 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , & var , words , var , var , nums ) ; 
 } 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 break ; 
 case var : 
 if ( func ( var ) = = var ) 
 { 
 call_func ( call_func ( var , var ) , var , var , var , var ) ; 
 } 
 break ; 
 } 
 return var ; 
 break ; 
 case var : 
 var = ( var ) var ; 
 if ( var = = var - > var ) 
 { 
 var = call_func ( var - > var , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 return nums ; 
 } 
 call_func ( var - > var , var , nums , var , var ) ; 
 if ( var - > var = = var ) 
 { 
 call_func ( call_func ( var , var ) , var ) ; 
 } 
 } 
 return nums ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return var ; 
 } 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 #ifndef var 
 #define var 
 var var call_func ( var var , var var , var var , var var ) ; 
 #endif 
 #define var nums 
 #define var nums 
 #define var words 
 #define var words 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words } ; 
 char var [ var ] [ var ] = { words , words , words , words } ; 
 var var = call_func ( var , var ) ; 
 int var ; 
 int var ; 
 char var [ var ] ; 
 char var [ var ] ; 
 char var [ var ] = words ; 
 int var ; 
 int var ; 
 switch ( var ) 
 { 
 case var : 
 call_func ( ) ; 
 call_func ( var , words ) ; 
 call_func ( var , var , nums , var | var | var | var | var ) ; 
 call_func ( var , var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( call_func ( var , var ) , var , nums , ( var ) var [ var ] ) ; 
 } 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = var ) 
 { 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 call_func ( call_func ( var , var ) , var , var ) ; 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 switch ( var ) 
 { 
 case nums : 
 call_func ( var , words % words , var ) ; 
 break ; 
 case nums : 
 call_func ( var , words % words , var ) ; 
 break ; 
 case nums : 
 call_func ( var , words % words , var ) ; 
 break ; 
 case nums : 
 call_func ( var , words % words , var ) ; 
 break ; 
 default : 
 return nums ; 
 } 
 if ( var = = var ) 
 { 
 call_func ( var , words , var ) ; 
 } 
 } 
 if ( var = = var ) 
 { 
 call_func ( call_func ( var , var ) , var , var ) ; 
 call_func ( call_func ( var , var ) , var , var ) ; 
 call_func ( var , words % struct_name / nums / nums / words % struct_name / nums / nums / words , var , var , var ) ; 
 } 
 call_func ( var , var , var , var , nums , nums ) ; 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 break ; 
 case var : 
 call_func ( var ) ; 
 } 
 return var ; 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return var ; 
 } 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 #ifndef var 
 #define var 
 var var call_func ( var var , var var , var var , var var ) ; 
 #define var nums 
 #define var nums 
 #define var words 
 #define var words 
 var words 
 #define words 
 #define words 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] [ var ] = { words , words , words } ; 
 char var [ var ] [ var ] = { words , words , words , words } ; 
 var var = call_func ( var , var ) ; 
 int var ; 
 int var ; 
 char var [ var ] ; 
 char var [ var ] = words ; 
 int var ; 
 int var ; 
 char var [ var ] ; 
 var var ; 
 switch ( var ) 
 { 
 case var : 
 call_func ( ) ; 
 call_func ( var , var , nums , var | var | var | var | var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , words , var ) ; 
 call_func ( & var , var ) ; 
 if ( func ( & var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 var = call_func ( & var ) ; 
 var = call_func ( var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var = call_func ( var ) ; 
 call_func ( call_func ( var , var ) , var , nums , ( var ) var [ nums ] ) ; 
 } 
 call_func ( var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( call_func ( var , var ) , var , nums , ( var ) var [ var ] ) ; 
 } 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = var ) 
 { 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( call_func ( var , var ) , var , var , ( var ) var ) ; 
 call_func ( var , words % words , var , var ) ; 
 } 
 if ( var = = var ) 
 { 
 if ( var = = var ) 
 { 
 call_func ( var , words , var ) ; 
 } 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( call_func ( var , var ) , var , var ) ; 
 switch ( var ) 
 { 
 case nums : 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( var , words % words , var , var , var , var ) ; 
 break ; 
 case nums : 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( var , words % words , var , var , var ) ; 
 break ; 
 case nums : 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( var , words % words , var , var , var , var ) ; 
 break ; 
 case nums : 
 if ( func ( var ) = = nums ) 
 { 
 call_func ( var , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( var , words % words , var , var , var , var ) ; 
 break ; 
 default : 
 return nums ; 
 } 
 } 
 call_func ( var , var , var , var , nums , nums ) ; 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 break ; 
 case var : 
 call_func ( var ) ; 
 } 
 return var ; 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return var ; 
 } 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 #ifndef var 
 #define var 
 var var call_func ( var var , var var , var var , var var ) ; 
 #define var nums 
 #define var words 
 #define var words 
 var nums 
 var 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] [ var ] = { words } ; 
 var var = call_func ( var , var ) ; 
 var var [ var ] ; 
 char var [ var * var + var - nums ] ; 
 char var [ var * var + var - nums ] ; 
 int var ; 
 int var ; 
 int var ; 
 char var [ ( var + var ) * ( var ) + ( var - nums ) * nums + nums ] = words ; 
 var var ; 
 char var [ var ] ; 
 switch ( var ) 
 { 
 case var : 
 call_func ( ) ; 
 call_func ( var , var , nums , var | var | var | var | var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , var , var , words , nums , nums ) ; 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 call_func ( var [ nums ] . var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var = var ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 call_func ( var , var , var , var ) ; 
 if ( ! func ( var , var , var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 return nums ; 
 } 
 call_func ( var , var , var , words , nums , nums ) ; 
 call_func ( var , words , words , var ) ; 
 break ; 
 case var : 
 call_func ( var , var , var , var ) ; 
 break ; 
 case var : 
 var = nums ; 
 call_func ( var [ nums ] . var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , var + var , var [ var ] . var , var ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var = var ; 
 } 
 if ( func ( var , var , var ) > nums ) 
 { 
 call_func ( var , var , var , var , var , var ) ; 
 } 
 else 
 { 
 call_func ( var , words , words , var ) ; 
 } 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 break ; 
 } 
 return var ; 
 break ; 
 case var : 
 if ( var = = var ) 
 { 
 var = ( var ) var ; 
 if ( var = = var - > var ) 
 { 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 return nums ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , var , var , var , var ) ; 
 call_func ( var , var + var , var ) ; 
 } 
 } 
 } 
 return nums ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return var ; 
 } 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 #ifndef var 
 #define var 
 var var call_func ( var var , var var , var var , var var ) ; 
 #endif 
 var var 
 #define var var 
 #undef var 
 static char var [ ] = var ; 
 #endif 
 var : : func ( ) 
 { 
 call_func ( nums ) ; 
 } 
 var : : func ( ) 
 { 
 } 
 func ( var , var ) 
 call_func ( ) 
 var ! call_func ( var ) 
 #define var 
 var var > nums 
 var var 
 #endif 
 var var : var var 
 { 
 var : 
 call_func ( ) ; 
 var : 
 var : 
 var : 
 var call_func ( ) ; 
 var : 
 call_func ( ) 
 } ; 
 #endif 
 #define var nums 
 #define var words 
 #define var words 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] [ var ] = { words , words , words } ; 
 var var = call_func ( var , var ) ; 
 var var [ var ] ; 
 char var [ var * var + var - nums ] ; 
 char var [ var * var + var - nums ] ; 
 int var ; 
 int var ; 
 char var [ ( var + var ) * ( var ) + ( var - nums ) * nums + nums ] = words ; 
 switch ( var ) 
 { 
 case var : 
 call_func ( ) ; 
 call_func ( var , var , nums , var | var | var | var | var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , var , var , words , nums , nums ) ; 
 call_func ( call_func ( var , var ) , var , nums , ( var ) words ) ; 
 call_func ( call_func ( var , var ) , var , nums , ( var ) words ) ; 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 var [ nums ] . var = var ; 
 var [ nums ] . var = var ; 
 var [ nums ] . var = var ; 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 call_func ( var [ nums ] . var , words ) ; 
 } 
 else 
 { 
 call_func ( call_func ( var , var ) , var , var , ( var ) var [ nums ] . var ) ; 
 } 
 call_func ( var , var , var , var ) ; 
 if ( ! func ( var , var , var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( var , var , var , words , nums , nums ) ; 
 call_func ( var , words , words , var ) ; 
 break ; 
 case var : 
 call_func ( var , var , var , var ) ; 
 break ; 
 case var : 
 var = nums ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 var [ nums ] . var = var ; 
 var [ nums ] . var = var ; 
 var [ nums ] . var = var ; 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 call_func ( var [ nums ] . var , words ) ; 
 } 
 else 
 { 
 call_func ( call_func ( var , var ) , var , var , ( var ) var [ nums ] . var ) ; 
 } 
 if ( func ( var , var , var ) > nums ) 
 { 
 call_func ( var , var , var , var , var , var ) ; 
 } 
 else 
 { 
 call_func ( var , words , words , var ) ; 
 } 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 break ; 
 } 
 return var ; 
 case var : 
 return nums ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return var ; 
 } 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 #ifndef var 
 #define var 
 var var call_func ( var var , var var , var var , var var ) ; 
 #define var nums 
 #define var words 
 #define var words 
 var nums 
 #define var 
 var var func ( var var , var var , var var , var var ) 
 { 
 char var [ var ] [ var ] = { words , words , words , words , words , words , words } ; 
 var var = call_func ( var , var ) ; 
 var var [ var ] ; 
 char var [ var * var + var - nums ] ; 
 char var [ var * var + var - nums ] ; 
 int var ; 
 int var ; 
 int var ; 
 char var [ ( var + var ) * ( var ) + ( var - nums ) * nums + nums ] = words ; 
 var var ; 
 char var [ var ] ; 
 switch ( var ) 
 { 
 case var : 
 call_func ( ) ; 
 call_func ( var , var , nums , var | var | var | var | var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , var , var , words , nums , nums ) ; 
 return var ; 
 case var : 
 switch ( func ( var ) ) 
 { 
 case var : 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var = var ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var [ nums ] . var , var ) ; 
 if ( func ( var [ nums ] . var ) < nums ) 
 { 
 call_func ( var , words , words , var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var , var ) ; 
 if ( ! func ( var , var , var ) ) 
 { 
 call_func ( call_func ( var ) , words , words , var | var , nums ) ; 
 call_func ( & var , words ) ; 
 return nums ; 
 } 
 call_func ( var , var , var , words , nums , nums ) ; 
 call_func ( var , words , words , var ) ; 
 break ; 
 case var : 
 call_func ( var , var , var , var ) ; 
 break ; 
 case var : 
 var = nums ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 call_func ( var [ nums ] . var , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] . var = var ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , var + var , var [ var ] . var , var ) ; 
 } 
 
 if ( func ( var , var , var ) > nums ) 
 { 
 call_func ( var , var , var , var , var , var ) ; 
 } 
 else 
 { 
 call_func ( var , words , words , var ) ; 
 } 
 break ; 
 case var : 
 call_func ( var , nums ) ; 
 break ; 
 } 
 return var ; 
 break ; 
 case var : 
 if ( var = = var ) 
 { 
 var = ( var ) var ; 
 if ( var = = var - > var ) 
 { 
 var = call_func ( call_func ( var , var ) , var , nums , nums ) ; 
 if ( var = = - nums ) 
 { 
 return nums ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 call_func ( var , var , var , var , var ) ; 
 call_func ( var , var + var , var ) ; 
 } 
 } 
 } 
 return nums ; 
 case var : 
 call_func ( var , nums ) ; 
 case var : 
 break ; 
 return nums ; 
 } 
 return var ; 
 } 
 var var var ; 
 var var * var ; 
 var var var ; 
 var var var ; 
 var int var ; 
 var char var [ var ] ; 
 #ifndef var 
 #define var 
 var var call_func ( var var , var var , var var , var var ) ; 
 #endif 
 int var [ nums ] ; 
 var int var = nums ; 
 static int var [ nums ] [ nums ] ; 
 static int [ nums ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } ; 
 func ( data_type var , data_type var ) 
 { int var , var , var ; 
 for ( var = nums ; var [ var ] [ var ] ! = nums ; + + var ) 
 { 
 var = nums ; 
 for ( var = nums ; var <= var & & var = = nums ; + + var ) 
 if ( var [ var ] = = var [ var ] [ var ] ) 
 var = nums ; 
 if ( var = = nums ) 
 { var [ + + var ] = var [ var ] [ var ] ; 
 if ( var ! = nums ) call_func ( var [ var ] [ var ] , var ) ; 
 else 
 { var = nums ; 
 for ( var = nums ; var <= nums & & var = = nums ; + + var ) 
 if ( var [ var ] + var [ nums ] = = [ var ] ) var = nums ; 
 if ( var = = nums ) { call_func ( ) ; + + var ; } 
 } 
 - - var ; 
 } 
 } 
 } 
 func ( ) 
 { int var ; 
 for ( var = nums ; var <= nums ; + + var ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 } 
 func ( ) 
 { int var , var , var ; 
 for ( var = nums ; var <= nums ; + + var ) 
 { var = nums ; 
 for ( var = nums ; var <= nums ; + + var ) 
 if ( ( [ var ] - var <= nums ) & & ( [ var ] - var > nums ) ) var [ var ] [ + + var ] = [ var ] - var ; 
 } 
 var [ nums ] = nums ; 
 call_func ( nums , nums ) ; 
 printf ( words , var ) ; 
 } 
 #define var nums 
 int func ( void ) 
 { int var [ var ] , var , var , var , var , var , var , var ; 
 var [ nums ] = nums ; var = var = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 { var = var [ var ] ; var = var [ var ] ; 
 var = nums * var + nums ; var = nums * var + nums ; 
 if ( var > var ) { var [ var ] = var ; var + + ; } 
 else if ( var < var ) { var [ var ] = var ; var + + ; } 
 else { var [ var ] = var ; var + + ; var + + ; } 
 } 
 for ( var = nums ; var < nums ; var + + ) 
 { if ( var % nums = = nums ) call_func ( words ) ; 
 printf ( words , var [ var ] ) ; 
 } 
 } 
 int func ( void ) 
 { int var , var , var = nums , var , var , var , var , var , var ; 
 float var , var , var ; 
 for ( var = nums ; var < nums ; var + + ) 
 for ( var = var ; var < nums ; var + + ) 
 { var = nums / nums . nums ; 
 var = var * ( nums * var + var ) ; var = var * ( nums * var + var ) ; 
 var = var ; var = var ; 
 var = ( var - var ) * nums ; var = ( var - var ) * nums ; 
 if ( var = = nums ) { var + + ; var = nums ; } 
 if ( var = = nums ) { var + + ; var = nums ; } 
 if ( var = = nums ) var = nums ; else var = var ; 
 if ( var = = nums ) var = nums ; else var = var ; 
 printf ( words , var , var , var , var , var , var ) ; 
 var + + ; 
 } 
 printf ( words , var ) ; 
 } 
 #define var nums 
 func ( ) 
 { int var , var , var , var ; 
 static int var [ var + nums ] ; 
 for ( var = nums ; var <= var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { var = var ; 
 for ( var = var + nums ; var <= var ; var + + ) 
 if ( var [ var ] < var [ var ] ) var = var ; 
 var = var [ var ] ; var [ var ] = var [ var ] ; var [ var ] = var ; 
 } 
 for ( var = nums ; var <= var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 } 
 float var , var , var ; 
 float call_func ( var , var ) 
 data_type var , var ; 
 { float var ; 
 var = call_func ( var ) ; 
 var = ( - var + var ) / ( nums * var ) ; 
 var = ( - var - var ) / ( nums * var ) ; 
 } 
 func ( ) 
 { float var , var , var ; 
 scanf ( words , & var , & var , & var ) ; 
 var = var * var - nums * var * var ; 
 if ( var > nums ) 
 { call_func ( var , var ) ; 
 printf ( words , var , var ) ; 
 } 
 } 
 void func ( void ) 
 { 
 var int var = var , var ; 
 var int var , var , var ; 
 int var , var ; 
 call_func ( & var , & var , words ) ; 
 while ( ! func ( ) ) 
 { 
 call_func ( ) ; 
 call_func ( call_func ( nums ) , call_func ( nums ) , call_func ( nums ) ) ; 
 for ( var = nums ; var <= nums ; var + + ) 
 call_func ( call_func ( nums ) , call_func ( nums ) , var ) ; 
 } 
 return ; 
 } 
 
 #define func ( var ) printf ( words , ( ( var ) * ( var ) ) ) 
 data_type call_func ( void ) 
 { 
 int var = nums ; 
 call_func ( var ) ; 
 call_func ( nums + nums ) ; 
 return nums ; 
 } 
 
 #define var nums 
 var call_func ( data_type var [ ] , data_type var ) ; 
 int func ( void ) 
 { 
 static int var [ var ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } ; 
 var var ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 printf ( words , sizeof var ) ; 
 return nums ; 
 } 
 var func ( data_type * var , data_type var ) 
 { 
 int var ; 
 var var = nums ; 
 for ( var = nums ; var < var ; var + + ) var + = var [ var ] ; 
 printf ( words , sizeof var ) ; 
 return var ; 
 } 
 
 #define var nums 
 var call_func ( data_type * var , data_type var ) ; 
 int func ( void ) 
 { 
 static int var [ var ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } ; 
 var var ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 var func ( data_type * var , data_type var ) 
 { 
 int var ; 
 var var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var + = * var ; 
 var + + ; 
 } 
 return var ; 
 } 
 
 int func ( void ) 
 { 
 var var , var = var ; 
 int var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 var = scanf ( words , & var ) ; 
 while ( var = = nums ) 
 { 
 var = var + var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 var = scanf ( words , & var ) ; 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 
 void call_func ( data_type * var , data_type * var ) ; 
 int func ( void ) 
 { 
 int var = nums , var = nums ; 
 printf ( words , var , var ) ; 
 call_func ( & var , & var ) ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 void func ( data_type * var , data_type * var ) 
 { 
 int var ; 
 var = * var ; 
 * var = * var ; 
 * var = var ; 
 } 
 
 char var [ nums ] [ nums ] ; 
 int var [ nums ] ; 
 int call_func ( void ) ; 
 void call_func ( void ) ; 
 void func ( void ) 
 { 
 } 
 void func ( ) 
 { 
 int var ; 
 for ( var = nums ; var < nums ; var + + ) var [ var ] = nums ; 
 if ( func ( ) ) { 
 printf ( words ) ; 
 return ; 
 } 
 call_func ( ) ; 
 call_func ( ) ; 
 } 
 int func ( void ) 
 { 
 FILE * var ; 
 int var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) return nums ; 
 for ( var = nums ; var < nums ; var + + ) { 
 if ( call_func ( var [ var ] , nums , var ) = = NULL ) return nums ; 
 var [ var ] [ nums ] = words ; 
 } 
 fclose ( var ) ; 
 return nums ; 
 } 
 void func ( void ) 
 { 
 FILE * var ; 
 int var ; 
 var = fopen ( words , words ) ; 
 for ( var = nums ; var < nums ; var + + ) { 
 call_func ( var , words , var [ var ] ) ; 
 printf ( words , var + nums , var [ var ] ) ; 
 } 
 fclose ( var ) ; 
 } 
 func ( ) 
 { int var , var , var , , var , var , var [ nums ] ; 
 float var ; 
 for ( var = nums ; var <= nums ; ) 
 { scanf ( words , & var [ var ] ) ; 
 if ( var [ var ] >= nums ) var + + ; 
 else break ; 
 } 
 = nums ; var = nums ; var = nums ; 
 for ( var = nums ; var <= var - nums ; var + + ) 
 + = var [ var ] ; 
 var = var - nums ; var = / var ; 
 printf ( words , var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 if ( var [ var ] >= var ) var = var [ var ] ; 
 printf ( words , var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 if ( var [ var ] <= var ) var = var [ var ] ; 
 printf ( words , var ) ; 
 static struct_name * struct_var ( var var * var ) ; 
 static var call_func ( var var * var , var var * var ) ; 
 static var call_func ( var var * var , var var * var ) ; 
 static void call_func ( struct_name * var , struct_name * var ) ; 
 static void call_func ( var struct_name * var , void ( * var ) ( var struct_name ) ) ; 
 void func ( var * var ) 
 { 
 var - > var = NULL ; 
 var - > var = nums ; 
 } 
 var func ( var var * var ) 
 { 
 if ( var - > var = = NULL ) 
 return var ; 
 else 
 return var ; 
 } 
 var func ( var var * var ) 
 { 
 if ( var - > var = = var ) 
 return var ; 
 else 
 return var ; 
 } 
 int func ( var var * var ) 
 { 
 return var - > var ; 
 } 
 var func ( var var * var , var * var ) 
 { 
 struct_name * struct_var ; 
 if ( func ( var ) ) 
 { 
 call_func ( var , words ) ; 
 return var ; 
 } 
 if ( func ( var , var ) ) 
 { 
 call_func ( var , words ) ; 
 return var ; 
 } 
 var = call_func ( var ) ; 
 if ( var = = var ) 
 { 
 call_func ( var , words var words 
 return var ; 
 } 
 var - > var + + ; 
 if ( var - > var = = NULL ) 
 var - > var = var ; 
 else 
 call_func ( var , var - > var ) ; 
 return var ; 
 } 
 
 typedef struct 
 { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 } var ; 
 #define var nums 
 typedef enum enum_name { var , var } var ; 
 typedef struct 
 { 
 var ; 
 struct struct_name * struct_var ; 
 struct struct_name * struct_var ; 
 } ; 
 typedef struct 
 { 
 struct_name * struct_var ; 
 int var ; 
 } var ; 
 void call_func ( var * var ) ; 
 var call_func ( var var * var ) ; 
 var call_func ( var var * var ) ; 
 int call_func ( var var * var ) ; 
 var call_func ( var var * var , var * var ) ; 
 var call_func ( var var * var , var * var ) ; 
 void call_func ( var var * var , void ( * var ) ( var struct_name ) ) ; 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 #define var nums 
 void call_func ( ) , call_func ( ) , call_func ( ) ; 
 void call_func ( ) , call_func ( ) , call_func ( ) , call_func ( ) ; 
 void call_func ( ) , call_func ( ) ; 
 void call_func ( ) , call_func ( ) , call_func ( ) , call_func ( ) ; 
 void call_func ( ) , call_func ( ) , call_func ( ) ; 
 char var * var ; 
 struct { 
 int var , var , var , var ; 
 int var , var ; 
 var char * var ; 
 char * var ; 
 int var ; 
 int var ; 
 } var [ var ] ; 
 func ( ) 
 { 
 union { 
 char var [ nums ] ; 
 int var ; 
 } var ; 
 int var ; 
 char var ; 
 call_func ( ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , words , nums , nums , nums , nums , var ) ; 
 call_func ( nums , words , nums , nums , nums , nums , var ) ; 
 call_func ( nums , words , nums , nums , nums , nums , var ) ; 
 call_func ( nums , words , nums , nums , nums , nums , var ) ; 
 call_func ( nums ) ; 
 do { 
 var . var = call_func ( nums ) ; 
 var = var . var ; 
 if ( var = = words ) call_func ( nums , words ) ; 
 switch ( var . var [ nums ] ) 
 { 
 case nums : 
 call_func ( nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 if ( call_func ( nums , var , var ) ) call_func ( nums , words ) ; 
 getch ( ) ; 
 call_func ( nums ) ; 
 break ; 
 case nums : 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( ) ; 
 break ; 
 case nums : 
 call_func ( nums ) ; 
 break ; 
 case nums : 
 call_func ( nums ) ; 
 break ; 
 } 
 } while ( var ! = var ) ; 
 call_func ( nums ) ; 
 call_func ( ) ; 
 } 
 call_func ( var , var , var , var , var , var , var ) 
 data_type var ; 
 char * var ; 
 int var , var , var , var ; 
 int var ; 
 { 
 var char * var ; 
 if ( var > var ) 
 { printf ( words ) ; 
 return nums ; 
 } 
 var = ( var char * ) malloc ( ( nums * var - var + nums ) * ( var - var + nums ) ) ; 
 if ( ! var ) call_func ( nums ) ; 
 var [ var ] . var = var ; var [ var ] . var = var ; 
 var [ var ] . var = var ; var [ var ] . var = var ; 
 var [ var ] . var = var ; 
 var [ var ] . var = var ; 
 var [ var ] . var = var ; 
 var [ var ] . var = nums ; 
 var [ var ] . var = nums ; var [ var ] . var = nums ; 
 return nums ; 
 } 
 call_func ( var ) 
 data_type var ; 
 { 
 var [ var ] . var = nums ; 
 } 
 void call_func ( var ) 
 data_type var ; 
 { 
 char var ; 
 int var , var , var , var ; 
 if ( ! var [ var ] . var ) call_func ( var ) ; 
 var = var = var [ var ] . var ; 
 var = var = var [ var ] . var ; 
 call_func ( var , nums , nums ) ; 
 do { 
 var = call_func ( ) ; 
 switch ( var ) 
 { 
 case nums : 
 var - - ; 
 break ; 
 case nums : 
 var + + ; 
 break ; 
 case nums : 
 var - - ; 
 break ; 
 case nums : 
 var + + ; 
 break ; 
 case nums : 
 var - - ; var - - ; 
 break ; 
 case nums : 
 var - - ; var + + ; 
 break ; 
 case nums : 
 var + + ; var - - ; 
 break ; 
 case nums : 
 var + + ; var + + ; 
 break ; 
 case nums : 
 var = var ; 
 var = var ; 
 var = nums ; 
 } 
 if ( var < nums ) var + + ; 
 if ( var > var [ var ] . var ) var - - ; 
 if ( var < nums ) var + + ; 
 if ( var > var [ var ] . var ) var - - ; 
 call_func ( var ) ; 
 var [ var ] . var = var ; 
 var [ var ] . var = var ; 
 } while ( var ! = nums ) ; 
 call_func ( var ) ; 
 } 
 void call_func ( var ) 
 data_type var ; 
 { 
 char var ; 
 int var , var , var , var , var , var , var , var ; 
 if ( ! var [ var ] . var ) call_func ( var ) ; 
 var = var = var [ var ] . var ; 
 var = var = var [ var ] . var ; 
 var = var = var [ var ] . var ; 
 var = var = var [ var ] . var ; 
 call_func ( var , nums , nums ) ; 
 do { 
 var = call_func ( ) ; 
 switch ( var ) 
 { 
 case nums : 
 var - - ; 
 var - - ; 
 break ; 
 case nums : 
 var + + ; 
 var + + ; 
 break ; 
 case nums : 
 var - - ; 
 var - - ; 
 break ; 
 case nums : 
 var + + ; 
 var + + ; 
 break ; 
 case nums : 
 var - - ; var - - ; 
 var - - ; var - - ; 
 break ; 
 case nums : 
 var - - ; var + + ; 
 var - - ; var + + ; 
 break ; 
 case nums : 
 var + + ; var - - ; 
 var + + ; var - - ; 
 break ; 
 case nums : 
 var + + ; var + + ; 
 var + + ; var + + ; 
 break ; 
 case nums : 
 var = var ; var = var ; 
 var = var ; var = var ; 
 var = nums ; 
 } 
 if ( var < nums ) { var + + ; var + + ; } 
 if ( var > var [ var ] . var ) { var - - ; var - - ; } 
 if ( var < nums ) { var + + ; var + + ; } 
 if ( var > var [ var ] . var ) { var - - ; var - - ; } 
 call_func ( var ) ; 
 var [ var ] . var = var ; 
 var [ var ] . var = var ; 
 var [ var ] . var = var ; 
 var [ var ] . var = var ; 
 call_func ( var ) ; 
 } while ( var ! = nums ) ; 
 call_func ( var ) ; 
 } 
 void call_func ( var ) 
 data_type var ; 
 { 
 var int var , var ; 
 var = var [ var ] . var ; 
 var = call_func ( var [ var ] . var ) ; 
 var = ( var [ var ] . var - var - var ) / nums ; 
 if ( var < nums ) return ; 
 var = var + var ; 
 call_func ( var [ var ] . var , var , var [ var ] . var , var ) ; 
 } 
 void call_func ( var ) 
 data_type var ; 
 { 
 var int var ; 
 char var * var , var * var ; 
 var = var = var ; 
 for ( var = var [ var ] . var + nums ; var < var [ var ] . var ; var + + ) 
 { var + = ( var * nums ) + var [ var ] . var * nums ; 
 * var + + = nums ; 
 * var = var ; 
 var = var ; 
 var + = ( var * nums ) + var [ var ] . var * nums ; 
 * var + + = nums ; 
 * var = var ; 
 var = var ; 
 } 
 for ( var = var [ var ] . var + nums ; var < var [ var ] . var ; var + + ) 
 { var + = var [ var ] . var * nums + var * nums ; 
 * var + + = nums ; 
 * var = var ; 
 var = var ; 
 var + = var [ var ] . var * nums + var * nums ; 
 * var + + = nums ; 
 * var = var ; 
 var = var ; 
 } 
 call_func ( var [ var ] . var , var [ var ] . var , nums , var ) ; 
 call_func ( var [ var ] . var , var [ var ] . var , nums , var ) ; 
 call_func ( var [ var ] . var , var [ var ] . var , nums , var ) ; 
 call_func ( var [ var ] . var , var [ var ] . var , nums , var ) ; 
 } 
 call_func ( var , var ) 
 data_type var ; 
 char * var ; 
 { 
 if ( ! var [ var ] . var ) return nums ; 
 for ( ; * var ; var + + ) call_func ( var , * var ) ; 
 return nums ; 
 } 
 call_func ( var , var ) 
 data_type var ; 
 char var ; 
 { 
 var int var , var ; 
 char var * var ; 
 if ( ! var [ var ] . var ) return nums ; 
 var = var [ var ] . var + var [ var ] . var + nums ; 
 var = var [ var ] . var + var [ var ] . var + nums ; 
 var = var ; 
 var + = ( var * nums ) + var * nums ; 
 if ( var >= var [ var ] . var ) return nums ; 
 if ( var >= var [ var ] . var ) return nums ; 
 if ( var = = words ) 
 { var + + ; 
 var = var [ var ] . var + nums ; 
 var = var ; 
 var + = ( var * nums ) + var * nums ; 
 var [ var ] . var + + ; 
 var [ var ] . var = nums ; 
 } 
 else 
 { var [ var ] . var + + ; 
 * var + + = var ; 
 * var + + = var ; 
 } 
 call_func ( var , var [ var ] . var , var [ var ] . var ) ; 
 return nums ; 
 } 
 call_func ( var , var , var ) 
 data_type var , var , var ; 
 { 
 if ( var < nums | | var + var [ var ] . var >= var [ var ] . var - nums ) return nums ; 
 if ( var < nums | | var + var [ var ] . var >= var [ var ] . var - nums ) return nums ; 
 var [ var ] . var = var ; 
 var [ var ] . var = var ; 
 call_func ( var [ var ] . var + var + nums , var [ var ] . var + var + nums ) ; 
 return nums ; 
 } 
 void call_func ( var , struct_name ) 
 data_type var ; 
 char * ; 
 { 
 char var , * var ; 
 var = ; 
 for ( ; ; ) 
 { var = call_func ( var ) ; 
 switch ( var ) 
 { case words : 
 * = words ; 
 return ; 
 case var : 
 if ( > var ) 
 { - - ; 
 var [ var ] . var - - ; 
 if ( var [ var ] . var < nums ) var [ var ] . var = nums ; 
 call_func ( var , var [ var ] . var , var [ var ] . var ) ; 
 call_func ( var [ var ] . var + var [ var ] . var + nums , 
 var [ var ] . var + var [ var ] . var + nums , words , var ) ; 
 } 
 break ; 
 default : * = var ; 
 + + ; 
 } 
 } 
 } 
 call_func ( var ) 
 data_type var ; 
 { 
 union { 
 char var [ nums ] ; 
 int var ; 
 } var ; 
 if ( ! var [ var ] . var ) return nums ; 
 call_func ( var , var [ var ] . var , var [ var ] . var ) ; 
 var . var = call_func ( nums ) ; 
 if ( var . var [ nums ] ) 
 { switch ( var . var [ nums ] ) 
 { case words : 
 break ; 
 case var : 
 break ; 
 default : 
 if ( var [ var ] . var + var [ var ] . var < var [ var ] . var - nums ) 
 { call_func ( var [ var ] . var + var [ var ] . var + nums , 
 var [ var ] . var + var [ var ] . var + nums , var . var [ nums ] , var ) ; 
 var [ var ] . var + + ; 
 } 
 } 
 if ( var [ var ] . var < nums ) var [ var ] . var = nums ; 
 if ( var [ var ] . var + var [ var ] . var > var [ var ] . var - nums ) var [ var ] . var - - ; 
 } 
 call_func ( var , var [ var ] . var , var [ var ] . var ) ; 
 return var . var ; 
 } 
 void call_func ( var ) 
 data_type var ; 
 { 
 var int var , var ; 
 char var * var , var * var ; 
 var = var ; 
 var = var ; 
 for ( var = var [ var ] . var + nums ; var < var [ var ] . var ; var + + ) 
 for ( var = var [ var ] . var + nums ; var < var [ var ] . var ; var + + ) 
 { var = var ; 
 var + = ( var * nums ) + var * nums ; 
 * var + + = words ; 
 * var = var ; 
 } 
 var [ var ] . var = nums ; 
 var [ var ] . var = nums ; 
 } 
 void call_func ( var ) 
 data_type var ; 
 { 
 var int var , var , var ; 
 var = var [ var ] . var ; 
 var = var [ var ] . var ; 
 call_func ( var , var [ var ] . var , var [ var ] . var ) ; 
 for ( var = var [ var ] . var ; var < var [ var ] . var - nums ; var + + ) call_func ( var , words ) ; 
 call_func ( var , var , var ) ; 
 } 
 call_func ( var ) 
 data_type var ; 
 { 
 if ( var [ var ] . var > nums ) 
 { var [ var ] . var - - ; 
 call_func ( var , var [ var ] . var , var [ var ] . var ) ; 
 return nums ; 
 } 
 return nums ; 
 } 
 call_func ( var ) 
 data_type var ; 
 { 
 if ( var [ var ] . var < var [ var ] . var - var [ var ] . var - nums ) 
 { var [ var ] . var + + ; 
 call_func ( var , var [ var ] . var , var [ var ] . var ) ; 
 return nums ; 
 } 
 return nums ; 
 } 
 call_func ( var ) 
 data_type var ; 
 { 
 if ( var [ var ] . var > nums ) 
 { var [ var ] . var - - ; 
 call_func ( var , var [ var ] . var , var [ var ] . var ) ; 
 call_func ( var , words ) ; 
 var [ var ] . var - - ; 
 call_func ( var , var [ var ] . var , var [ var ] . var ) ; 
 } 
 } 
 void call_func ( var , var , var , var ) 
 data_type var , var ; 
 char * var ; 
 int var ; 
 { 
 var int var ; 
 char var * var ; 
 var = var ; 
 var + = ( var * nums ) + var * nums ; 
 for ( var = var ; * var ; var + + ) 
 { * var + + = * var + + ; 
 * var + + = var ; 
 } 
 } 
 void call_func ( var , var , var , var ) 
 data_type var , var ; 
 char var ; 
 int var ; 
 { 
 var int var ; 
 char var * var ; 
 var = var ; 
 var + = ( var * nums ) + var * nums ; 
 * var + + = var ; 
 * var = var ; 
 } 
 void call_func ( var ) 
 data_type var ; 
 { 
 var int var , var ; 
 char * var ; 
 char var * var , var * var ; 
 var = var [ var ] . var ; 
 var = var ; 
 for ( var = var [ var ] . var ; var < var [ var ] . var + nums ; var + + ) 
 for ( var = var [ var ] . var ; var < var [ var ] . var + nums ; var + + ) 
 { var = ( var + ( var * nums ) + var * nums ) ; 
 * var + + = * var + + ; 
 * var + + = * var ; 
 * ( var - nums ) = words ; 
 } 
 } 
 void func ( ) 
 { 
 union struct_name struct_var ; 
 var . var . var = nums ; 
 var . var . var = nums ; 
 var . var . var = nums ; 
 var . var . var = nums ; 
 var . var . var = nums ; 
 var . var . var = nums ; 
 var . var . var = nums ; 
 call_func ( nums , & var , & var ) ; 
 } 
 void call_func ( var , var ) 
 data_type var , var ; 
 { 
 union struct_name struct_var ; 
 var . var . var = nums ; 
 var . var . var = var ; 
 var . var . var = var ; 
 var . var . var = nums ; 
 call_func ( nums , & var , & var ) ; 
 } 
 func ( ) 
 { 
 union { 
 char var [ nums ] ; 
 int var ; 
 } var ; 
 while ( ! call_func ( nums ) ) ; 
 var . var = call_func ( nums ) ; 
 return var . var [ nums ] ; 
 } 
 func ( ) 
 { 
 union struct_name struct_var ; 
 var . var . var = nums ; 
 return call_func ( nums , & var , & var ) & nums ; 
 } 
 call_func ( struct_name , var ) 
 data_type * struct_name , var ; 
 { 
 var int var ; 
 for ( var = nums ; * ; var + + ) if ( * + + = = var ) return var + nums ; 
 return nums ; 
 } 
 call_func ( var ) 
 data_type var ; 
 { 
 switch ( var ) 
 { case nums : return call_func ( ) ; 
 case nums : return call_func ( ) ; 
 } 
 } 
 func ( ) 
 { 
 union struct_name struct_var ; 
 var . var . var = nums ; 
 return call_func ( nums , & var , & var ) ; 
 } 
 extern void call_func ( ) ; 
 extern void call_func ( ) ; 
 extern void call_func ( var , var , var , var , var , var , var ) 
 data_type var , var , var , var , var , var , var ; 
 { 
 call_func ( var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var + nums , var , var + nums , var - nums ) ; 
 call_func ( var + nums , var , var + nums , var - nums ) ; 
 call_func ( var + nums , var , var + nums , var - nums ) ; 
 call_func ( var + nums , var , var , var ) ; 
 call_func ( var + nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var ) ; 
 call_func ( var - nums , var + nums , var - nums , var ) ; 
 call_func ( var - nums , var + nums , var - nums , var ) ; 
 call_func ( var - nums , var + nums , var - nums , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var + nums , var - nums , var - nums , var - nums ) ; 
 call_func ( var + nums , var - nums , var - nums , var - nums ) ; 
 call_func ( var + nums , var - nums , var - nums , var - nums ) ; 
 call_func ( var , var , var - nums , var ) ; 
 call_func ( var ) ; 
 call_func ( var + nums , var + nums , var - nums , var - nums ) ; 
 call_func ( nums , var ) ; 
 call_func ( var + nums , var + nums , var ) ; 
 } 
 extern void call_func ( var , var , var , var , var , var , var ) 
 data_type var , var , var , var , var , var , var ; 
 { 
 call_func ( var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var ) ; 
 call_func ( var + nums , var - nums , var - nums , var - nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var - nums ) ; 
 call_func ( var ) ; 
 call_func ( var + nums , var + nums , var + nums , var - nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var ) ; 
 call_func ( var + nums , var + nums , var - nums , var - nums ) ; 
 call_func ( nums , var ) ; 
 call_func ( var + nums , var + nums , var ) ; 
 } 
 func ( ) 
 { 
 printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 func ( ) 
 { int var , var , var , var ; 
 scanf ( words , & var , & var , & var ) ; 
 var = call_func ( var , var , var ) ; 
 printf ( words , var ) ; 
 } 
 int call_func ( var , var , var ) 
 data_type var , var , var ; 
 { int ; 
 if ( var > var ) = var ; 
 else = var ; 
 if ( < var ) = var ; 
 return ( ) ; 
 } 
 func ( ) 
 { int var , var , var , var , var ; 
 scanf ( words , & var , & var ) ; 
 if ( var > var ) { var = var ; var = var ; } 
 else { var = var ; var = var ; } 
 var = var % var ; 
 while ( var ! = nums ) { var = var ; var = var ; var = var % var ; } 
 printf ( words , var , var * var / var ) ; 
 } 
 func ( ) 
 { char var ; 
 int var = nums , var = nums , var = nums , var = nums ; 
 while ( ( var = func ( ) ) ! = words ) 
 { if ( ( var >= words & & var <= words ) | | ( var >= words & & var <= words ) ) var = var + nums ; 
 else if ( var = = words ) var = var + nums ; 
 else if ( var >= words & & var <= words ) var = var + nums ; 
 else var = var + nums ; } 
 printf ( words , var , var , var , var ) ; 
 } func ( ) 
 { int var , var , var ; 
 var int = nums , var = nums ; 
 scanf ( words , & var , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 { var = var * nums + var ; 
 = + var ; } 
 printf ( words , ) ; 
 } 
 func ( ) 
 { int var ; 
 double = nums , var = nums ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { var = var * var ; = + var ; } 
 printf ( words , ) ; 
 } 
 func ( ) 
 { int var ; 
 double = nums ; 
 for ( var = nums ; var <= nums ; var + + ) = + var ; 
 for ( var = nums ; var <= nums ; var + + ) = + var * var ; 
 for ( var = nums ; var <= nums ; var + + ) = + nums / ( double ) var ; 
 printf ( words , ) ; 
 } 
 func ( ) 
 { int var , var , var , var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { var = var / nums ; 
 var = ( var - var * nums ) / nums ; 
 var = var - var * nums - var * nums ; 
 if ( var = = var * var * var + var * var * var + var * var * var ) 
 printf ( words , var ) ; 
 } 
 } 
 #define var nums 
 func ( ) 
 { int var , var , var [ var ] ; 
 var [ nums ] = nums ; 
 printf ( words , var [ nums ] ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { var [ var ] = nums ; 
 for ( var = var - nums ; var > nums ; var - - ) 
 var [ var ] = var [ var ] + var [ var - nums ] ; 
 for ( var = nums ; var <= var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 } 
 } 
 #define var nums 
 func ( ) 
 { static int var [ var + nums ] [ var + nums ] ; 
 int var , var , var , var ; 
 var = var * var ; 
 var = nums ; var = var / nums + nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 { var [ var ] [ var ] = var ; 
 var = var - nums ; var = var + nums ; 
 if ( var = = nums & & var = = var + nums ) { var = var + nums ; var = var - nums ; } 
 else if ( var = = nums ) var = var ; 
 else if ( var = = var + nums ) var = nums ; 
 else if ( var [ var ] [ var ] ! = nums ) { var = var + nums ; var = var - nums ; } 
 } 
 for ( var = nums ; var <= var ; var + + ) 
 { for ( var = nums ; var <= var ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 } 
 #define var nums 
 #define var nums 
 func ( ) 
 { static int var [ var + nums ] [ var + nums ] ; 
 int var , var , var , var , var ; 
 #define var nums 
 func ( ) 
 { static int var [ var + nums ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } ; 
 int var , var , var , var ; 
 scanf ( words , & var ) ; 
 var = nums ; var = var ; var = ( var + var ) / nums ; 
 while ( var ! = var [ var ] & & var <= var ) 
 { if ( var > var [ var ] ) var = var + nums ; 
 else var = var - nums ; 
 var = ( var + var ) / nums ; 
 } 
 if ( var < var ) printf ( words , var ) ; 
 else printf ( words , var , var ) ; 
 } 
 float var [ nums ] [ nums ] , var [ nums ] [ nums ] , var [ nums ] [ nums ] ; 
 int var , var ; 
 float var [ ] = { nums . nums , nums . nums , nums . nums , nums . nums , nums . nums , nums , nums , nums } ; 
 float var [ ] = { nums . nums , nums . nums , nums . nums , nums . nums } ; 
 float var [ ] = { - nums . nums , nums . nums } ; 
 float var [ ] = { nums . nums , nums . nums , nums . nums , - nums . nums , - nums . nums , - nums . nums } ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( data_type var , data_type * var , data_type var ) ; 
 void call_func ( data_type var , data_type * var , data_type var ) ; 
 func ( ) 
 { int var , var , var ; 
 char var [ nums ] , var [ nums ] ; 
 int var , var ; 
 float * var ; 
 FILE * var ; 
 do 
 { call_func ( ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 scanf ( words , var ) ; 
 } 
 while ( ( var = fopen ( var , words ) ) = = NULL ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { call_func ( var , words , & var ) ; 
 var [ nums ] [ var ] = var ; 
 if ( var = = nums ) 
 { call_func ( var , words ) ; 
 var = nums ; 
 } 
 var + + ; 
 } 
 fclose ( var ) ; 
 call_func ( ) ; 
 for ( var = nums ; var <= var + nums ; var + + ) 
 var [ var ] [ var ] = var [ var ] [ var ] ; 
 call_func ( ) ; 
 var = var ; 
 call_func ( & var , & var , words ) ; 
 call_func ( var ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( var , var [ nums ] , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( var , var [ nums ] , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( var , var [ nums ] , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( var , var [ nums ] , nums ) ; 
 getch ( ) ; 
 call_func ( ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( var , var [ nums ] , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words ) ; 
 call_func ( var , var [ nums ] , nums ) ; 
 getch ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 } 
 void func ( ) 
 { float var , var ; 
 int var , var , var ; 
 float var ; 
 int var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 { var = nums / var [ var - nums ] ; 
 if ( var = = nums ) 
 { 
 for ( var = var ; var <= var + nums * var + nums ; var + + ) 
 var [ var - nums ] [ var ] = var [ var - nums ] [ nums * var - nums - var ] ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 var = nums ; var = nums ; 
 for ( var = - nums ; var <= nums ; var + + ) 
 var = var + var [ var + nums ] * var [ nums ] [ ( int ) ( call_func ( var - var + nums . nums ) - nums . nums ) ] ; 
 for ( var = nums ; var <= nums ; var + + ) 
 var = var + var [ var ] * var [ nums ] [ ( int ) ( call_func ( var - var + nums . nums ) - nums . nums ) ] ; 
 var [ nums ] [ var ] = var ; var [ nums ] [ var ] = - var * var ; 
 } 
 for ( var = nums ; var <= var - nums ; var + + ) 
 { 
 var = nums ; var = nums ; 
 for ( var = - nums ; var <= nums ; var + + ) 
 { var = var + var [ var + nums ] * var [ nums ] [ ( int ) ( call_func ( var - var + nums . nums ) - nums . nums ) ] ; } 
 for ( var = nums ; var <= nums ; var + + ) 
 { var = var + var [ var ] * var [ nums ] [ ( int ) ( call_func ( var - var + nums . nums ) - nums . nums ) ] ; } 
 var [ nums ] [ var ] = var ; var [ nums ] [ var ] = - var * var ; 
 } 
 } 
 else 
 { for ( var = var ; var <= var + nums * var + nums ; var + + ) 
 var [ var - nums ] [ var ] = var [ var - nums ] [ nums * var - nums - var ] ; 
 for ( var = var / nums ; var <= nums * var ; var + + ) 
 { 
 var = nums ; var = nums ; 
 for ( var = - nums ; var <= nums ; var + + ) 
 { var = var + var [ var + nums ] * var [ var - nums ] [ ( int ) ( call_func ( var - var * var ) ) ] ; } 
 for ( var = nums ; var <= nums ; var + + ) 
 { var = var + var [ var ] * var [ var - nums ] [ ( int ) ( call_func ( var - var * var ) ) ] ; } 
 var [ var ] [ var - var / nums ] = var ; var [ var ] [ var - var / nums ] = - var * var ; 
 } 
 for ( var = nums * var + nums ; var <= var + var / nums ; var + + ) 
 { 
 var = nums ; var = nums ; 
 for ( var = - nums ; var <= nums ; var + + ) 
 { var = var + var [ var + nums ] * var [ var - nums ] [ var - var * var ] ; } 
 for ( var = nums ; var <= nums ; var + + ) 
 { var = var + var [ var ] * var [ var - nums ] [ var - var * var ] ; } 
 var [ var ] [ var - var / nums ] = var ; var [ var ] [ var - var / nums ] = - var * var ; 
 } 
 } 
 var = nums * var ; 
 } 
 } 
 void func ( data_type var , data_type var [ ] , data_type var ) 
 { 
 int var , var ; 
 call_func ( var ) ; 
 call_func ( nums , var , nums , var ) ; 
 call_func ( nums , var + nums , words ) ; 
 call_func ( nums , var + nums , words ) ; 
 call_func ( nums , var + nums , words ) ; 
 call_func ( nums , var + nums , words ) ; 
 call_func ( nums , var + nums , words ) ; 
 call_func ( nums , var + nums , words ) ; 
 call_func ( nums , var + nums , words ) ; 
 call_func ( nums , var + nums , words ) ; 
 call_func ( nums , var + nums , words ) ; 
 call_func ( nums , var + nums , words ) ; 
 call_func ( nums , var + nums , words ) ; 
 call_func ( nums , var + nums , words ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { var = nums / var ; 
 call_func ( var ) ; 
 call_func ( nums + var * var , var - ( data_type ) ( nums . nums * var [ var ] ) , nums + ( var + nums ) * var , var - ( data_type ) ( nums . nums * var [ var + nums ] ) ) ; 
 } 
 } 
 void func ( ) 
 { int var , var , var ; 
 float var , var , var ; 
 int var = call_func ( nums , var - nums ) ; 
 for ( var = var ; var >= nums ; var - - ) 
 { 
 var = var [ var - nums ] ; 
 for ( var = var ; var <= var + nums * var ; var + + ) 
 { 
 var [ var ] [ var ] = - var [ var ] [ nums * var - nums - var ] ; 
 var [ var ] [ var ] = var [ var ] [ nums * var - nums - var ] ; 
 } 
 for ( var = - var / nums ; var <= nums * var ; var + + ) 
 { var = nums ; var = nums ; 
 for ( var = - nums ; var <= nums ; var + + ) 
 var = var + var [ var + nums ] * var [ var ] [ ( int ) ( call_func ( var + var * var ) ) ] ; 
 for ( var = - nums ; var <= nums ; var + + ) 
 if ( ( var - var * var ) <= nums ) 
 var = var + var [ var + nums ] * ( - var [ var ] [ ( int ) ( call_func ( var - var * var ) ) ] ) ; 
 else 
 var = var + var [ var + nums ] * var [ var ] [ ( int ) ( var - var * var ) ] ; 
 var [ var - nums ] [ var + var / nums ] = var - var * var ; 
 } 
 for ( var = nums * var + nums ; var <= var - var / nums ; var + + ) 
 { 
 var = nums ; var = nums ; 
 for ( var = - nums ; var <= nums ; var + + ) 
 var = var + var [ var + nums ] * var [ var ] [ var + var * var ] ; 
 for ( var = - nums ; var <= nums ; var + + ) 
 var = var + var [ var + nums ] * var [ var ] [ var - var * var ] ; 
 var [ var - nums ] [ var + var / nums ] = var - var * var ; 
 } 
 var = var / nums ; 
 } 
 } 
 
 #define var nums 
 int func ( void ) 
 { 
 int var ; 
 float , var ; 
 for ( = nums , var = nums , var = nums ; var <= var ; var + + , var * = nums . nums ) 
 { 
 + = nums . nums / var ; 
 printf ( words , , var ) ; 
 } 
 return nums ; 
 } 
 func ( ) 
 { int var [ nums ] [ nums ] ; 
 printf ( words , var , var [ nums ] , & var [ nums ] [ nums ] , * var ) ; 
 printf ( words , var + nums , var [ nums ] + nums ) ; 
 printf ( words , & var [ nums ] [ nums ] + nums , * var + nums ) ; 
 printf ( words , * ( var + nums ) ) ; 
 } 
 #define var nums 
 #define var nums 
 int func ( void ) 
 { 
 static int var [ var ] = { nums } , var [ var ] = { nums } ; 
 int var , var , var , var , var , var ; 
 var = var ; var = nums ; 
 while ( var ! = nums ) 
 { 
 var [ var ] = var [ var ] = var % nums ; 
 var + + ; 
 var = ( var - var % nums ) / nums ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 var [ var ] = var [ var - var - nums ] ; 
 var = nums ; 
 while ( var [ var ] = = nums ) var + + ; 
 for ( var = nums ; var < var ; var + + ) 
 var [ var ] = var [ var ] ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 if ( var [ var ] = = nums & & var = = nums & & var > var - var ) break ; 
 var [ var ] = var [ var ] + var [ var ] + var ; 
 if ( var [ var ] > nums ) 
 { 
 var [ var ] = var [ var ] % nums ; 
 var = nums ; 
 } 
 else var = nums ; 
 } 
 } 
 } 
 for ( var = nums ; var < ( var - nums ) / nums ; var + + ) 
 { 
 var = var [ var ] ; var [ var ] = var [ var - var - nums ] ; var [ var - var - nums ] = var ; 
 } 
 var = nums ; 
 while ( var [ var ] = = nums ) var + + ; 
 printf ( words , var , var ) ; 
 for ( var = var ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 return nums ; 
 } 
 func ( ) 
 { int var , var , var , var ; 
 scanf ( words , & var , & var ) ; 
 var = nums ; var = var ; 
 while ( var >= var ) { var - = var ; var + + ; } 
 printf ( words , var , var ) ; 
 } 
 func ( ) 
 { int var , var , var , var , var ; 
 scanf ( words , & var , & var ) ; 
 var = var ; var = nums ; var = var ; 
 while ( var <= var ) var * = nums ; 
 while ( var ! = var ) 
 { var * = nums ; var = call_func ( var / nums ) ; 
 if ( var <= var ) { var - = var ; var + + ; } 
 } 
 printf ( words , var , var ) ; 
 } 
 func ( ) 
 { int var , var , var , var , var , var ; 
 scanf ( words , & var , & var ) ; 
 var = var ; var = var ; var = nums ; 
 while ( var % nums = = nums & & var % nums = = nums ) { var = call_func ( var / nums ) ; var = call_func ( var / nums ) ; var * = nums ; } 
 if ( var % nums ! = nums ) { var = - var ; goto var ; } else var = var ; 
 var : var = call_func ( var / nums ) ; 
 var : if ( var % nums = = nums ) goto var ; 
 if ( var > nums ) var = var ; else var = - var ; 
 var = var - var ; 
 if ( var ! = nums ) goto var ; else var * = var ; 
 printf ( words , var ) ; 
 } 
 func ( ) 
 { int var , var , var , var , var ; 
 scanf ( words , & var , & var ) ; 
 var = var ; var = var ; var = nums ; 
 while ( var % nums = = nums & & var % nums = = nums ) { var = call_func ( var / nums ) ; var = call_func ( var / nums ) ; var * = nums ; } 
 while ( var ! = var ) 
 { while ( var % nums = = nums ) var = call_func ( var / nums ) ; 
 while ( var % nums = = nums ) var = call_func ( var / nums ) ; 
 while ( var > var ) var - = var ; 
 while ( var < var ) var - = var ; 
 } 
 var * = var ; 
 printf ( words , var ) ; 
 } 
 #define var nums 
 int func ( void ) 
 { int call_func ( ) ; void call_func ( ) ; 
 int var = nums , var , var [ var ] , var , var , var ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) var [ var ] = nums ; 
 var [ var ] = var - var + nums ; call_func ( var , var , var , var ) ; var + + ; 
 var = var - nums ; 
 do 
 { while ( var [ var ] < var [ var + nums ] ) 
 { 
 var [ var ] + + ; var [ var + nums ] - - ; 
 if ( func ( var , var ) ) { call_func ( var , var , var , var ) ; var + + ; } 
 } 
 var - - ; 
 } while ( var >= nums ) ; 
 } 
 return nums ; 
 } 
 int func ( data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] > var [ var + nums ] ) return nums ; 
 return nums ; 
 } 
 void func ( data_type var [ ] , data_type var , data_type var , data_type var ) 
 { int var ; 
 printf ( words , var , var ) ; 
 for ( var = nums ; var < var ; var + + ) printf ( words , var [ var ] ) ; 
 printf ( words , var [ var ] ) ; 
 } 
 #define var nums 
 void call_func ( data_type var [ ] , data_type var ) ; 
 void call_func ( data_type var , data_type var [ ] , data_type var ) ; 
 int func ( void ) 
 { 
 static double var [ var ] = { nums . nums , nums . nums , nums . nums , nums . nums , nums . nums } ; 
 printf ( words ) ; 
 call_func ( var , var ) ; 
 call_func ( nums . nums , var , var ) ; 
 printf ( words ) ; 
 call_func ( var , var ) ; 
 return nums ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 call_func ( words ) ; 
 } 
 void func ( data_type var , data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 * ( var + + ) * = var ; 
 } 
 #define var nums 
 void func ( data_type var [ ] [ var ] , data_type var ) 
 { 
 int var , var , var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] [ var ] = var ; 
 var + + ; 
 } 
 } 
 void func ( data_type var [ ] [ var ] , data_type var ) 
 { 
 int var , var , var ; 
 var = var = nums ; 
 for ( var = nums ; var < var * var ; var + + ) 
 { 
 var [ var ] [ var ] = var ; 
 if ( var = = nums & & var < var - nums ) { var = var + nums ; var = nums ; } 
 else if ( var = = var - nums ) { var = var + nums ; var = var - nums ; } 
 else { var - - ; var + + ; } 
 } 
 } 
 void func ( data_type var [ ] [ var ] , data_type var ) 
 { 
 int var , var , var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var % nums ! = nums ) 
 for ( var = var - nums ; var >= nums ; var - - ) 
 { 
 var [ var ] [ var ] = var ; 
 var + + ; 
 } 
 else 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] [ var ] = var ; 
 var + + ; 
 } 
 } 
 void func ( data_type var [ ] [ var ] , data_type var ) 
 { 
 int var , var , var , * var ; 
 var = var [ nums ] ; 
 for ( var = nums ; var < var * var ; var + + , var + + ) * var = nums ; 
 var = nums ; var = ( var - nums ) / nums ; 
 for ( var = nums ; var <= var * var ; var + + ) 
 { 
 var [ var ] [ var ] = var ; var - - ; var + + ; 
 if ( var < nums & & var = = var ) { var + = nums ; var - - ; } 
 else if ( var < nums ) var = var - nums ; 
 else if ( var = = var ) var = nums ; 
 if ( var [ var ] [ var ] ! = nums ) { var + = nums ; var - - ; } 
 } 
 } 
 void func ( data_type var [ ] [ var ] , data_type var ) 
 { 
 int var , var , var , var , , var , var , var , * var ; 
 var = nums ; var = var + nums ; var = var + nums ; var = nums ; = nums ; var = var [ nums ] ; 
 for ( var = nums ; var < var * var ; var + + , var + + ) * var = nums ; 
 for ( var = var - nums ; var >= nums ; var - = nums ) 
 { 
 var + + ; 
 for ( var = var ; var <= var - nums + var ; var + + ) 
 { + + ; 
 var [ var - nums ] [ var - nums ] = ; 
 } 
 var - - ; 
 for ( var = var ; var <= var - nums + var ; var + + ) 
 { + + ; 
 var [ var - nums ] [ var - nums ] = ; 
 } 
 var - - ; 
 for ( var = var ; var >= var + nums - var ; var - - ) 
 { + + ; 
 var [ var - nums ] [ var - nums ] = ; 
 } 
 var + + ; 
 for ( var = var ; var >= var + nums - var ; var - - ) 
 { + + ; 
 var [ var - nums ] [ var - nums ] = ; 
 } 
 } 
 var = var / nums ; 
 if ( var % nums ! = nums ) var [ var ] [ var ] = + nums ; 
 } 
 void func ( data_type var [ ] [ var ] , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 printf ( words ) ; 
 } 
 int func ( void ) 
 { 
 int var [ var ] [ var ] ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 return nums ; 
 } 
 
 void call_func ( data_type var ) ; 
 int func ( void ) 
 { int var ; 
 while ( scanf ( words , & var ) = = nums ) 
 { call_func ( var ) ; 
 call_func ( words ) ; 
 } 
 return nums ; 
 } 
 void func ( data_type var ) 
 { int var ; 
 var = var % nums ; 
 if ( var >= nums ) 
 call_func ( var / nums ) ; 
 call_func ( words + var ) ; 
 return ; 
 } 
 
 char * call_func ( data_type , data_type * ) ; 
 int func ( void ) 
 { 
 char var [ nums * sizeof ( int ) + nums ] ; 
 int var ; 
 while ( scanf ( words , & var ) = = nums ) 
 printf ( words , var , call_func ( var , var ) ) ; 
 return nums ; 
 } 
 char * func ( data_type var , data_type * var ) 
 { 
 int var ; 
 static int var = nums * sizeof ( int ) ; 
 for ( var = var - nums ; var >= nums ; var - - , var > >= nums ) 
 var [ var ] = ( nums & var ) + words ; 
 var [ var ] = words ; 
 return var ; 
 } 
 func ( ) 
 { int var , var , var , var , var , var , var , var , var , var , var , var , var , var , var ; 
 static int var [ nums ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } ; 
 int var = var , var ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var % nums ! = nums ) var = nums ; 
 else if ( var % nums = = nums ) var = nums ; 
 else if ( var % nums = = nums ) var = nums ; 
 else var = nums ; 
 if ( var = = nums ) var [ nums ] = nums ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) var = var + var [ var ] ; 
 var = var + var ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) var = var + var [ var ] ; 
 var = var + var ; 
 var = var - var ; 
 var = nums * var + var / nums + var - var ; 
 var = var % nums ; 
 var = var % nums ; 
 var = var % nums ; 
 printf ( words , var ) ; 
 printf ( words , var / nums . nums ) ; 
 printf ( words , var / nums . nums ) ; 
 printf ( words , var / nums . nums ) ; 
 getch ( ) ; 
 call_func ( & var , & var , words ) ; 
 call_func ( ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 getch ( ) ; 
 call_func ( ) ; 
 } 
 
 #define var int 
 #define var nums 
 #define var nums 
 extern void func ( ) 
 { 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; call_func ( nums , nums , words ) ; call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; call_func ( nums , nums , words ) ; call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; call_func ( nums , nums , words ) ; call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 } extern void func ( ) 
 { 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( ) ; 
 } extern void func ( ) 
 { 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 } extern void func ( ) 
 { 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; call_func ( nums , nums , nums , nums ) ; call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; call_func ( nums , nums , nums , nums ) ; call_func ( nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 } extern void func ( ) 
 { 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( ) ; 
 } extern void func ( ) 
 { 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 } extern void func ( ) 
 { 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums , nums ) ; call_func ( nums , nums , nums , nums ) ; call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; call_func ( nums , nums , nums , nums ) ; call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; call_func ( nums , nums , nums , nums ) ; call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; call_func ( nums , nums , nums , nums ) ; call_func ( nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 } extern void func ( ) 
 { 
 call_func ( nums , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 } extern void func ( ) 
 { 
 call_func ( nums , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 } 
 extern void func ( ) 
 { 
 call_func ( nums , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 } 
 extern void func ( ) 
 { 
 call_func ( nums , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 } 
 extern void func ( ) 
 { 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( nums , nums , words ) ; 
 call_func ( ) ; 
 } 
 var call_func ( data_type ) ; 
 int func ( void ) 
 { 
 int var ; 
 int var = nums ; 
 while ( ( var = call_func ( ) ) ! = ) 
 if ( call_func ( var ) = = var ) var + + ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 var func ( data_type var ) 
 { 
 if ( var = = words | | var = = words | | var = = words ) 
 return ( var ) ; 
 else 
 return ( var ) ; 
 } 
 extern void func ( data_type var , data_type var , data_type var , data_type var ) 
 { 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 } 
 struct 
 { int var ; 
 struct struct_name * struct_var ; 
 } ; 
 struct struct_name * struct_var ( int var [ ] , int var ) 
 { struct struct_name * struct_var , * var ; 
 for ( var = NULL ; var ; var - - ) 
 { var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 var - > var = * var + + ; 
 var - > var = var ; var = var ; 
 } 
 return ( var ) ; 
 } 
 struct struct_name * struct_var ( struct struct_name * struct_var ) 
 { struct struct_name * struct_var , * var , * var , * var , * var ; 
 var = NULL ; var = var ; 
 while ( var ) 
 { var = ( struct ) malloc ( sizeof ( struct ) ) ; 
 var - > var = var - > var ; 
 var = var ; 
 while ( var ! = NULL & & var - > var < var - > var ) 
 { var = var ; var = var - > var ; } 
 if ( var = = var ) var = var ; 
 else var - > var = var ; 
 var - > var = var ; var = var - > var ; 
 } 
 return ( var ) ; 
 } 
 int var [ ] = { nums , nums , nums , nums , nums , nums , nums } ; 
 func ( ) 
 { struct struct_name * struct_var , * var , * var ; 
 var = call_func ( var , sizeof ( var ) / sizeof ( var [ nums ] ) ) ; 
 for ( var = var ; var ; var = var - > var ) 
 printf ( words , var - > var ) ; 
 printf ( words ) ; 
 var = call_func ( var ) ; 
 for ( var = var ; var ; var = var - > var ) 
 printf ( words , var - > var ) ; 
 printf ( words ) ; 
 } 
 
 int func ( data_type var , data_type * var [ ] ) 
 { 
 int var ; 
 FILE * var ; 
 var var = nums ; 
 if ( var ! = nums ) 
 { 
 printf ( words , var [ nums ] ) ; 
 call_func ( nums ) ; 
 } 
 if ( ( var = fopen ( var [ nums ] , words ) ) = = NULL ) 
 { 
 printf ( words var % words 
 call_func ( nums ) ; 
 } 
 while ( ( var = call_func ( var ) ) ! = ) 
 { 
 call_func ( var , var ) ; 
 var + + ; 
 } 
 fclose ( var ) ; 
 printf ( words , var [ nums ] , var ) ; 
 return nums ; 
 } 
 
 #define var nums 
 int var [ var ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } ; 
 int func ( void ) 
 { 
 int var ; 
 extern int var [ ] ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var + nums , * ( var + var ) ) ; 
 return nums ; 
 } 
 #define var nums 
 func ( ) 
 { static int var [ var ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } ; 
 int var , var , var , var = var ; 
 for ( var = nums ; var < var - nums ; var + + ) 
 for ( var = var + nums ; var < var ; var + + ) 
 while ( var [ var ] = = var [ var ] ) 
 { if ( var = = var - nums ) break ; 
 for ( var = var + nums ; var < var ; var + + ) var [ var - nums ] = var [ var ] ; 
 var - - ; 
 } 
 for ( var = nums ; var < var ; var + + ) printf ( words , var [ var ] ) ; 
 printf ( words , var ) ; 
 } 
 #define var nums 
 float var = nums , var = nums ; 
 float call_func ( var , var ) 
 data_type var [ ] ; 
 int var ; 
 { int var ; 
 float var , var = var [ nums ] ; 
 var = var = var [ nums ] ; 
 for ( var = nums ; var < var ; var + + ) 
 { if ( var [ var ] > var ) var = var [ var ] ; 
 else if ( var [ var ] < var ) var = var [ var ] ; 
 var = var + var [ var ] ; 
 } 
 var = var / var ; 
 return ( var ) ; 
 } 
 func ( ) 
 { float var , var [ var ] = { nums , nums , nums , nums . nums , nums , nums , nums , nums . nums , nums , nums , nums } ; 
 int var , var , var = var ; 
 var = call_func ( var , var ) ; 
 printf ( words , var , var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 while ( var [ var ] < var ) 
 { if ( var = = var - nums ) { var - - ; break ; } 
 for ( var = var ; var < var - nums ; var + + ) var [ var ] = var [ var + nums ] ; 
 var - - ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 } 
 
 void call_func ( data_type var [ ] , data_type var ) ; 
 int func ( void ) 
 { 
 static int var [ nums ] [ nums ] = { { nums , nums , nums , nums } , { nums , nums , nums , nums } , { nums , nums , nums , nums } } ; 
 int var , var ; 
 for ( var = nums ; var < nums ; var + + ) 
 call_func ( var [ var ] , nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 call_func ( words ) ; 
 } 
 return nums ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 var [ var ] * = nums ; 
 } 
 
 void call_func ( data_type var [ ] , data_type var ) ; 
 int func ( void ) 
 { 
 static int var [ nums ] [ nums ] = { { nums , nums , nums , nums } , { nums , nums , nums , nums } , { nums , nums , nums , nums } } ; 
 int var , var ; 
 call_func ( var [ nums ] , nums * nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 call_func ( words ) ; 
 } 
 return nums ; 
 } 
 void func ( data_type var [ ] , data_type var ) 
 { 
 int var ; 
 for ( var = nums ; var < var ; var + + ) 
 var [ var ] * = nums ; 
 } 
 
 void call_func ( data_type var [ ] [ nums ] , data_type var ) ; 
 int func ( void ) 
 { 
 static int var [ nums ] [ nums ] = { { nums , nums , nums , nums } , { nums , nums , nums , nums } , { nums , nums , nums , nums } } ; 
 int var , var ; 
 call_func ( var , nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 call_func ( words ) ; 
 } 
 return nums ; 
 } 
 void func ( data_type var [ ] [ nums ] , data_type var ) 
 { 
 int var , var ; 
 for ( var = nums ; var < var ; var + + ) 
 for ( var = nums ; var < nums ; var + + ) 
 var [ var ] [ var ] * = nums ; 
 } 
 func ( ) 
 { 
 printf ( words ) ; 
 } 
 func ( ) 
 { int var , var , var ; 
 var = nums ; var = nums ; 
 var = var + var ; 
 printf ( words , var ) ; 
 } 
 func ( ) 
 { int var , var , var ; 
 scanf ( words , & var , & var ) ; 
 var = call_func ( var , var ) ; 
 printf ( words , var ) ; 
 } 
 int call_func ( var , var ) 
 data_type var , var ; 
 { int var ; 
 if ( var > var ) var = var ; 
 else var = var ; 
 return ( var ) ; 
 } 
 #define var nums 
 func ( ) 
 { 
 int var , var ; 
 var = nums ; 
 var = var * var ; 
 printf ( words , var ) ; 
 } 
 func ( ) 
 { int var , var , var , var ; 
 var var ; 
 var = nums ; var = - nums ; var = nums ; 
 var = var + var ; var = var + var ; 
 printf ( words , var , var ) ; 
 } 
 func ( ) 
 { printf ( words ) ; 
 printf ( words ) ; 
 } 
 func ( ) 
 { char var = nums , var = nums ; 
 printf ( words , var , var ) ; 
 } 
 func ( ) 
 { var int var = nums ; 
 int var = - nums ; 
 printf ( words , var , var , var , var ) ; 
 printf ( words , var , var , var , var ) ; 
 } 
 func ( ) 
 { float var , var ; 
 var = nums . nums ; var = nums . nums ; 
 printf ( words , var + var ) ; 
 } 
 func ( ) 
 { double var , var ; 
 var = nums . nums ; var = nums . nums ; 
 printf ( words , var + var ) ; 
 } 
 func ( ) 
 { char var ; 
 var = call_func ( ) ; 
 call_func ( var ) ; 
 } 
 func ( ) 
 { int var = nums , var ; 
 var = call_func ( var , + + var ) ; 
 printf ( words , var ) ; 
 } 
 int call_func ( var , var ) 
 data_type var , var ; 
 { int var ; 
 if ( var > var ) var = nums ; 
 else if ( var = = var ) var = nums ; 
 else var = - nums ; 
 return ( var ) ; 
 } 
 #define var nums 
 func ( ) 
 { static int var [ var ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } ; 
 static int var [ var ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } ; 
 int var , var = nums , var = nums , var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( call_func ( var [ var ] , var [ var ] ) = = nums ) var = var + nums ; 
 else if ( call_func ( var [ var ] , var [ var ] ) = = nums ) var = var + nums ; 
 else var = var + nums ; 
 printf ( words , var , var , var ) ; 
 if ( var > var ) printf ( words ) ; 
 else if ( var < var ) printf ( words ) ; 
 else printf ( words ) ; 
 } 
 call_func ( var , var ) 
 data_type var , var ; 
 { int var ; 
 if ( var > var ) var = nums ; 
 else if ( var < var ) var = - nums ; 
 else var = nums ; 
 return ( var ) ; 
 } 
 #define var nums 
 float call_func ( var ) 
 data_type var [ var ] ; 
 { int var ; 
 float var , var = var [ nums ] ; 
 for ( var = nums ; var < var ; var + + ) 
 var = var + var [ var ] ; 
 var = var / var ; 
 return ( var ) ; 
 } 
 func ( ) 
 { float var , var [ var ] = { nums , nums , nums , nums . nums , nums , nums , nums , nums . nums , nums , nums } ; 
 var = call_func ( var ) ; 
 printf ( words , var ) ; 
 } 
 #define var nums 
 float var = nums , var = nums ; 
 float call_func ( var , var ) 
 data_type var [ ] ; 
 int var ; 
 { int var ; 
 float var , var = var [ nums ] ; 
 var = var = var [ nums ] ; 
 for ( var = nums ; var < var ; var + + ) 
 { if ( var [ var ] > var ) var = var [ var ] ; 
 else if ( var [ var ] < var ) var = var [ var ] ; 
 var = var + var [ var ] ; 
 } 
 var = var / var ; 
 return ( var ) ; 
 } 
 func ( ) 
 { float var , var [ var ] = { nums , nums , nums , nums . nums , nums , nums , nums , nums . nums , nums , nums } ; 
 var = call_func ( var , var ) ; 
 printf ( words , var , var , var ) ; 
 } 
 call_func ( var ) 
 data_type var ; 
 { var int var = nums ; 
 static int var = nums ; 
 var = var + nums ; 
 var = var + nums ; 
 return ( var + var + var ) ; 
 } 
 func ( ) 
 { int var = nums , var ; 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , call_func ( var ) ) ; 
 } 
 int call_func ( var ) 
 data_type var ; 
 { static int var = nums ; 
 var = var * var ; 
 return ( var ) ; 
 } 
 func ( ) 
 { int var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 printf ( words , var , call_func ( var ) ) ; 
 } 
 #define var printf 
 #define var words 
 #define var words 
 #define var var var 
 #define var var var var 
 #define var var var var var 
 #define var var var var var var 
 #define var words 
 func ( ) 
 { int var , var , var , var ; 
 char var [ ] = words ; 
 var = nums ; var = nums ; var = nums ; var = nums ; 
 call_func ( var , var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var , var ) ; 
 call_func ( var , var ) ; 
 } 
 #define var printf ( words ) 
 #define call_func ( var , var ) printf ( words , var ) 
 #define call_func ( var , var ) call_func ( var , var ) ; var 
 #define call_func ( var , var , var ) call_func ( var , var ) ; call_func ( var , var ) ; var 
 func ( ) 
 { int var , var , var , var ; 
 float var , var , var , var ; 
 var var , var ; 
 char var , var ; 
 var = nums ; var = nums ; var = nums ; var = nums ; var = nums . nums ; var = nums . nums ; var = nums . nums ; var = nums . nums ; 
 var = nums ; var = nums ; var = words ; var = words ; 
 call_func ( var , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , var , var ) ; 
 call_func ( var , var , var ) ; 
 } 
 func ( ) 
 { int var , var ; 
 int * var , * var ; 
 var = nums ; var = nums ; 
 var = & var ; 
 var = & var ; 
 printf ( words , var , var ) ; 
 printf ( words , * var , * var ) ; 
 } func ( ) 
 { 
 int * var , * var , * var , var , var ; 
 scanf ( words , & var , & var ) ; 
 var = & var ; var = & var ; 
 if ( var < var ) 
 { var = var ; var = var ; var = var ; } 
 printf ( words , var , var ) ; 
 printf ( words , * var , * var ) ; 
 } call_func ( var , var ) 
 data_type * var , * var ; 
 { int var ; 
 var = * var ; 
 * var = * var ; 
 * var = var ; 
 } 
 func ( ) 
 { 
 int var , var ; 
 int * var , * var ; 
 scanf ( words , & var , & var ) ; 
 var = & var ; var = & var ; 
 if ( var < var ) call_func ( var , var ) ; 
 printf ( words , var , var ) ; 
 } 
 call_func ( var , var ) 
 data_type * var , * var ; 
 { int var ; 
 var = * var ; * var = * var ; * var = var ; 
 } 
 call_func ( var , var , var ) 
 data_type * var , * var , * var ; 
 { if ( * var < * var ) call_func ( var , var ) ; 
 if ( * var < * var ) call_func ( var , var ) ; 
 if ( * var < * var ) call_func ( var , var ) ; 
 } 
 func ( ) 
 { int var , var , var , * var , * var , * var ; 
 scanf ( words , & var , & var , & var ) ; 
 var = & var ; var = & var ; var = & var ; 
 call_func ( var , var , var ) ; 
 printf ( words , var , var , var ) ; 
 } 
 func ( ) 
 { int var [ nums ] ; 
 int * var , var ; 
 for ( var = nums ; var < nums ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 printf ( words ) ; 
 for ( var = var ; var < var + nums ; var + + ) 
 printf ( words , var , * var ) ; 
 printf ( words ) ; 
 } 
 func ( ) 
 { float * var , var , var [ nums ] ; 
 var = var ; 
 for ( var = nums ; var < nums ; var + + ) 
 scanf ( words , var + + ) ; 
 printf ( words ) ; 
 for ( var = var , var = nums ; var < nums ; var + + , var + + ) 
 printf ( words , var , * var ) ; 
 printf ( words ) ; 
 } 
 void call_func ( var , var ) 
 data_type var [ ] , var ; 
 { int var , var , var , var = ( var - nums ) / nums ; 
 var = nums ; var = var - nums ; 
 for ( ; var <= var ; var + + , var - - ) 
 { var = var [ var ] ; 
 var [ var ] = var [ var ] ; 
 var [ var ] = var ; 
 } 
 return ; 
 } 
 void call_func ( var , var ) 
 data_type * var , var ; 
 { int * var , var , * var , * var , var = ( var - nums ) / nums ; 
 var = var ; var = var + var - nums ; var = var + var ; 
 for ( ; var <= var ; var + + , var - - ) 
 { var = * var ; 
 * var = * var ; 
 * var = var ; 
 } 
 return ; 
 } 
 func ( ) 
 { static int var , var [ nums ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 call_func ( var , nums ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 } 
 func ( ) 
 { static int var [ nums ] [ nums ] = { nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums , nums } ; 
 int ( * var ) [ nums ] , var , var ; 
 var = var ; 
 scanf ( words , & var , & var ) ; 
 printf ( words , var , var , * ( * ( var + var ) + var ) ) ; 
 } 
 func ( ) 
 { char * var = words ; 
 printf ( words , var ) ; 
 } 
 func ( ) 
 { static float var [ ] [ nums ] = { { nums , nums , nums , nums } , { nums , nums , nums , nums } , { nums , nums , nums , nums } } ; 
 float * call_func ( ) ; 
 float * var ; 
 int var , var ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 printf ( words , var ) ; 
 var = call_func ( var , var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , * ( var + var ) ) ; 
 printf ( words ) ; 
 } 
 float * call_func ( var , var ) 
 data_type ( * var ) [ nums ] ; 
 int var ; 
 { float * var ; 
 var = * ( var + var ) ; 
 return ( var ) ; 
 } 
 func ( ) 
 { static float var [ ] [ nums ] = { { nums , nums , nums , nums } , { nums , nums , nums , nums } , { nums , nums , nums , nums } } ; 
 float * call_func ( ) ; 
 float * var ; 
 int var , var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { var = call_func ( var + var ) ; 
 if ( var = = * ( var + var ) ) 
 { printf ( words , var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , * ( var + var ) ) ; 
 printf ( words ) ; 
 } 
 } 
 } 
 float * call_func ( var ) 
 data_type ( * var ) [ nums ] ; 
 { int var ; 
 float * var ; 
 var = * ( var + nums ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 if ( * ( * var + var ) < nums ) var = * var ; 
 return ( var ) ; 
 } 
 #define NULL nums 
 #define var sizeof ( struct ) 
 struct { var int var ; 
 int var ; 
 struct struct_name * struct_var ; } ; 
 int var ; 
 struct struct_name * struct_var ( ) 
 { struct struct_name * struct_var , * var , * var ; 
 var = nums ; 
 var = NULL ; 
 var = var = ( struct ) malloc ( var ) ; 
 scanf ( words , & var - > var , & var - > var ) ; 
 while ( var - > var ! = nums ) 
 { var = var + nums ; 
 if ( var = = nums ) var = var ; 
 else var - > var = var ; 
 var = var ; 
 var = ( struct ) malloc ( var ) ; 
 scanf ( words , & var - > var , & var - > var ) ; 
 } 
 var - > var = NULL ; 
 return ( var ) ; 
 } 
 void call_func ( var ) 
 struct struct_name * var ; 
 { struct struct_name * struct_var ; 
 int var = nums ; 
 printf ( words ) ; 
 var = var ; 
 if ( var ! = NULL ) 
 do { var = var + nums ; 
 printf ( words , var , var - > var , var - > var ) ; 
 var = var - > var ; 
 } while ( var ! = NULL ) ; 
 } 
 struct struct_name * struct_var ( var , var ) 
 struct struct_name * struct_var ; 
 var int var ; 
 { struct struct_name * struct_var , * var ; 
 if ( var = = NULL ) { printf ( words ) ; return ( var ) ; } 
 var = var ; 
 while ( var ! = var - > var & & var - > var ! = NULL ) { var = var ; var = var - > var ; } 
 if ( var = = var - > var ) 
 { if ( var = = var ) var = var - > var ; 
 else var - > var = var - > var ; 
 printf ( words , var - > var , var - > var ) ; 
 var = var - nums ; 
 } 
 else printf ( words , var ) ; 
 return ( var ) ; 
 } 
 struct struct_name * struct_var ( var , var ) 
 struct struct_name * struct_var , * var ; 
 { struct struct_name * struct_var , * var ; 
 var = var = var ; 
 if ( var = = NULL ) { var = var ; var = var + nums ; var - > var = NULL ; return ( var ) ; } 
 while ( var - > var <= var - > var & & var - > var ! = NULL ) { var = var ; var = var - > var ; } 
 if ( var - > var = = NULL ) { var - > var = var ; var - > var = NULL ; } 
 else if ( var ! = var ) { var - > var = var ; var - > var = var ; } 
 else { var = var ; var - > var = var ; } 
 var = var + nums ; 
 return ( var ) ; 
 } 
 func ( ) 
 { struct struct_name * struct_var ( ) , * call_func ( ) ; 
 void call_func ( ) ; 
 struct struct_name * struct_var , * var ; 
 var int var ; 
 var = call_func ( ) ; 
 call_func ( var ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 while ( var ! = nums ) 
 { var = call_func ( var , var ) ; 
 call_func ( var ) ; 
 scanf ( words , & var ) ; 
 } 
 var = ( struct ) malloc ( var ) ; 
 scanf ( words , & var - > var , & var - > var ) ; 
 while ( var - > var ! = nums ) 
 { var = call_func ( var , var ) ; 
 call_func ( var ) ; 
 var = ( struct ) malloc ( var ) ; 
 scanf ( words , & var - > var , & var - > var ) ; 
 } 
 } 
 
 int func ( void ) 
 { 
 void call_func ( ) ; 
 void call_func ( ) ; 
 static float var [ nums ] [ nums ] = { { nums , nums , nums , nums } , 
 { nums , nums , nums , nums } , 
 { nums , nums , nums , nums } } ; 
 call_func ( * var , nums ) ; 
 call_func ( var , nums ) ; 
 return nums ; 
 } 
 void call_func ( var , var ) 
 data_type * var ; int var ; 
 { 
 float * var , var = nums , var ; 
 var = var + var - nums ; 
 for ( ; var <= var ; var + + ) 
 var = var + ( * var ) ; 
 var = var / var ; 
 printf ( words , var ) ; 
 } 
 void call_func ( var , var ) 
 data_type ( * var ) [ nums ] ; int var ; 
 { 
 int var ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 printf ( words , * ( * ( var + var ) + var ) ) ; 
 printf ( words ) ; 
 } 
 var int call_func ( var ) 
 data_type var ; 
 { var int var ; 
 if ( var = = nums ) var = nums ; 
 else var = var * call_func ( var - nums ) ; 
 return ( var ) ; 
 } 
 func ( ) 
 { int var ; 
 scanf ( words , & var ) ; 
 printf ( words , var , call_func ( var ) ) ; 
 } 
 int call_func ( var , var , var , var ) 
 data_type var ; 
 double var [ ] , var [ ] , var [ ] ; 
 { int var , var , var , var , var , var ; 
 double var , var , var , var , var , var , var ; 
 double var , var , var , var , var , var , var , var , var , var , var , var , var ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 void call_func ( ) ; 
 var = var ; 
 while ( ( var > nums ) & & ( call_func ( var [ var ] ) + nums . nums = = nums . nums ) ) var - - ; 
 if ( var <= nums ) { printf ( words ) ; return ( - nums ) ; } 
 for ( var = nums ; var <= var ; var + + ) var [ var ] = var [ var ] / var [ var ] ; 
 for ( var = nums ; var <= var / nums ; var + + ) { var = var [ var ] ; var [ var ] = var [ var - var ] ; var [ var - var ] = var ; } 
 var = var ; var = nums ; var = nums . nums ; 
 var = nums ; 
 while ( var = = nums ) 
 { var = call_func ( var [ var ] ) ; 
 while ( var < nums . var - nums ) 
 { var [ var - nums ] = nums . nums ; var [ var - nums ] = nums . nums ; var - - ; 
 if ( var = = nums ) 
 { var [ nums ] = - var [ nums ] * var / var [ nums ] ; var [ nums ] = nums . nums ; 
 return ( nums ) ; 
 } 
 var = call_func ( var [ var ] ) ; 
 } 
 var = call_func ( var ) ; var = var / ( nums . nums * var ) ; var = call_func ( var ) ; 
 var = var ; var = var * var ; 
 for ( var = nums ; var <= var ; var + + ) { var [ var ] = var [ var ] / var ; var = var * var ; } 
 var = nums . nums ; var = var ; var = nums . nums ; var = var ; var = nums . nums ; 
 var = nums . var + nums ; 
 var : 
 var = var [ nums ] ; var = nums . nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 { var = var * var ; var = var * var ; 
 var = ( var + var ) * ( var + var ) ; 
 var = var - var + var [ var ] ; var = var - var - var ; 
 } 
 var = var * var + var * var ; 
 if ( var >= var ) 
 { if ( var ! = nums ) 
 { var = nums ; 
 call_func ( & var , & var , & var , & var , & var , & var , & var , & var , & var , & var , & var , & var ) ; 
 if ( var = = nums ) goto var ; 
 } 
 else 
 { call_func ( & var , & var , & var , & var , & var , & var , & var , & var , & var , & var , & var ) ; 
 if ( var >= nums . var - nums ) goto var ; 
 if ( var > nums . var - nums ) 
 { var = nums ; 
 call_func ( & var , & var , & var , & var , & var , & var , & var , & var , & var , & var , & var , & var ) ; 
 if ( var = = nums ) goto var ; 
 } 
 } 
 call_func ( var , var , var , & var , & var , & var , & var , & var , & var ) ; 
 } 
 else 
 { var = var ; var = var ; var = var ; var = nums ; 
 if ( var <= nums . var - nums ) 
 call_func ( var , var , var , & var , & var , & var , & var , & var , & var ) ; 
 else 
 { var = var * var [ nums ] ; var = nums . nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 { var = var * var ; var = var * var ; var = ( var + var ) * ( var + var ) ; 
 var = var - var + ( var - var + nums ) * var [ var - nums ] ; 
 var = var - var - var ; 
 } 
 var = var * var + var * var ; 
 if ( var <= nums . var - nums ) 
 { var = nums ; 
 call_func ( & var , & var , & var , & var , & var , & var , & var , & var , & var , & var , & var , & var ) ; 
 if ( var = = nums ) goto var ; 
 call_func ( var , var , var , & var , & var , & var , & var , & var , & var ) ; 
 } 
 else 
 { var = ( var * var + var * var ) / var ; 
 var = ( var * var - var * var ) / var ; 
 var = nums . nums + nums . nums / var ; 
 call_func ( & var , & var , & var , & var , & var , & var , & var , & var , & var , & var , & var ) ; 
 if ( var >= nums . var - nums ) goto var ; 
 if ( var > nums . var - nums ) 
 { var = nums ; 
 call_func ( & var , & var , & var , & var , & var , & var , & var , & var , & var , & var , & var , & var ) ; 
 if ( var = = nums ) goto var ; 
 } 
 call_func ( var , var , var , & var , & var , & var , & var , & var , & var ) ; 
 } 
 } 
 } 
 if ( var = = nums ) var = nums ; 
 else var = nums ; 
 } 
 return ( nums ) ; 
 } 
 static void call_func ( var , var , var , var , var , var , var , var , var , var , var ) 
 data_type * var , * var ; 
 double * var , * var , * var , * var , * var , * var , * var , * var , * var ; 
 { * var = nums ; 
 while ( * var = = nums ) 
 { * var = * var / nums . nums ; * var = nums ; 
 * var = * var - ( * var ) * ( * var ) ; 
 * var = * var - ( * var ) * ( * var ) ; 
 if ( * var >= nums ) 
 { * var = call_func ( ( * var ) * ( * var ) + ( * var ) * ( * var ) ) ; 
 * var = call_func ( nums . nums / ( * var ) ) ; 
 if ( * var >= * var ) * var = nums ; 
 } 
 } 
 return ; 
 } 
 static void call_func ( var , var , var , var , var , var , var , var , var ) 
 data_type * var ; 
 double * var , * var , * var , * var , * var ; 
 double var [ ] , var [ ] , var [ ] ; 
 { int var ; 
 if ( func ( * var ) <= nums . var - nums ) 
 { * var = - ( * var ) ; * var = nums . nums ; * var = nums . nums ; } 
 else 
 { * var = - nums . nums * ( * var ) ; * var = ( * var ) * ( * var ) + ( * var ) * ( * var ) ; 
 var [ * var - nums ] = ( * var ) * ( * var ) ; 
 var [ * var - nums ] = - ( * var ) * ( * var ) ; 
 * var = * var - nums ; 
 } 
 for ( var = nums ; var <= * var ; var + + ) 
 { var [ var ] = var [ var ] - var [ var - nums ] * ( * var ) ; 
 var [ var + nums ] = var [ var + nums ] - var [ var - nums ] * ( * var ) ; 
 } 
 var [ * var - nums ] = ( * var ) * ( * var ) ; var [ * var - nums ] = ( * var ) * ( * var ) ; 
 * var = * var - nums ; 
 if ( * var = = nums ) 
 { var [ nums ] = - var [ nums ] * ( * var ) / var [ nums ] ; var [ nums ] = nums . nums ; } 
 return ; 
 } 
 static void call_func ( var , var , var , var , var , var , var , var , var , var , var , var ) 
 data_type * var , * var , * var ; 
 double * var , * var , * var , * var , * var , * var , * var , * var , * var ; 
 { if ( * var = = nums ) 
 { * var = nums ; 
 * var = call_func ( ( * var ) * ( * var ) + ( * var ) * ( * var ) ) ; 
 if ( * var > nums . nums ) * var = nums . nums ; 
 * var = nums . nums / ( nums . nums * ( * var ) ) ; * var = nums . nums ; 
 } 
 while ( * var = = nums ) 
 { * var = * var + ( * var ) ; 
 * var = ( * var ) * call_func ( * var ) ; * var = ( * var ) * call_func ( * var ) ; 
 * var = * var + * var ; * var = * var + * var ; 
 if ( * var <= nums . nums ) { * var = nums ; return ; } 
 * var = * var / nums . nums ; 
 if ( * var <= nums . var - nums ) { * var = nums ; return ; } 
 * var = nums . nums ; 
 } 
 } 
 func ( ) 
 { int var ; 
 double var [ nums ] , var [ nums ] ; 
 static double var [ nums ] = { - nums . nums , nums . nums , - nums . nums , nums . nums , nums . nums , - nums . nums , nums . nums } ; 
 var = call_func ( var , nums , var , var ) ; 
 if ( var > nums ) 
 { for ( var = nums ; var <= nums ; var + + ) 
 printf ( words , var , var [ var ] , var [ var ] ) ; 
 printf ( words ) ; 
 } 
 } 
 
 var int call_func ( var , var , var ) 
 data_type var [ ] ; 
 int var , var ; 
 { int var ; 
 var int var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] - words > nums & & var [ var ] - words < nums ) var = var * var + ( var [ var ] - words - nums ) ; 
 else if ( var [ var ] - words >= nums ) var = var * var + ( var [ var ] - words - nums ) ; 
 else var = var * var + ( var [ var ] - words ) ; 
 return ( var ) ; 
 } 
 void call_func ( var , var ) 
 var data_type var ; 
 int var ; 
 { int var ; 
 var = var % var ; 
 if ( var >= var ) call_func ( var / var , var ) ; 
 if ( var > nums ) call_func ( words + var + nums ) ; 
 else call_func ( words + var ) ; 
 } 
 void func ( ) 
 { printf ( words ) ; 
 printf ( words ) ; 
 printf ( words ) ; 
 } 
 void func ( ) 
 { printf ( words ) ; 
 } 
 func ( ) 
 { char var [ nums ] , var [ nums ] , var ; 
 int var , var , var , var , var , var , var , var , var , var ; 
 var int var ; 
 var = nums ; 
 while ( var ) 
 { var = nums ; 
 while ( ! var ) 
 { call_func ( ) ; 
 scanf ( words , var ) ; 
 printf ( words ) ; 
 var = call_func ( var ) ; 
 if ( var < nums ) call_func ( ) ; 
 else 
 { for ( var = nums ; var [ var ] ! = words ; var + + ) ; 
 if ( var > nums ) call_func ( ) ; 
 else 
 { if ( var = = nums ) var = ( var [ nums ] - words ) * nums + ( var [ nums ] - words ) ; 
 else var = var [ nums ] - words ; 
 if ( var < nums | | var > nums ) call_func ( ) ; 
 else 
 { for ( var = nums , var + + , var = nums ; var [ var ] ! = words & & var = = nums ; var + + , var + + ) 
 { if ( var <= nums ) 
 { if ( var [ var ] - words < var & & var [ var ] >= words ) var [ var ] = var [ var ] ; 
 else 
 { call_func ( ) ; 
 var = nums ; 
 } 
 } 
 else 
 { if ( var [ var ] - words < nums & & var [ var ] >= words ) var [ var ] = var [ var ] ; 
 else 
 { if ( var [ var ] > words & & var [ var ] - words <= var - nums ) var [ var ] = var [ var ] ; 
 else 
 { if ( var [ var ] > words & & var [ var ] - words <= var - nums ) var [ var ] = var [ var ] ; 
 else 
 { call_func ( ) ; 
 var = nums ; 
 } 
 } 
 } 
 } 
 } 
 if ( var = = nums ) 
 { if ( var - var - nums > nums ) call_func ( ) ; 
 else 
 { if ( var - var - nums = = nums ) var = ( var [ var + nums ] - words ) * nums + ( var [ var + nums ] - words ) ; 
 else var = var [ var + nums ] - words ; 
 if ( var > nums | | var < nums ) call_func ( ) ; 
 else var = nums ; 
 } 
 } 
 } 
 } 
 } 
 } 
 var = call_func ( var , var , var ) ; 
 call_func ( var , var ) ; 
 var = nums ; 
 while ( var ) 
 { printf ( words ) ; 
 var = call_func ( ) ; 
 scanf ( words , & var ) ; 
 if ( var = = words | | var = = words ) 
 { var = nums ; 
 var = nums ; 
 } 
 else 
 { if ( var = = words | | var = = words ) 
 { var = nums ; 
 var = nums ; 
 } 
 else var = nums ; 
 } 
 } 
 } 
 } 
 static var [ nums ] , var [ nums ] ; 
 void call_func ( var ) 
 data_type var ; 
 { int var , var , var , var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 { if ( * ( var + var ) ! = * ( var + var ) ) var = nums ; 
 } 
 if ( ! var ) return ; 
 for ( var = nums ; var < var ; var + + ) * ( var + var ) = * ( var + var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { if ( * ( var + var - nums ) <= * ( var + var ) ) printf ( words , * ( var + var - nums ) ) ; 
 else 
 { printf ( words , * ( var + var - nums ) ) ; 
 var = var - nums ; 
 break ; 
 } 
 } 
 for ( var = var + nums ; var < var ; var + + ) 
 { if ( * ( var + var ) < * ( var + var ) ) 
 { printf ( words , * ( var + var ) ) ; 
 break ; 
 } 
 else if ( * ( var + var ) = = * ( var + var ) ) printf ( words , * ( var + var ) ) ; 
 } 
 printf ( words ) ; 
 } 
 void call_func ( var , var , var ) 
 data_type var , var , var ; 
 { int var ; 
 for ( var = nums ; var <= var ; var + + ) 
 { if ( var - var < - nums ) break ; 
 * ( var + var - var ) = var ; 
 if ( var <= nums ) 
 { call_func ( var ) ; 
 continue ; 
 } 
 call_func ( var , var - var , var ) ; 
 } 
 } 
 void func ( ) 
 { printf ( words ) ; 
 printf ( words ) ; 
 } 
 func ( ) 
 { char var ; 
 int var , var , var , var ; 
 do 
 { call_func ( ) ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { * ( var + var ) = nums ; 
 * ( var + var ) = nums ; 
 } 
 * ( var + var ) = * ( var + var ) = nums ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) printf ( words , * ( var + var ) ) ; 
 printf ( words , * ( var + var ) ) ; 
 for ( var = nums ; var < var ; var + + ) call_func ( var , var , var ) ; 
 do 
 { printf ( words ) ; 
 scanf ( words , & var ) ; 
 scanf ( words , & var ) ; 
 if ( var = = words | | var = = words ) 
 { var = nums ; var = nums ; } 
 else if ( var = = words | | var = = words ) 
 { var = nums ; var = nums ; } 
 else var = nums ; 
 } while ( var ) ; 
 } while ( var ) ; 
 } 
 var int call_func ( var ) 
 data_type var ; 
 { var int var ; 
 if ( var = = nums ) var = nums ; 
 else if ( var = = nums ) var = nums ; 
 else var = call_func ( var - nums ) + call_func ( var - nums ) ; 
 return ( var ) ; 
 } 
 func ( ) 
 { int var , var ; 
 scanf ( words , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 printf ( words , var , call_func ( var ) ) ; 
 printf ( words ) ; 
 } 
 void func ( void ) 
 { 
 int var = var , var ; 
 int var ; 
 float var , var , var , var , var , var ; 
 float var , var , var , var ; 
 float var , var ; 
 call_func ( & var , & var , words ) ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( nums ) ; 
 var = var = var = var = nums ; 
 var = nums ; 
 while ( func ( ) = = nums ) 
 { 
 var = call_func ( nums ) + nums ; 
 if ( var = = nums ) 
 { 
 var = nums ; 
 var = nums ; 
 var = nums ; 
 var = nums . nums ; 
 var = nums ; 
 var = nums ; 
 } 
 else if ( var > nums & & var <= nums ) 
 { 
 var = nums . nums ; 
 var = nums . nums ; 
 var = - nums . nums ; 
 var = nums . nums ; 
 var = nums ; 
 var = nums . nums ; 
 } 
 else if ( var > nums & & var <= nums ) 
 { 
 var = nums . nums ; 
 var = nums . nums ; 
 var = nums . nums ; 
 var = nums . nums ; 
 var = nums ; 
 var = nums . nums ; 
 } 
 else 
 { 
 var = nums . nums ; 
 var = nums . nums ; 
 var = - nums . nums ; 
 var = nums . nums ; 
 var = nums ; 
 var = nums . nums ; 
 } 
 var = var * var * call_func ( var ) - var * call_func ( var ) * var + var ; 
 var = var * var * call_func ( var ) + var * call_func ( var ) * var + var ; 
 var = var ; 
 var = var ; 
 var = ( var + nums ) * nums / nums ; 
 var = nums - var * nums ; 
 call_func ( ( data_type ) var , ( data_type ) var , var ) ; 
 } 
 getch ( ) ; 
 getch ( ) ; 
 call_func ( ) ; 
 } 
 #define var nums . nums 
 func ( ) 
 { 
 int var [ nums ] , var [ nums ] , var , var , var , var ; 
 double var ; 
 int var = var , var ; 
 call_func ( & var , & var , words ) ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( nums ) ; 
 var = nums * var / var ; 
 for ( var = nums ; var < var ; var + + ) 
 { 
 var [ var ] = var * call_func ( var * var ) + nums ; 
 var [ var ] = var * call_func ( var * var ) + nums ; 
 } 
 for ( var = nums ; var < var - nums ; var + + ) 
 for ( var = var + nums ; var < var ; var + + ) 
 { 
 call_func ( var [ var ] , var [ var ] , var [ var ] , var [ var ] ) ; 
 call_func ( nums ) ; 
 } 
 getch ( ) ; 
 call_func ( ) ; 
 } 
 
 #define var nums . nums 
 func ( ) 
 { 
 int var , var , var ; 
 double var ; 
 int var = var , var ; 
 call_func ( & var , & var , words ) ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( nums ) ; 
 for ( var = nums ; var <= var ; var + = var / nums ) 
 { 
 var = nums * call_func ( nums . nums * var ) + nums ; 
 var = nums - ( ( nums * call_func ( nums * var ) ) * call_func ( var / nums . nums ) + nums ) ; 
 var = nums * call_func ( nums . nums * var ) + nums ; 
 call_func ( var , var , var , var ) ; 
 call_func ( nums ) ; 
 } 
 getch ( ) ; 
 call_func ( ) ; 
 } 
 
 #define var nums . nums 
 func ( ) 
 { 
 int var , var , var , var ; 
 double var ; 
 int var = var , var ; 
 printf ( words ) ; 
 scanf ( words , & var , & var ) ; 
 call_func ( & var , & var , words ) ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( nums ) ; 
 for ( var = nums ; var <= nums * var ; var + = var / nums ) 
 { 
 var = var * call_func ( var ) + nums ; 
 var = var * call_func ( var ) + nums ; 
 call_func ( var , var , var ) ; 
 call_func ( nums ) ; 
 } 
 getch ( ) ; 
 call_func ( ) ; 
 } 
 
 #define var nums . nums 
 func ( ) 
 { 
 int var , var , var , var ; 
 double var ; 
 int var = var , var ; 
 call_func ( & var , & var , words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( nums ) ; 
 for ( var = nums ; var < nums * var ; var + = var / nums ) 
 { 
 var = var * call_func ( var ) + nums ; 
 var = var * call_func ( var ) + nums ; 
 var = call_func ( var - nums ) ; 
 call_func ( var , var , var ) ; 
 call_func ( nums ) ; 
 } 
 getch ( ) ; 
 call_func ( ) ; 
 } 
 
 #define var nums . nums 
 func ( ) 
 { 
 int var , var , var , var , var ; 
 double var ; 
 int var = var , var ; 
 call_func ( & var , & var , words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( nums ) ; 
 var = nums - var ; 
 for ( var = nums ; var < nums * var ; var + = var / nums ) 
 { 
 var = var * call_func ( var ) + nums ; 
 var = var * call_func ( var ) + nums ; 
 var = call_func ( ( var - nums ) * ( var - nums ) + ( var - var ) * ( var - var ) ) ; 
 call_func ( var , var , var ) ; 
 call_func ( nums ) ; 
 } 
 getch ( ) ; 
 call_func ( ) ; 
 } 
 
 func ( ) 
 { 
 int var , var , var = nums , var = nums ; 
 int var = var , var ; 
 call_func ( & var , & var , words ) ; 
 call_func ( var ) ; 
 call_func ( nums ) ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 var - = nums ; var + = nums ; 
 call_func ( nums , nums , var ) ; 
 call_func ( ) ; 
 call_func ( var , var , words ) ; 
 call_func ( nums ) ; 
 } 
 getch ( ) ; 
 call_func ( ) ; 
 } 
 int func ( void ) 
 { int var = nums , var = nums , var = nums , var ; 
 var = ( ( var = var + nums ) + + | | ( var < var + nums ) - ( + + var < var < var ) * nums ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { int var = nums , var = nums , var = nums , var ; 
 var = ( - var + var + + ) >= var - ( var < < nums ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 union { 
 int var ; 
 struct { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var ; 
 int var ; 
 } var ; 
 var var ; 
 } ; 
 int func ( void ) 
 { union struct_name struct_var ; 
 var . var = nums ; 
 var . var = nums ; 
 call_func ( var . var . var , words ) ; 
 printf ( words , var . var ) ; 
 printf ( words , var . var ) ; 
 printf ( words , var . var . var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { int var = nums , var = nums , var = nums , var ; 
 var = ( ( var < < nums ) + ( var > - - var > var : var + + ) ) & & ( var | - - var ) ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 var func ( var var , data_type var ) 
 { 
 if ( var = = nums ) 
 { return var ; 
 } 
 else 
 { return ( var % nums ) * call_func ( nums , var - nums ) + call_func ( var / nums , var - nums ) ; 
 } ; 
 } ; 
 void func ( ) 
 { 
 printf ( words , call_func ( nums , nums ) ) ; 
 } ; 
 void func ( data_type var , data_type var ) 
 { 
 int var = var ; var = var ; var = var ; 
 } 
 void func ( ) 
 { int var = nums , var = nums ; 
 call_func ( var , var ) ; 
 printf ( words , var , var ) ; 
 } 
 int func ( void ) 
 { int var = nums , var = nums , var = nums , var ; 
 int * var = & var ; 
 int * var = & var ; 
 var = ( * var = var + var ) ! = ( * var < * var ) * nums ; 
 printf ( words , var ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { int var = nums , var = nums , var = nums ; 
 int * var [ nums ] ; 
 var [ nums ] = & var ; 
 var [ nums ] = & var ; 
 var [ nums ] = & var ; 
 printf ( words , * ( var [ nums ] + + ) ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { int var = nums , var = nums , var = nums ; 
 int * var [ nums ] ; 
 var [ nums ] = & var ; 
 var [ nums ] = & var ; 
 var [ nums ] = & var ; 
 printf ( words , * ( + + var [ nums ] ) ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { int var = nums , var = nums , var = nums ; 
 int * var [ nums ] ; 
 var [ nums ] = & var ; 
 var [ nums ] = & var ; 
 var [ nums ] = & var ; 
 printf ( words , * var + + ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { int var = nums , var = nums , var = nums ; 
 int * var [ nums ] ; 
 var [ nums ] = & var ; 
 var [ nums ] = & var ; 
 var [ nums ] = & var ; 
 printf ( words , * var [ nums ] + + ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { int var = nums , var = nums , var = nums ; 
 int * var [ nums ] ; 
 var [ nums ] = & var ; 
 var [ nums ] = & var ; 
 var [ nums ] = & var ; 
 printf ( words , * * var - nums ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { int var = nums , var = nums , var = nums ; 
 int * var [ nums ] ; 
 var [ nums ] = & var ; 
 var [ nums ] = & var ; 
 var [ nums ] = & var ; 
 printf ( words , * ( * ( - - var [ nums ] ) ) + nums ) ; 
 return nums ; 
 } 
 int func ( void ) 
 { char var [ ] = words ; 
 printf ( words , ( void * ) var , var ) ; 
 return nums ; 
 } 
 
 void call_func ( var , var ) 
 data_type var , var ; 
 { 
 printf ( words , var , var ) ; 
 } 
 void call_func ( var , var , var , var ) 
 data_type var , var , var , var ; 
 { if ( var > nums ) 
 { call_func ( var - nums , var , var , var ) ; 
 call_func ( var , var ) ; 
 call_func ( var - nums , var , var , var ) ; 
 } 
 } 
 func ( ) 
 { int var ; 
 scanf ( words , & var ) ; 
 call_func ( var , nums , nums , nums ) ; 
 } 
 int call_func ( var , var , var , var , var , var , var , var , var ) 
 data_type var , var , var ; 
 double var [ ] , var [ ] , var , var , var [ ] , var [ ] ; 
 { extern double call_func ( ) ; 
 extern void call_func ( ) ; 
 double call_func ( ) ; 
 int var , var , var , var , var , var , var , var ; 
 double var , var , var , var , var , * var , * var , * var , * var , * var ; 
 var = malloc ( var * sizeof ( double ) ) ; 
 var = malloc ( var * sizeof ( double ) ) ; 
 var = malloc ( var * sizeof ( double ) ) ; 
 var = malloc ( var * sizeof ( double ) ) ; 
 var = malloc ( var * sizeof ( double ) ) ; 
 var = nums . nums ; 
 for ( var = nums ; var <= var - nums ; var + + ) 
 var [ var * var * nums ] = var [ var ] ; 
 var [ var * var * nums ] = call_func ( var , var ) ; 
 for ( var = nums ; var <= nums * var - nums ; var + + ) 
 { for ( var = nums ; var <= var - nums ; var + + ) 
 { var [ var * var * nums + var ] = var [ var ] + ( var [ var ] - var [ var ] ) * call_func ( & var ) ; 
 var [ var ] = var [ var * var * nums + var ] ; 
 } 
 var = nums ; 
 while ( var = = nums ) 
 { var = nums ; var = nums ; var = nums ; 
 while ( ( var < var ) & & ( var = = nums ) ) 
 { if ( ( var [ var ] <= var [ var ] ) & & ( var [ var ] >= var [ var ] ) ) var = var + nums ; 
 else var = nums ; 
 } 
 if ( var = = nums ) 
 { call_func ( var , var , var , var , var , var ) ; 
 var = nums ; 
 while ( ( var < var ) & & ( var = = nums ) ) 
 { if ( ( var [ var ] <= var [ var ] ) & & ( var [ var ] >= var [ var ] ) ) var = var + nums ; 
 else var = nums ; 
 } 
 } 
 if ( var ! = nums ) 
 { for ( var = nums ; var <= var - nums ; var + + ) 
 { var = nums . nums ; 
 for ( var = nums ; var <= var - nums ; var + + ) 
 var + = var [ var * var * nums + var ] / ( nums . nums * var ) ; 
 var [ var * var * nums + var ] = ( var [ var * var * nums + var ] + var ) / nums . nums ; 
 var [ var ] = var [ var * var * nums + var ] ; 
 } 
 var = nums ; 
 } 
 else var [ var * var * nums + var ] = call_func ( var , var ) ; 
 } 
 } 
 var = nums ; var = nums ; 
 while ( var = = nums ) 
 { var = nums ; 
 var = var [ var * var * nums ] ; var = nums ; 
 for ( var = nums ; var <= nums * var - nums ; var + + ) 
 if ( var [ var * var * nums + var ] > var ) 
 { var = var ; var = var [ var * var * nums + var ] ; } 
 var = nums ; var = nums ; var = var [ var * var * nums ] ; 
 if ( var = = nums ) 
 { var = nums ; var = nums ; var = var [ var * var * nums + nums ] ; } 
 for ( var = var + nums ; var <= nums * var - nums ; var + + ) 
 if ( var ! = var ) 
 if ( var [ var * var * nums + var ] > var ) 
 { var = var ; var = var [ var * var * nums + var ] ; } 
 for ( var = nums ; var <= var - nums ; var + + ) 
 { var [ var ] = nums . nums ; 
 for ( var = nums ; var <= nums * var - nums ; var + + ) 
 if ( var ! = var ) 
 var [ var ] = var [ var ] + var [ var * var * nums + var ] / ( nums . nums * var - nums . nums ) ; 
 var [ var ] = ( nums . nums + var ) * var [ var ] - var * var [ var * var * nums + var ] ; 
 } 
 var = nums ; 
 while ( var = = nums ) 
 { var = nums ; 
 var = call_func ( var , var ) ; 
 while ( var > var ) 
 { for ( var = nums ; var <= var - nums ; var + + ) 
 var [ var ] = ( var [ var ] + var [ var ] ) / nums . nums ; 
 var = call_func ( var , var ) ; 
 } 
 var = nums ; 
 for ( var = nums ; var <= var - nums ; var + + ) 
 { if ( var [ var ] > var [ var ] ) 
 { var [ var ] = var [ var ] + nums . nums ; var = nums ; } 
 if ( var [ var ] < var [ var ] ) 
 { var [ var ] = var [ var ] - nums . nums ; var = nums ; } 
 } 
 if ( var ! = nums ) var = nums ; 
 else 
 { call_func ( var , var , var , var , var , var ) ; 
 var = nums ; var = nums ; 
 while ( ( var = = nums ) & & ( var < var ) ) 
 { if ( ( var [ var ] <= var [ var ] ) & & ( var [ var ] >= var [ var ] ) ) var = var + nums ; 
 else var = nums ; 
 } 
 if ( var < var ) 
 { for ( var = nums ; var <= var - nums ; var + + ) 
 var [ var ] = ( var [ var ] + var [ var ] ) / nums . nums ; 
 var = nums ; 
 } 
 } 
 } 
 for ( var = nums ; var <= var - nums ; var + + ) 
 var [ var * var * nums + var ] = var [ var ] ; 
 var [ var * var * nums + var ] = var ; 
 var = nums . nums ; var = nums . nums ; 
 for ( var = nums ; var <= nums * var - nums ; var + + ) 
 { var = var [ var * var * nums + var ] ; 
 var = var + var / ( nums . nums * var ) ; 
 var = var + var * var ; 
 } 
 var = ( var - nums . nums * var * var * var ) / ( nums . nums * var - nums . nums ) ; 
 if ( var >= var ) 
 { var = var + nums ; 
 if ( var < var ) var = nums ; 
 } 
 } 
 for ( var = nums ; var <= var - nums ; var + + ) 
 { var [ var ] = nums . nums ; 
 for ( var = nums ; var <= nums * var - nums ; var + + ) 
 var [ var ] = var [ var ] + var [ var * var * nums + var ] / ( nums . nums * var ) ; 
 } 
 var = call_func ( var , var ) ; var [ var ] = var ; 
 free ( var ) ; free ( var ) ; free ( var ) ; 
 free ( var ) ; free ( var ) ; 
 return ( var ) ; 
 } 
 static double call_func ( var ) 
 data_type * var ; 
 { int var ; 
 double var , , var , var ; 
 = nums . nums ; var = nums . nums ; var = nums . nums ; 
 * var = var * ( * var ) + var ; var = * var / ; * var = * var - var * ; 
 var = * var / ; 
 return ( var ) ; 
 } 
 func ( ) 
 { int var ; 
 double var , var , var [ nums ] , var [ nums ] , var [ nums ] , var [ nums ] [ nums ] ; 
 var [ nums ] = nums . nums ; var [ nums ] = nums . nums ; 
 var [ nums ] = nums . nums ; var [ nums ] = nums . nums ; 
 var [ nums ] = nums . var + nums ; var [ nums ] = var [ nums ] ; 
 var = nums . var - nums ; var = nums . nums ; 
 var = call_func ( nums , nums , var , var , var , var , var , var , nums ) ; 
 printf ( words ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 for ( var = nums ; var <= nums ; var + + ) 
 printf ( words , 
 var [ nums ] [ var ] , var [ nums ] [ var ] , var [ nums ] [ var ] ) ; 
 printf ( words ) ; 
 for ( var = nums ; var <= nums ; var + + ) 
 printf ( words , var , var [ var ] ) ; 
 printf ( words , var [ nums ] ) ; 
 printf ( words ) ; 
 } 
 double call_func ( var , var ) 
 data_type var ; 
 double var [ ] ; 
 { double var ; 
 var = - ( nums . nums - ( var [ nums ] - nums . nums ) * ( var [ nums ] - nums . nums ) ) ; 
 var = var * var [ nums ] * var [ nums ] * var [ nums ] / ( nums . nums * call_func ( nums . nums ) ) ; 
 return ( var ) ; 
 } 
 void call_func ( var , var , var , var , var , var ) 
 data_type var , var ; 
 double var [ ] , var [ ] , var [ ] , var [ ] ; 
 { var [ nums ] = nums . nums ; var [ nums ] = nums . nums ; 
 var [ nums ] = var [ nums ] / call_func ( nums . nums ) ; var [ nums ] = nums . nums ; 
 var [ nums ] = var [ nums ] ; var [ nums ] = var [ nums ] + var [ nums ] * call_func ( nums . nums ) ; 
 return ; 
 } 
 void func ( data_type var [ ] , data_type var , data_type var , data_type var , data_type var ) 
 { 
 int var , var , var ; 
 var var , var ; 
 char var [ nums ] , var , var ; 
 FILE * var ; 
 var = fopen ( words , words ) ; 
 call_func ( var ) ; 
 for ( var = nums ; var < call_func ( var ) ; var + + ) 
 { var = nums ; 
 var = var [ var + + ] - nums ; 
 var = var [ var ] - nums ; 
 var = var * nums + var ; 
 call_func ( var , var * nums , nums ) ; 
 fread ( var , nums , nums , var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { call_func ( nums , var [ var + + ] , nums ) ; 
 call_func ( var + nums , var + var , var , var + var ) ; 
 call_func ( nums , var [ var + + ] , nums ) ; 
 call_func ( var + nums , var + var , var + nums , var + var ) ; 
 call_func ( nums , var [ var + + ] , nums ) ; 
 call_func ( var + nums , var + var , var + nums , var + var ) ; 
 call_func ( nums , var [ var + + ] , nums ) ; 
 call_func ( var + nums , var + var , var + nums , var + var ) ; 
 call_func ( nums , var [ var + + ] , nums ) ; 
 call_func ( var + nums , var + var , var + nums , var + var ) ; 
 call_func ( nums , var [ var + + ] , nums ) ; 
 call_func ( var + nums , var + var , var + nums , var + var ) ; 
 } 
 var + = var ; 
 } 
 fclose ( var ) ; 
 call_func ( nums , nums , nums ) ; 
 } 
 var = var * nums + var ; 
 call_func ( var , var * nums , nums ) ; 
 fread ( var , nums , nums , var ) ; 
 for ( var = nums ; var < nums ; var + + ) 
 { call_func ( nums , var [ var + + ] , nums ) ; 
 call_func ( var + nums , var + var , var , var + var ) ; 
 call_func ( nums , var [ var + + ] , nums ) ; 
 call_func ( var + nums , var + var , var + nums , var + var ) ; 
 } 
 var + = var ; 
 } 
 fclose ( var ) ; 
 call_func ( nums , nums , nums ) ; 
 struct { 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 char var [ nums ] ; 
 } ; 
 int func ( void ) 
 { char var [ nums ] , * var = words , * var ; 
 struct struct_name struct_var ; 
 int var , var = nums , call_func ( ) ; 
 int var ; 
 FILE * var ; 
 while ( var = = nums ) 
 { 
 call_func ( ) ; 
 printf ( words ) ; 
 scanf ( words , var ) ; 
 var = fopen ( words , words ) ; 
 fread ( & var , sizeof ( struct ) + nums , nums , var ) ; 
 while ( ! feof ( var ) & & func ( var . var , var ) = = nums ) 
 { fread ( & var , sizeof ( struct ) + nums , nums , var ) ; 
 } 
 if ( ! feof ( var ) ) 
 { printf ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) call_func ( var . var [ var ] ) ; printf ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) call_func ( var . var [ var ] ) ; printf ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) call_func ( var . var [ var ] ) ; printf ( words ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < nums ; var + + ) call_func ( var . var [ var ] ) ; printf ( words ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 if ( var = = nums ) var = nums ; 
 else { printf ( words ) ; getch ( ) ; } 
 } 
 else { printf ( words ) ; getch ( ) ; } 
 fclose ( var ) ; 
 } 
 system ( words ) ; 
 var = call_func ( var , var ) ; 
 system ( var ) ; 
 var = call_func ( words , var ) ; 
 system ( var ) ; 
 system ( words ) ; 
 system ( words ) ; 
 system ( words ) ; 
 system ( words ) ; 
 system ( words ) ; 
 system ( words ) ; 
 system ( words ) ; 
 system ( words ) ; 
 system ( words ) ; 
 system ( words ) ; 
 system ( words ) ; 
 system ( words ) ; 
 system ( words ) ; 
 system ( words ) ; 
 system ( words ) ; 
 system ( words ) ; 
 system ( words ) ; 
 return nums ; 
 } 
 int func ( data_type * var , data_type * var ) 
 { int var , var = nums ; 
 for ( var = nums ; var < nums ; var + + ) 
 if ( var [ var ] ! = var [ var ] ) var = nums ; 
 return var ; 
 } 
 
 #define var 
 #define var nums 
 int func ( void ) 
 { 
 int var ; 
 int var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var + = nums * var * var + nums ; 
 var var 
 printf ( words , var , var ) ; 
 #endif 
 } 
 printf ( words , var ) ; 
 return nums ; 
 } 
 void func ( void ) 
 { 
 int var = var , var = var ; 
 call_func ( var ) ; 
 call_func ( & var , & var , words ) ; 
 } 
 char * call_func ( data_type , data_type * ) ; 
 int call_func ( data_type var , data_type var ) ; 
 int func ( void ) 
 { 
 char var [ nums * sizeof ( int ) + nums ] ; 
 int var ; 
 while ( scanf ( words , & var ) = = nums ) 
 { 
 printf ( words , var , call_func ( var , var ) ) ; 
 printf ( words , call_func ( call_func ( var , nums ) , var ) ) ; 
 } 
 return nums ; 
 } 
 char * func ( data_type var , data_type * var ) 
 { 
 int var ; 
 static int var = nums * sizeof ( int ) ; 
 for ( var = var - nums ; var >= nums ; var - - , var > >= nums ) 
 var [ var ] = ( nums & var ) + words ; 
 var [ var ] = words ; 
 return var ; 
 } 
 int func ( data_type var , data_type var ) 
 { 
 int var = nums , var = nums ; 
 while ( var - - > nums ) 
 { 
 var | = var ; 
 var < <= nums ; 
 } 
 return var ; 
 } 
 extern call_func ( ) ; 
 extern call_func ( ) ; 
 extern call_func ( ) ; 
 extern call_func ( ) ; 
 extern call_func ( ) ; 
 extern call_func ( ) ; 
 extern call_func ( ) ; 
 extern call_func ( ) ; 
 extern call_func ( ) ; 
 extern call_func ( ) ; 
 extern call_func ( ) ; 
 extern call_func ( ) ; 
 extern call_func ( var , var , var , var ) 
 data_type var , var , var , var ; 
 { 
 call_func ( nums ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( nums ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var - nums , var - nums , var - nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var - nums ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var + nums , var + nums , var - nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var + nums ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var - nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var + nums , var + nums , nums ) ; 
 } 
 extern call_func ( var , var , var , var ) 
 data_type var , var , var , var ; 
 { 
 call_func ( nums ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( nums ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var - nums , var - nums , var - nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var - nums ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var + nums , var + nums , var - nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var + nums ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var - nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var + nums , var + nums , nums ) ; 
 } 
 extern call_func ( var , var , var , var , var ) 
 data_type var , var , var , var , var ; 
 { 
 call_func ( nums ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( nums ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var - nums , var - nums , var - nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var - nums ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var + nums , var + nums , var - nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var ) ; 
 call_func ( var + nums , var + nums , var - nums , var - nums ) ; 
 call_func ( nums , var ) ; 
 call_func ( var + nums , var + nums , var ) ; 
 } 
 extern call_func ( var , var , var , var , var ) 
 data_type var , var , var , var , var ; 
 { 
 call_func ( nums ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( nums ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var - nums , var - nums , var - nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var - nums ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var + nums , var + nums , var - nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var ) ; 
 call_func ( var + nums , var + nums , var - nums , var - nums ) ; 
 call_func ( nums , var ) ; 
 call_func ( var + nums , var + nums , var ) ; 
 } 
 extern call_func ( var , var , var , var , var ) 
 data_type var , var , var , var , var ; 
 { 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( nums ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var - nums , var - nums , var - nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var - nums ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var + nums , var + nums , var - nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var ) ; 
 call_func ( var + nums , var + nums , var - nums , var - nums ) ; 
 call_func ( nums , var ) ; 
 call_func ( var + nums , var + nums , var ) ; 
 } 
 extern call_func ( var , var , var , var , var ) 
 data_type var , var , var , var , var ; 
 { 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( nums ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var + nums , var + nums , var - nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var ) ; 
 call_func ( var + nums , var + nums , var - nums , var - nums ) ; 
 call_func ( nums , var ) ; 
 call_func ( var + nums , var + nums , var ) ; 
 } 
 extern call_func ( var , var , var , var , var ) 
 data_type var , var , var , var ; 
 char var [ nums ] ; 
 { 
 call_func ( var , var , var , var , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var ) ; 
 call_func ( var , var + nums , var + nums , nums , nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var - nums , nums ) ; 
 call_func ( var + nums , var - nums , var - nums , var - nums , nums ) ; 
 } 
 extern call_func ( var , var , var , var , var ) 
 data_type var , var , var , var ; 
 char var [ nums ] ; 
 { 
 call_func ( var , var , var , var , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var ) ; 
 call_func ( var , var + nums , var + nums , nums , nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var - nums , nums ) ; 
 call_func ( var + nums , var - nums , var - nums , var - nums , nums ) ; 
 } 
 extern call_func ( var , var , var , var , var ) 
 data_type var , var , var , var ; 
 char var [ nums ] ; 
 { 
 int var ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 var = call_func ( var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var , var , var + nums , var ) ; 
 call_func ( var , var , var , var + nums ) ; 
 call_func ( var , var , var - nums , var ) ; 
 call_func ( var , var - nums , var , var ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var - nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var + nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var + nums , var + nums , var + nums , var + nums ) ; 
 call_func ( var + nums , var + nums , var + nums , var + nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var + nums , nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var + nums , nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var + nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( var + nums , var + nums , var + nums , var + nums ) ; 
 call_func ( var + nums , var + nums , var + nums , var + nums ) ; 
 call_func ( nums ) ; 
 call_func ( var + nums , var + nums , var + nums , var + nums ) ; 
 call_func ( var + nums , var + nums , var + nums , var + nums ) ; 
 call_func ( var + nums , var + nums , var + nums , var + nums ) ; 
 call_func ( var + nums , var + nums , var + nums , var + nums ) ; 
 call_func ( nums ) ; 
 call_func ( var , ( var + var - nums ) / nums - var * nums / nums , var + nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( var - nums , var , var - nums , var + nums ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var + nums , var + nums , var - nums , var - nums ) ; 
 call_func ( var + nums , var + nums , var + nums , var + nums ) ; 
 call_func ( var + nums , var + nums , var + nums , var + nums ) ; 
 call_func ( var + nums , var , var + nums , var + nums ) ; 
 call_func ( var - nums , var , var - nums , var + nums ) ; 
 call_func ( var , var + nums , var , var + nums ) ; 
 call_func ( var , var - nums , var + nums , var - nums ) ; 
 call_func ( var , var - nums , var - nums , var - nums ) ; 
 call_func ( var + nums , var , var + nums , var - nums ) ; 
 call_func ( var - nums , var , var - nums , var - nums ) ; 
 call_func ( var + nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var + nums ) ; 
 call_func ( nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var + nums ) ; 
 call_func ( nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var - nums , var + nums , var - nums , var + nums ) ; 
 call_func ( var - nums , var + nums , nums ) ; 
 call_func ( var - nums , var + nums , nums ) ; 
 call_func ( var - nums , var + nums , nums ) ; 
 call_func ( var - nums , var + nums , nums ) ; 
 call_func ( nums ) ; 
 } 
 extern func ( data_type var , data_type var , data_type var [ ] , data_type var , data_type var ) 
 { int var ; 
 var = call_func ( var ) ; 
 call_func ( var , var , var + var * nums + nums , var + nums , var ) ; 
 call_func ( var ) ; 
 call_func ( var + nums , var + nums , var ) ; 
 } 
 extern func ( data_type var , data_type var , data_type var [ ] , data_type var , data_type var ) 
 { int var ; 
 var = call_func ( var ) ; 
 call_func ( var , var , var + var * nums + nums , var + nums , var ) ; 
 call_func ( var ) ; 
 call_func ( var , var + nums , var + nums , var , nums ) ; 
 } 
 extern func ( data_type var , data_type var , data_type var [ ] , data_type var , data_type var ) 
 { int var ; 
 var = call_func ( var ) ; 
 call_func ( var , var , var + var * nums + nums , var + nums , var ) ; 
 call_func ( var ) ; 
 call_func ( var , var + nums , var + nums , var , nums ) ; 
 } 
 
 #define var nums 
 int func ( void ) 
 { static int var [ var + nums ] , var [ var + nums ] ; 
 int var , var , , var , var ; 
 scanf ( words , & , & var ) ; 
 for ( var = nums ; var <= var ; var + + ) var [ var ] = var ; 
 var = - nums ; var = nums ; var = nums ; 
 while ( var < var ) 
 { var + + ; 
 var : 
 if ( var > var ) var - = var ; 
 if ( var [ var ] = = nums ) { var + + ; goto var ; } 
 var + + ; 
 if ( var % var = = nums ) { var + + ; var [ var ] = var [ var ] ; var [ var ] = nums ; var = nums ; } 
 } 
 for ( var = nums ; var <= var ; var + + ) printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 } 
 int func ( void ) 
 { int var [ nums ] , var , var , var , var = nums ; 
 for ( var = nums ; var <= nums ; var + + ) 
 var [ var ] = var ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { 
 printf ( words , var [ nums ] ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 var [ var - nums ] = var [ var ] ; 
 var - - ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 for ( var = nums ; var <= var ; var + + ) 
 var [ var - nums ] = var [ var ] ; 
 var [ var ] = var [ nums ] ; 
 } 
 } 
 printf ( words ) ; 
 } 
 float call_func ( var , var , var , var ) 
 data_type var [ ] , var [ ] ; 
 int var ; 
 float var ; 
 { 
 int var , var ; 
 float var , var ; 
 var = nums . nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 { 
 var = nums . nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 if ( var ! = var ) var * = ( var - var [ var ] ) / ( var [ var ] - var [ var ] ) ; 
 var + = var * var [ var ] ; 
 } 
 return ( var ) ; 
 } 
 #define var nums 
 #define var nums 
 #define var nums 
 float call_func ( var , var , var , var , var , var ) 
 data_type var , var ; 
 float var [ ] [ var ] , var [ ] , var [ ] ; 
 int var [ ] ; 
 { float var [ var ] , var [ var ] , , var , var [ var ] ; 
 int var , var , var , var , var ; 
 var = nums ; 
 while ( var = = nums ) 
 { 
 for ( var = nums ; var <= var ; var + + ) 
 { printf ( words , var [ var ] , var [ var [ var ] ] , var [ var ] ) ; 
 for ( var = nums ; var <= var ; var + + ) printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 var [ nums ] = var ; 
 for ( var = nums ; var <= var ; var + + ) 
 { = nums ; 
 for ( var = nums ; var <= var ; var + + ) = + var [ var ] [ var ] * var [ var [ var ] ] ; 
 var [ var ] = var [ var ] - ; 
 if ( var [ var ] < var [ nums ] ) { var = var ; var [ nums ] = var [ var ] ; } 
 } 
 printf ( words ) ; 
 for ( var = nums ; var <= var ; var + + ) printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 if ( var [ nums ] = = nums ) var = nums ; 
 else 
 { var [ nums ] = var ; 
 for ( var = nums ; var <= var ; var + + ) 
 if ( var [ var ] [ var ] > nums ) 
 { var [ var ] = var [ var ] / var [ var ] [ var ] ; 
 if ( var [ var ] < var [ nums ] ) { var = var ; var [ nums ] = var [ var ] ; } 
 } 
 if ( var [ nums ] ! = var ) 
 { var [ var ] = var ; 
 printf ( words , var , var ) ; 
 var [ var ] = var [ var ] / var [ var ] [ var ] ; 
 var = var [ var ] [ var ] ; 
 for ( var = nums ; var <= var ; var + + ) var [ var ] [ var ] = var [ var ] [ var ] / var ; 
 for ( var = nums ; var <= var ; var + + ) 
 if ( var ! = var ) 
 { var [ var ] = var [ var ] - var [ var ] * var [ var ] [ var ] ; 
 for ( var = nums ; var <= var ; var + + ) var [ var ] [ var ] = var [ var ] [ var ] - var [ var ] [ var ] * var [ var ] [ var ] ; 
 } 
 } 
 else 
 { printf ( words ) ; 
 return ( nums ) ; 
 } 
 } 
 } 
 = nums ; 
 for ( var = nums ; var <= var ; var + + ) = + var [ var [ var ] ] * var [ var ] ; 
 return ( ) ; 
 } 
 func ( ) 
 { static float var [ var ] = { nums , nums , nums . nums , nums . nums , nums . nums , nums . nums , var , var , var } ; 
 static float var [ var ] [ var ] = { { nums } , { nums , nums , nums , nums , nums , nums , nums , nums , nums } , 
 { nums , nums , nums , nums , nums , nums , nums , nums , nums } , 
 { nums , nums , nums , nums , nums , nums , nums , nums , nums } } ; 
 static float var [ var ] = { nums , nums , nums , nums } ; 
 static int var [ var ] = { nums , nums , nums , nums } ; 
 int var ; 
 float var ; 
 var = call_func ( var , var , var , var - nums , var - nums , var ) ; 
 printf ( words , var ) ; 
 for ( var = nums ; var < var ; var + + ) printf ( words , var [ var ] , var [ var ] ) ; 
 printf ( words ) ; 
 } 
 func ( data_type var , data_type var , data_type var ) 
 { int var ; 
 call_func ( var , var , var + nums , var ) ; 
 call_func ( var , var , var + nums , var ) ; 
 var = ( var - var ) / nums - nums ; 
 call_func ( var , var , var , var + var ) ; 
 call_func ( var , var + var , var - nums , ( var - var ) / nums + var ) ; 
 call_func ( var , var , var , var - var ) ; 
 call_func ( var , var - var , var - nums , ( var - var ) / nums + var ) ; 
 } 
 func ( data_type var , data_type var ) 
 { 
 call_func ( var , var , words ) ; 
 } 
 func ( ) 
 { call_func ( nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums , nums ) ; 
 } 
 func ( ) 
 { call_func ( ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , nums , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums , nums ) ; 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums , nums ) ; 
 call_func ( nums , nums , nums , nums ) ; 
 } 
 func ( ) 
 { 
 call_func ( words , nums , nums , nums , nums ) ; 
 call_func ( nums ) ; 
 call_func ( nums , nums , words ) ; } 
 func ( data_type var , data_type var , data_type var , data_type var ) 
 { 
 call_func ( var , var , var + nums , var ) ; 
 call_func ( var , var , var + nums , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var , var ) ; 
 call_func ( var , var , var - nums , var ) ; 
 call_func ( var , var , var - nums , var ) ; 
 } 
 #define var nums 
 int func ( void ) 
 { 
 float var [ var ] , var [ var ] , var , var ; 
 int var ; 
 printf ( words ) ; 
 for ( var = nums ; var <= var ; var + + ) 
 scanf ( words , & var [ var ] , & var [ var ] ) ; 
 printf ( words ) ; 
 scanf ( words , & var ) ; 
 var = call_func ( var , var , var , var ) ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 
 int func ( void ) 
 { int var , var , var , var , var , var , var , var ; 
 static int var [ nums ] ; 
 scanf ( words , & var , & var ) ; 
 var = nums ; var = nums ; var [ nums ] = nums ; var = nums ; 
 for ( var = nums ; var <= var ; var + + ) 
 { while ( var ! = nums | | var <= var ) 
 { var + + ; 
 var = var [ var ] * var + var ; 
 var = var / nums ; 
 var [ var ] = var - nums * var ; 
 } 
 var = var ; var = nums ; 
 } 
 printf ( words , var , var ) ; 
 for ( var = var ; var >= nums ; var - - ) 
 printf ( words , var [ var ] ) ; 
 call_func ( words ) ; 
 } 
 
 int call_func ( var , var ) 
 data_type var [ ] ; 
 int var ; 
 { 
 int var , var = nums ; 
 for ( var = nums ; var < var ; var + + ) var = var * nums + ( var [ var ] - words ) ; 
 return ( var ) ; 
 } 
 int call_func ( var , var , var ) 
 data_type var [ ] ; 
 int var , var ; 
 { 
 int var , var = nums ; 
 for ( var = nums ; var < var ; var + + ) 
 if ( var [ var ] - words > nums & & var [ var ] - words < nums ) var = var * var + ( var [ var ] - words - nums ) ; 
 else if ( var [ var ] - words > nums ) var = var * var + ( var [ var ] - words - nums ) ; 
 else var = var * var + ( var [ var ] - words ) ; 
 return ( var ) ; 
 } 
 void call_func ( var , var ) 
 data_type var ; 
 { 
 int var ; 
 var = var % var ; 
 if ( var >= var ) call_func ( var / var , var ) ; 
 if ( var > nums ) call_func ( words + var + nums ) ; 
 else call_func ( words + var ) ; 
 } 
 int call_func ( var , var ) 
 data_type var [ ] ; 
 int var ; 
 { 
 int var , var , var ; 
 char * var , * var ; 
 var = call_func ( var , words ) ; 
 if ( var = = NULL ) return nums ; 
 else var = var - var ; 
 if ( var = = nums ) return nums ; 
 for ( var = nums ; var < var ; var + + ) if ( ! call_func ( var [ var ] ) ) return nums ; 
 var = call_func ( var , words ) ; 
 if ( var = = NULL ) return nums ; 
 else var = ( var + var ) - var ; 
 for ( var = var - var + nums ; var < var ; var + + ) if ( ! call_func ( var [ var ] ) ) return nums ; 
 for ( var = var + nums ; var < var - var ; var + + ) if ( ! call_func ( var [ var ] ) ) return nums ; 
 return nums ; 
 } 
 int func ( void ) 
 { 
 int var , var , var , var ; 
 char var [ nums ] , * var , * var ; 
 gets ( var ) ; 
 var = call_func ( var ) ; 
 var = call_func ( var , words ) ; 
 var = call_func ( var , words ) ; 
 if ( func ( var , var , var , var ) ) 
 { 
 var = call_func ( var , var - var ) ; 
 printf ( words , var ) ; 
 var = call_func ( var + nums , ( var + var - nums ) - var ) ; 
 printf ( words , var ) ; 
 var = call_func ( var + nums , var - var - nums , var ) ; 
 printf ( words , var ) ; 
 call_func ( var , var ) ; 
 call_func ( words ) ; 
 } 
 else 
 printf ( words ) ; 
 return nums ; 
 } 
 
 #define func ( var ) var * var 
 #define call_func ( var ) printf ( words , var ) 
 data_type call_func ( void ) 
 { 
 int var = nums ; 
 int var ; 
 var = call_func ( var ) ; 
 call_func ( var ) ; 
 var = call_func ( nums ) ; 
 call_func ( var ) ; 
 call_func ( call_func ( var + nums ) ) ; 
 call_func ( nums / call_func ( nums ) ) ; 
 call_func ( call_func ( + + var ) ) ; 
 return nums ; 
 } 
 void call_func ( var , var ) 
 data_type var , var ; 
 { 
 union struct_name struct_var ; 
 var . var . var = nums ; 
 var . var . var = var ; 
 var . var . var = var ; 
 var . var . var = nums ; 
 call_func ( nums , & var , & var ) ; 
 } 
 void call_func ( var , var , var , var , var ) 
 data_type var , var , var , var ; 
 var int * var ; 
 { 
 union struct_name struct_var ; 
 var int var , var ; 
 for ( var = var ; var < var ; var + + ) 
 for ( var = var ; var < var ; var + + ) 
 { call_func ( var , var ) ; 
 var . var . var = nums ; 
 var . var . var = nums ; 
 * var + + = call_func ( nums , & var , & var ) ; 
 call_func ( words ) ; 
 } 
 } 
 void call_func ( var , var , var , var , var ) 
 data_type var , var , var , var ; 
 var char * var ; 
 { 
 union struct_name struct_var ; 
 var int var , var ; 
 for ( var = var ; var < var ; var + + ) 
 { call_func ( var , var ) ; 
 var . var . var = nums ; 
 var . var . var = nums ; 
 var . var . var = nums ; 
 var . var . var = * var + + ; 
 var . var . var = * var + + ; 
 call_func ( nums , & var , & var ) ; 
 } 
 } 
 void call_func ( var , var , var , var ) 
 data_type * var [ ] ; 
 int var , var , var ; 
 { 
 var int var ; 
 for ( var = nums ; var < var ; var + + , var + + ) 
 { call_func ( var , var ) ; 
 printf ( var [ var ] ) ; 
 } 
 } 
 void call_func ( var , var , var , var ) 
 data_type var , var , var , var ; 
 { 
 var int var ; 
 for ( var = var + nums ; var < var ; var + + ) 
 { call_func ( var , var ) ; 
 call_func ( nums ) ; 
 call_func ( var , var ) ; 
 call_func ( nums ) ; 
 } 
 for ( var = var + nums ; var < var ; var + + ) 
 { call_func ( var , var ) ; 
 call_func ( nums ) ; 
 call_func ( var , var ) ; 
 call_func ( nums ) ; 
 } 
 call_func ( var , var ) ; call_func ( nums ) ; 
 call_func ( var , var ) ; call_func ( nums ) ; 
 call_func ( var , var ) ; call_func ( nums ) ; 
 call_func ( var , var ) ; call_func ( nums ) ; 
 } 
 int call_func ( var , var , var , var , var , var ) 
 data_type * var [ ] ; 
 char * var ; 
 int var ; 
 int var , var ; 
 int var ; 
 
 #define NULL nums 
 #define var sizeof ( struct ) 
 struct { var int var ; 
 int var ; 
 struct struct_name * struct_var ; } ; 
 int var ; 
 struct struct_name * struct_var ( ) 
 { struct struct_name * struct_var , * var , * var ; 
 var = nums ; 
 var = NULL ; 
 var = var = ( struct ) malloc ( var ) ; 
 scanf ( words , & var - > var , & var - > var ) ; 
 while ( var - > var ! = nums ) 
 { var = var + nums ; 
 if ( var = = nums ) var = var ; 
 else var - > var = var ; 
 var = var ; 
 var = ( struct ) malloc ( var ) ; 
 scanf ( words , & var - > var , & var - > var ) ; 
 } 
 var - > var = NULL ; 
 return ( var ) ; 
 } 
 void call_func ( var ) 
 struct struct_name * var ; 
 { struct struct_name * struct_var ; 
 int var = nums ; 
 printf ( words ) ; 
 var = var ; 
 if ( var ! = NULL ) 
 do { var = var + nums ; 
 printf ( words , var , var - > var , var - > var ) ; 
 var = var - > var ; 
 } while ( var ! = NULL ) ; 
 } 
 struct struct_name * struct_var ( var , var ) 
 struct struct_name * struct_var ; 
 var int var ; 
 { struct struct_name * struct_var , * var ; 
 if ( var = = NULL ) { printf ( words ) ; return ( var ) ; } 
 var = var ; 
 while ( var ! = var - > var & & var - > var ! = NULL ) { var = var ; var = var - > var ; } 
 if ( var = = var - > var ) 
 { if ( var = = var ) var = var - > var ; 
 else var - > var = var - > var ; 
 printf ( words , var - > var , var - > var ) ; 
 var = var - nums ; 
 } 
 else printf ( words , var ) ; 
 return ( var ) ; 
 } 
 struct struct_name * struct_var ( var , var ) 
 struct struct_name * struct_var , * var ; 
 { struct struct_name * struct_var , * var ; 
 var = var = var ; 
 if ( var = = NULL ) { var = var ; var = var + nums ; var - > var = NULL ; return ( var ) ; } 
 while ( var - > var <= var - > var & & var - > var ! = NULL ) { var = var ; var = var - > var ; } 
 if ( var - > var = = NULL ) { var - > var = var ; var - > var = NULL ; } 
 else if ( var ! = var ) { var - > var = var ; var - > var = var ; } 
 else { var = var ; var - > var = var ; } 
 var = var + nums ; 
 return ( var ) ; 
 } 
 struct struct_name * struct_var ( var , var ) 
 struct struct_name * struct_var , * var ; 
 { struct struct_name * struct_var , * var , * var , * var ; 
 var = var ; var = var ; 
 if ( var - > var < var - > var ) 
 { var = var ; var = var - > var ; } 
 else 
 { var = var ; var = var - > var ; } 
 var = var ; 
 while ( var ! = NULL & & var ! = NULL ) 
 { if ( var - > var < var - > var ) 
 { var - > var = var ; var = var - > var ; } 
 else 
 { var - > var = var ; var = var - > var ; } 
 var = var - > var ; 
 } 
 var - > var = ( var = = NULL ) var : var ; 
 return ( var ) ; 
 } 
 func ( ) 
 { struct struct_name * struct_var ( ) , * call_func ( ) ; 
 void call_func ( ) ; 
 struct struct_name * struct_var , * var , * var ; 
 var = call_func ( ) ; 
 call_func ( var ) ; 
 var = call_func ( ) ; 
 call_func ( var ) ; 
 var = call_func ( var , var ) ; 
 call_func ( var ) ; 
 } 
 #define var nums 
 func ( ) 
 { static int var [ var + nums ] [ var + nums ] ; 
 int var , var , var ; 
 var = nums ; var = ( var + nums ) / nums ; 
 for ( var = nums ; var <= var * var ; var + + ) 
 { var [ var ] [ var ] = var ; var - - ; var + + ; 
 if ( var = = nums & & var = = var + nums ) { var + = nums ; var - - ; } 
 else if ( var = = nums ) var = var ; 
 else if ( var = = var + nums ) var = nums ; 
 if ( var [ var ] [ var ] ! = nums ) { var + = nums ; var - - ; } 
 } 
 for ( var = nums ; var <= var ; var + + ) 
 { for ( var = nums ; var <= var ; var + + ) 
 printf ( words , var [ var ] [ var ] ) ; 
 printf ( words ) ; 
 } 
 } 
 int func ( void ) 
 { double call_func ( ) , call_func ( ) , call_func ( ) , call_func ( ) , call_func ( ) ; 
 double var , var , var , var ; 
 var = nums . nums ; 
 var = nums . nums ; 
 var = call_func ( nums . nums , nums . nums , var , var ) ; 
 var = call_func ( var ) ; 
 printf ( words , var , var ) ; 
 return ( nums ) ; 
 } 
 double func ( data_type var ) 
 { double var ; 
 var = ( ( ( var - nums ) * var - nums ) * var - nums ) * var + nums ; 
 return ( var ) ; 
 } 
 double func ( data_type var ) 
 { double var ; 
 var = nums * ( ( ( var - nums ) * var - nums ) * var - nums ) ; 
 return ( var ) ; 
 } 
 double func ( data_type var ) 
 { double var ; 
 var = nums * ( ( var - nums ) * var - nums ) ; 
 return ( var ) ; 
 } 
 
 double call_func ( var , var , var , var ) 
 data_type var , var ; 
 double ( * var ) ( ) , ( * var ) ( ) ; 
 { double var ; 
 int var = nums ; 
 do 
 { printf ( words , var , var ) ; 
 var = var ; 
 var = var - ( ( * var ) ( var ) / ( * var ) ( var ) ) ; 
 var = var + nums ; 
 } 
 while ( call_func ( var - var ) > var ) ; 
 return ( var ) ; 
 } 
 double call_func ( var , var , var , var ) 
 data_type var , var , var ; 
 double ( * var ) ( ) ; 
 { double var , var , var ; 
 var = call_func ( var ) ; 
 do 
 { var = ( var + var ) / nums . nums ; 
 var = call_func ( var ) ; 
 if ( var * var > nums ) var = var ; 
 else var = var ; 
 } 
 while ( call_func ( var - var ) > var ) ; 
 var = ( var + var ) / nums . nums ; 
 return ( var ) ; 
 } 
 
 int var [ nums ] = { nums , nums } ; 
 int var [ nums ] = { nums , nums } ; 
 int func ( void ) 
 { 
 int * var , * var , * var ; 
 var = var = var ; 
 var = var ; 
 printf ( words , * var + + , * + + var , ( * var ) + + ) ; 
 printf ( words , * var , * var , * var ) ; 
 return nums ; 
 } 
 #define var nums 
 func ( ) 
 { int var [ var ] = { nums , nums , nums , nums , nums , nums } ; 
 int var , var , var ; 
 for ( var = nums ; var <= var ; var + + ) 
 scanf ( words , & var [ var ] ) ; 
 printf ( words ) ; 
 for ( var = nums ; var < var - var ; var + + ) 
 if ( var [ var ] > var [ var + nums ] ) 
 { var = var [ var ] ; 
 var [ var ] = var [ var + nums ] ; 
 var [ var + nums ] = var ; } ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 } 
 int func ( void ) 
 { 
 static char * var = words var var var ! words 
 static char * var ; 
 var = var ; 
 printf ( words , var ) ; 
 printf ( words , var , & var , var ) ; 
 printf ( words , var , & var , var ) ; 
 return nums ; 
 } 
 func ( ) 
 { int var , var ; 
 var = nums ; var = nums ; 
 printf ( words , var , var ) ; } 
 #define var nums 
 func ( ) 
 { int var , var , var [ var ] ; 
 var [ nums ] = nums ; 
 printf ( words , var [ nums ] ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { var [ var ] = nums ; 
 for ( var = var - nums ; var > nums ; var - - ) 
 var [ var ] = var [ var ] + var [ var - nums ] ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var [ var ] ) ; 
 printf ( words ) ; 
 } 
 } 
 
 #define var nums . nums 
 void call_func ( ) ; 
 void call_func ( ) ; 
 func ( ) 
 { 
 int var , var , var , var , var , var , var = nums , var = nums ; 
 int var = var , var ; 
 var = nums ; var = nums ; var = nums ; 
 call_func ( & var , & var , words ) ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( nums ) ; 
 var = var / nums ; 
 for ( var = nums ; var <= nums ; var + + ) 
 { for ( var = nums ; var <= nums ; var + + ) 
 { call_func ( var , var , var , var , var ) ; 
 var = - var ; 
 var + = var ; 
 } 
 var = nums ; var - = var ; var = - var ; 
 } 
 getch ( ) ; 
 call_func ( ) ; 
 } 
 void call_func ( var , var , var , var , var ) 
 data_type var , var , var , var ; 
 float var ; 
 { 
 int var , var , var , var , var ; 
 float var , var ; 
 if ( var < nums ) return ; 
 var = nums * var / var ; 
 var = var * var / nums ; 
 var = var + var * call_func ( var ) ; 
 var = var + var * call_func ( var ) ; 
 call_func ( var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { var + = var ; 
 var = var + var * call_func ( var ) ; 
 var = var + var * call_func ( var ) ; 
 call_func ( var , var ) ; 
 } 
 call_func ( var , var ) ; 
 } 
 void call_func ( var , var , var , var , var ) 
 data_type var , var , var , var , var ; 
 { 
 int var , var , var , var ; 
 float var , var , var = nums . nums ; 
 var = call_func ( var * var / nums ) ; 
 var = nums . nums / ( call_func ( var ) + call_func ( var ) ) ; 
 var = var / call_func ( nums ) ; 
 var = var + nums . nums * var ; 
 var = var + nums . nums * var ; 
 for ( var = nums ; var <= var ; var + + ) 
 { call_func ( var , var , var , nums , var ) ; 
 var * = var ; 
 var - = var ; 
 } 
 } 
 #define var nums . nums 
 void call_func ( ) ; 
 void call_func ( ) ; 
 func ( ) 
 { 
 int var , var , var , var , var , var = nums , var = nums ; 
 int var = var , var ; 
 var = nums ; var = nums ; var = nums ; 
 call_func ( & var , & var , words ) ; 
 call_func ( ) ; 
 call_func ( var ) ; 
 call_func ( nums ) ; 
 var = nums * var * call_func ( var / nums . nums ) ; 
 call_func ( var , var , var , var , - var ) ; 
 for ( var = nums ; var < nums ; var + = nums ) 
 { var = var * call_func ( var * var / nums ) + nums ; 
 var = var * call_func ( var * var / nums ) + nums ; 
 call_func ( var , var , var , var , var ) ; 
 } 
 getch ( ) ; 
 call_func ( ) ; 
 } 
 void call_func ( var , var , var , var , var ) 
 data_type var , var , var , var ; 
 float var ; 
 { 
 int var , var , var , var , var ; 
 float var , var ; 
 if ( var < nums ) return ; 
 var = nums * var / var ; 
 var = var * var / nums ; 
 var = var + var * call_func ( var ) ; 
 var = var + var * call_func ( var ) ; 
 call_func ( var , var ) ; 
 for ( var = nums ; var < var ; var + + ) 
 { var + = var ; 
 var = var + var * call_func ( var ) ; 
 var = var + var * call_func ( var ) ; 
 call_func ( var , var ) ; 
 } 
 call_func ( var , var ) ; 
 } 
 void call_func ( var , var , var , var , var ) 
 data_type var , var , var , var , var ; 
 { 
 int var , var , var , var ; 
 float var , var , var = nums ; 
 var = call_func ( var * var / nums ) ; 
 var = nums . nums / ( call_func ( var ) + call_func ( var ) ) ; 
 var = var / call_func ( nums ) ; 
 var = var ; 
 var = var ; 
 for ( var = nums ; var <= var ; var + + ) 
 { call_func ( var , var , var , nums , var ) ; 
 var * = var ; 
 var - = var ; 
 } 
 } 
 #define var nums 
 int func ( void ) 
 { 
 int var [ var ] , * var , var ; 
 float var [ var ] , * var ; 
 var = var ; 
 var = var ; 
 for ( var = nums ; var < var ; var + + ) 
 printf ( words , var , var + var , var + var ) ; 
 return nums ; 
 } 
 #define var nums 
 #define var words 
 var . words 
 #define var var * var 
 #define var printf ( words , var ) 
 #define var words 
 int func ( void ) 
 { int var = var ; 
 var ; 
 var = var ; 
 printf ( var , var ) ; 
 printf ( words , var ) ; 
 printf ( words ) ; 
 printf ( words , var , var ) ; 
 return nums ; 
 } 
 char var [ nums ] [ nums ] ; 
 int var [ nums ] ; 
 int call_func ( void ) ; 
 void call_func ( void ) ; 
 void func ( void ) 
 { int var , var , , var ; 
 for ( var = nums ; var < nums ; var + + ) 
 { for ( = nums , var = nums ; var < nums ; var + + ) { if ( var [ var ] [ var ] = = words ) + + ; } 
 if ( > nums ) 
 for ( var = nums ; var < nums ; var + + ) if ( var [ var ] [ var ] = = words ) var [ var ] + + ; 
 } 
 } 
 void func ( ) 
 { 
 int var ; 
 for ( var = nums ; var < nums ; var + + ) var [ var ] = nums ; 
 if ( func ( ) ) { 
 printf ( words ) ; 
 return ; 
 } 
 call_func ( ) ; 
 call_func ( ) ; 
 } 
 int func ( void ) 
 { 
 FILE * var ; 
 int var ; 
 if ( ( var = fopen ( words , words ) ) = = NULL ) return nums ; 
 for ( var = nums ; var < nums ; var + + ) { 
 if ( call_func ( var [ var ] , nums , var ) = = NULL ) return nums ; 
 var [ var ] [ nums ] = words ; 
 } 
 fclose ( var ) ; 
 return nums ; 
 } 
 void func ( void ) 
 { 
 FILE * var ; 
 int var ; 
 var = fopen ( words , words ) ; 
 for ( var = nums ; var < nums ; var + + ) { 
 call_func ( var , words , var [ var ] ) ; 
 printf ( words , var + nums , var [ var ] ) ; 
 } 
 fclose ( var ) ; 
 } 
 int func ( void ) 
 { 
 static int var [ nums ] = { nums , nums , nums } ; 
 int * var , * var ; 
 var = var ; 
 var = & var [ nums ] ; 
 printf ( words , var , * var , & var ) ; 
 var + + ; 
 printf ( words , var , * var , & var ) ; 
 printf ( words , var , & var , & var ) ; 
 + + var ; 
 printf ( words , var , * var , & var ) ; 
 printf ( words , var - var ) ; 
 } 
 void call_func ( var , var , var , var , var ) 
 data_type var , var ; 
 double var [ ] , var , var [ ] ; 
 { int * , * var , var , var , var ; 
 double var , var ; 
 = malloc ( var * sizeof ( int ) ) ; 
 var = malloc ( var * sizeof ( int ) ) ; 
 for ( var = nums ; var <= var - nums ; var + + ) { var [ var ] = nums ; var [ var ] = var ; } 
 var [ var ] = nums . nums ; var [ var ] = nums ; var = nums ; [ var ] = var ; 
 while ( var >= nums ) 
 { var = [ var ] ; var - - ; 
 for ( var = nums ; var <= var - nums ; var + + ) 
 { var = var [ var * var + var ] ; var = var + var [ var ] ; 
 if ( ( var < var [ var ] ) & & ( var > nums . nums ) ) 
 { var [ var ] = var ; 
 if ( var [ var ] = = nums ) { var [ var ] = nums ; var + + ; [ var ] = var ; } 
 } 
 } 
 } 
 free ( ) ; free ( var ) ; 
 return ; 
 } 
 func ( ) 
 { static double var [ nums ] [ nums ] = 
 { { nums . nums , - nums . nums , nums . nums , nums . nums , - nums . nums , nums . nums , - nums . nums , nums . nums } , 
 { - nums . nums , nums . nums , nums . nums , nums . nums , - nums . nums , - nums . nums , nums . nums , - nums . nums } , 
 { nums . nums , nums . nums , nums . nums , - nums . nums , nums . nums , nums . nums , - nums . nums , nums . nums } , 
 { nums . nums , nums . nums , - nums . nums , nums . nums , nums . nums , - nums . nums , nums . nums , nums . nums } , 
 { - nums . nums , - nums . nums , nums . nums , nums . nums , nums . nums , nums . nums , nums . nums , - nums . nums } , 
 { nums . nums , - nums . nums , nums . nums , - nums . nums , nums . nums , nums . nums , - nums . nums , nums . nums } , 
 { - nums . nums , nums . nums , - nums . nums , nums . nums , nums . nums , - nums . nums , nums . nums , nums . nums } , 
 { nums . nums , - nums . nums , nums . nums , nums . nums , - nums . nums , nums . nums , nums . nums , nums . nums } } ; 
 double var [ nums ] ; 
 int var ; 
 printf ( words ) ; 
 call_func ( var , nums , nums , nums . var + nums , var ) ; 
 for ( var = nums ; var <= nums ; var + + ) 
 printf ( words , var , var [ var ] ) ; 
 printf ( words ) ; 
 } 
 #define var nums 
 int func ( void ) 
 { int var , var , var , var , var ; 
 int var [ var + nums ] ; 
 var = nums ; 
 for ( var = nums ; var <= var ; var + + ) var [ var ] = var ; 
 printf ( words , var ) ; 
 for ( var = nums ; var <= var ; var + + ) printf ( words , var [ var ] ) ; 
 printf ( words ) ; var + + ; 
 var = nums ; 
 while ( var ) 
 { var = var ; var = nums ; 
 while ( var > nums & & ! var ) 
 { var - - ; 
 if ( var [ var ] < var [ var + nums ] ) var = nums ; 
 } 
 if ( var ) 
 { var = var + nums ; 
 for ( var = var + nums ; var < var + nums ; var + + ) if ( var [ var ] < var [ var ] ) var = var ; 
 var = var [ var ] ; var [ var ] = var [ var ] ; var [ var ] = var ; 
 var + + ; var = var ; 
 while ( var < var ) { var = var [ var ] ; var [ var ] = var [ var ] ; var [ var ] = var ; var + + ; var - - ; } 
 printf ( words , var ) ; 
 for ( var = nums ; var < var + nums ; var + + ) printf ( words , var [ var ] ) ; 
 printf ( words ) ; var + + ; 
 } 
 } 
 return ( nums ) ; 
 } 
 #define var nums 
 float func ( ) 
 { static int var = nums ; 
 int var , var , var ; 
 var = nums ; var = nums ; var = nums ; 
 var = ( var * var + var ) % var ; 
 return ( float ) var / var ; 
 } 
 func ( ) 
 { int var [ var ] [ nums ] , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { var [ var ] [ nums ] = nums * call_func ( ) ; 
 var [ var ] [ nums ] = ( nums - var [ var ] [ nums ] ) * call_func ( ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { if ( var % nums = = nums ) printf ( words ) ; 
 printf ( words , var [ var ] [ nums ] , var [ var ] [ nums ] ) ; 
 } 
 printf ( words ) ; 
 } 
 #define var nums 
 float func ( ) 
 { static int var = nums ; 
 int var , var , var ; 
 var = nums ; var = nums ; var = nums ; 
 var = ( var * var + var ) % var ; 
 return ( float ) var / var ; 
 } 
 func ( ) 
 { int var [ var ] [ nums ] , var ; 
 for ( var = nums ; var < var ; var + + ) 
 { var [ var ] [ nums ] = nums * call_func ( ) ; 
 var [ var ] [ nums ] = var [ var ] [ nums ] * call_func ( ) ; 
 } 
 for ( var = nums ; var < var ; var + + ) 
 { if ( var % nums = = nums ) printf ( words ) ; 
 printf ( words , var [ var ] [ nums ] , var [ var ] [ nums ] ) ; 
 } 
 printf ( words ) ; 
 } 
 int func ( data_type var , data_type * var [ ] ) 
 { 
 FILE * var , * var ; 
 int var ; 
 char var [ nums ] ; 
 int var = nums ; 
 if ( var < nums ) 
 { 
 call_func ( var , words , var [ nums ] ) ; 
 call_func ( nums ) ; 
 } 
 if ( ( var = fopen ( var [ nums ] , words ) ) = = NULL ) 
 { 
 call_func ( var , words var var var words 
 call_func ( nums ) ; 
 } 
 call_func ( var , var [ nums ] ) ; 
 call_func ( var , words ) ; 
 if ( ( var = fopen ( var , words ) ) = = NULL ) 
 { 
 call_func ( var , words var var var . words 
 call_func ( nums ) ; 
 } 
 while ( ( var = call_func ( var ) ) ! = ) 
 if ( var + + % nums = = nums ) 
 call_func ( var , var ) ; 
 if ( fclose ( var ) ! = nums | | fclose ( var ) ! = nums ) 
 printf ( words ) ; 
 return nums ; 
 } 
 char * func ( data_type * var ) 
 { 
 char * var ; 
 var = var ; 
 while ( * var ) 
 call_func ( * var + + ) ; 
 do { 
 call_func ( * - - var ) ; 
 } while ( var - var ) ; 
 return ( var ) ; 
 } 
 int func ( void ) 
 { char * var ; 
 var = call_func ( words ) ; 
 call_func ( words ) ; 
 return nums ; 
 } 
 #define var words 
 
 printf ( words , ) ; } 
 struct { 
 int var , var ; 
 union { 
 double var ; 
 int var ; 
 } ; 
 } ; 
 int var , var ; 
 void func ( data_type var , data_type var ) { 
 for ( int var = nums ; var <= nums ; var + + ) { 
 while ( var ) { 
 switch ( var ) 
 { 
 case nums : 
 return nums ; 
 case nums : 
 return nums ; 
 default : 
 break ; 
 } 
 } 
 if ( var < nums ) return nums ; 
 else if ( var < nums ) return nums ; 
 else if ( var < nums ) return nums ; 
 } 
 } 
 int ( int var , int var ) { 
 return var + var ; 
 } 
 int func ( data_type var , data_type var ) { 
 return var - var ; 
 } 
 int func ( data_type var , data_type var ) { 
 return var * var ; 
 } 
 int func ( data_type var , data_type var ) { 
 return ( int ) ( var / var ) ; 
 } 
 int func ( data_type var , data_type var , data_type var ) { 
 switch ( var ) 
 { 
 case nums : 
 return ( var , var ) ; break ; 
 case nums : 
 return call_func ( var , var ) ; break ; 
 case nums : 
 return call_func ( var , var ) ; break ; 
 case nums : 
 return call_func ( var , var ) ; break ; 
 default : 
 break ; 
 } 
 } 
 int [ ] func ( data_type var , data_type var ) { 
 int var [ nums ] = { nums } ; 
 return var ; 
 } 
 int func ( ) { 
 struct_name struct_var ; 
 int var , var ; 
 int var [ nums ] ; 
 double [ nums ] ; 
 char var [ nums ] ; 
 char var = words ; 
 var = nums , var = nums ; 
 double = nums . nums ; 
 printf ( words , call_func ( nums , var / var , ( var + var ) * var ) ) ; 
 system ( words ) ; 
 return nums ; 
 } 
 